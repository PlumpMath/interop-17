let module Blob = {
  type t;
  external constructor: t => blobParts::(option Array) => options::(option TODO) => unit = "" [@@bs.send];
  external isClosed: t => bool = "" [@@bs.send];
  external size: t => float = "" [@@bs.send];
  external type: t => string = "" [@@bs.send];
  external close: t => unit => unit = "" [@@bs.send];
  external slice: t => start::(option float) => end::(option float) => contentType::(option string) => Blob = "" [@@bs.send];
};
let module FileReader = {
  type t;
  external abort: t => unit => unit = "" [@@bs.send];
  external _DONE: t => float = "" [@@bs.send];
  external _EMPTY: t => float = "" [@@bs.send];
  external error: t => DOMError = "" [@@bs.send];
  external _LOADING: t => float = "" [@@bs.send];
  external onabort: t => 'a => 'a = "" [@@bs.send];
  external onerror: t => 'a => 'a = "" [@@bs.send];
  external onload: t => 'a => 'a = "" [@@bs.send];
  external onloadend: t => 'a => 'a = "" [@@bs.send];
  external onloadstart: t => 'a => 'a = "" [@@bs.send];
  external onprogress: t => 'a => 'a = "" [@@bs.send];
  external readAsArrayBuffer: t => Blob => unit = "" [@@bs.send];
  external readAsDataURL: t => Blob => unit = "" [@@bs.send];
  external readAsText: t => Blob => encoding::(option string) => unit = "" [@@bs.send];
  external readyState: t => TODO = "" [@@bs.send];
  external result: t => 'a = "" [@@bs.send];
};
let module File = {
  type t;
  external lastModifiedDate: t => 'a = "" [@@bs.send];
  external name: t => string = "" [@@bs.send];
};
let module FileList = {
  type t;
  external _@@iterator: t => unit => Iterator = "" [@@bs.send];
  external length: t => float = "" [@@bs.send];
  external item: t => float => File = "" [@@bs.send];
};
let module DataTransfer = {
  type t;
  external clearData: t => format::(option string) => unit = "" [@@bs.send];
  external getData: t => string => string = "" [@@bs.send];
  external setData: t => string => string => unit = "" [@@bs.send];
  external setDragImage: t => Element => float => float => unit = "" [@@bs.send];
  external dropEffect: t => string = "" [@@bs.send];
  external effectAllowed: t => string = "" [@@bs.send];
  external files: t => FileList = "" [@@bs.send];
  external items: t => DataTransferItemList = "" [@@bs.send];
  external types: t => Array = "" [@@bs.send];
};
let module DataTransferItemList = {
  type t;
  external length: t => float = "" [@@bs.send];
  external add: t => string => string => TODO = "" [@@bs.send];
  external add: t => File => TODO = "" [@@bs.send];
  external remove: t => float => unit = "" [@@bs.send];
  external clear: t => unit => unit = "" [@@bs.send];
};
let module DataTransferItem = {
  type t;
  external kind: t => string = "" [@@bs.send];
  external type: t => string = "" [@@bs.send];
  external getAsString: t => TODO => unit = "" [@@bs.send];
  external getAsFile: t => unit => TODO = "" [@@bs.send];
};
let module DOMError = {
  type t;
  external name: t => string = "" [@@bs.send];
};
type TODO;
type TODO;
type TODO;
type TODO;
type TODO;
type TODO;
type TODO;
type TODO;
let module EventTarget = {
  type t;
  external addEventListener: t => MouseEventTypes => MouseEventListener => useCapture::(option bool) => unit = "" [@@bs.send];
  external addEventListener: t => KeyboardEventTypes => KeyboardEventListener => useCapture::(option bool) => unit = "" [@@bs.send];
  external addEventListener: t => string => EventListener => useCapture::(option bool) => unit = "" [@@bs.send];
  external removeEventListener: t => MouseEventTypes => MouseEventListener => useCapture::(option bool) => unit = "" [@@bs.send];
  external removeEventListener: t => KeyboardEventTypes => KeyboardEventListener => useCapture::(option bool) => unit = "" [@@bs.send];
  external removeEventListener: t => string => EventListener => useCapture::(option bool) => unit = "" [@@bs.send];
  external attachEvent: t => MouseEventTypes => MouseEventListener => unit = "" [@@bs.send];
  external attachEvent: t => KeyboardEventTypes => KeyboardEventListener => unit = "" [@@bs.send];
  external attachEvent: t => string => EventListener => unit = "" [@@bs.send];
  external detachEvent: t => MouseEventTypes => MouseEventListener => unit = "" [@@bs.send];
  external detachEvent: t => KeyboardEventTypes => KeyboardEventListener => unit = "" [@@bs.send];
  external detachEvent: t => string => EventListener => unit = "" [@@bs.send];
  external dispatchEvent: t => Event => bool = "" [@@bs.send];
  external cancelBubble: t => bool = "" [@@bs.send];
  external initEvent: t => string => bool => bool => unit = "" [@@bs.send];
};
type TODO;
let module Event = {
  type t;
  external constructor: t => string => eventInitDict::(option Event$Init) => unit = "" [@@bs.send];
  external bubbles: t => bool = "" [@@bs.send];
  external cancelable: t => bool = "" [@@bs.send];
  external currentTarget: t => EventTarget = "" [@@bs.send];
  external defaultPrevented: t => bool = "" [@@bs.send];
  external eventPhase: t => float = "" [@@bs.send];
  external isTrusted: t => bool = "" [@@bs.send];
  external srcElement: t => Element = "" [@@bs.send];
  external target: t => EventTarget = "" [@@bs.send];
  external timeStamp: t => float = "" [@@bs.send];
  external type: t => string = "" [@@bs.send];
  external preventDefault: t => unit => unit = "" [@@bs.send];
  external stopImmediatePropagation: t => unit => unit = "" [@@bs.send];
  external stopPropagation: t => unit => unit = "" [@@bs.send];
  external _AT_TARGET: t => float = "" [@@bs.send];
  external _BUBBLING_PHASE: t => float = "" [@@bs.send];
  external _CAPTURING_PHASE: t => float = "" [@@bs.send];
  external initEvent: t => string => bool => bool => unit = "" [@@bs.send];
};
type TODO;
let module CustomEvent = {
  type t;
  external constructor: t => string => eventInitDict::(option CustomEvent$Init) => unit = "" [@@bs.send];
  external detail: t => 'a = "" [@@bs.send];
  external initCustomEvent: t => string => bool => bool => 'a => CustomEvent = "" [@@bs.send];
};
let module UIEvent = {
  type t;
  external detail: t => float = "" [@@bs.send];
  external view: t => 'a = "" [@@bs.send];
};
let module MouseEvent = {
  type t;
  external altKey: t => bool = "" [@@bs.send];
  external button: t => float = "" [@@bs.send];
  external buttons: t => float = "" [@@bs.send];
  external clientX: t => float = "" [@@bs.send];
  external clientY: t => float = "" [@@bs.send];
  external ctrlKey: t => bool = "" [@@bs.send];
  external metaKey: t => bool = "" [@@bs.send];
  external movementX: t => float = "" [@@bs.send];
  external movementY: t => float = "" [@@bs.send];
  external offsetX: t => float = "" [@@bs.send];
  external offsetY: t => float = "" [@@bs.send];
  external pageX: t => float = "" [@@bs.send];
  external pageY: t => float = "" [@@bs.send];
  external region: t => TODO = "" [@@bs.send];
  external screenX: t => float = "" [@@bs.send];
  external screenY: t => float = "" [@@bs.send];
  external shiftKey: t => bool = "" [@@bs.send];
  external relatedTarget: t => TODO = "" [@@bs.send];
  external getModifierState: t => string => bool = "" [@@bs.send];
};
let module WheelEvent = {
  type t;
  external deltaX: t => float = "" [@@bs.send];
  external deltaY: t => float = "" [@@bs.send];
  external deltaZ: t => float = "" [@@bs.send];
  external deltaMode: t => TODO = "" [@@bs.send];
};
let module DragEvent = {
  type t;
  external dataTransfer: t => TODO = "" [@@bs.send];
};
let module ProgressEvent = {
  type t;
  external lengthComputable: t => bool = "" [@@bs.send];
  external loaded: t => float = "" [@@bs.send];
  external total: t => float = "" [@@bs.send];
  external initProgressEvent: t => string => bool => bool => bool => float => float => unit = "" [@@bs.send];
};
let module PromiseRejectionEvent = {
  type t;
  external promise: t => Promise = "" [@@bs.send];
  external reason: t => 'a = "" [@@bs.send];
};
let module MessageEvent = {
  type t;
  external data: t => TODO = "" [@@bs.send];
  external origin: t => string = "" [@@bs.send];
  external lastEventId: t => string = "" [@@bs.send];
  external source: t => WindowProxy = "" [@@bs.send];
};
let module KeyboardEvent = {
  type t;
  external altKey: t => bool = "" [@@bs.send];
  external code: t => string = "" [@@bs.send];
  external ctrlKey: t => bool = "" [@@bs.send];
  external isComposing: t => bool = "" [@@bs.send];
  external key: t => string = "" [@@bs.send];
  external location: t => float = "" [@@bs.send];
  external metaKey: t => bool = "" [@@bs.send];
  external repeat: t => bool = "" [@@bs.send];
  external shiftKey: t => bool = "" [@@bs.send];
  external getModifierState: t => keyArg::(option string) => bool = "" [@@bs.send];
  external charCode: t => float = "" [@@bs.send];
  external keyCode: t => float = "" [@@bs.send];
  external which: t => float = "" [@@bs.send];
};
let module Touch = {
  type t;
  external clientX: t => float = "" [@@bs.send];
  external clientY: t => float = "" [@@bs.send];
  external identifier: t => float = "" [@@bs.send];
  external pageX: t => float = "" [@@bs.send];
  external pageY: t => float = "" [@@bs.send];
  external screenX: t => float = "" [@@bs.send];
  external screenY: t => float = "" [@@bs.send];
  external target: t => EventTarget = "" [@@bs.send];
};
let module TouchList = {
  type t;
  external length: t => float = "" [@@bs.send];
  external item: t => float => TODO = "" [@@bs.send];
};
let module TouchEvent = {
  type t;
  external altKey: t => bool = "" [@@bs.send];
  external changedTouches: t => TouchList = "" [@@bs.send];
  external ctrlKey: t => bool = "" [@@bs.send];
  external metaKey: t => bool = "" [@@bs.send];
  external shiftKey: t => bool = "" [@@bs.send];
  external targetTouchesRead: t => TouchList = "" [@@bs.send];
  external touches: t => TouchList = "" [@@bs.send];
};
let module Node = {
  type t;
  external baseURI: t => TODO = "" [@@bs.send];
  external childNodes: t => NodeList = "" [@@bs.send];
  external firstChild: t => TODO = "" [@@bs.send];
  external lastChild: t => TODO = "" [@@bs.send];
  external nextSibling: t => TODO = "" [@@bs.send];
  external nodeName: t => string = "" [@@bs.send];
  external nodeType: t => float = "" [@@bs.send];
  external nodeValue: t => string = "" [@@bs.send];
  external ownerDocument: t => Document = "" [@@bs.send];
  external parentElement: t => TODO = "" [@@bs.send];
  external parentNode: t => TODO = "" [@@bs.send];
  external previousSibling: t => TODO = "" [@@bs.send];
  external rootNode: t => Node = "" [@@bs.send];
  external textContent: t => string = "" [@@bs.send];
  external appendChild: t => Node => Node = "" [@@bs.send];
  external cloneNode: t => deep::(option bool) => this = "" [@@bs.send];
  external compareDocumentPosition: t => Node => float = "" [@@bs.send];
  external contains: t => TODO => bool = "" [@@bs.send];
  external hasChildNodes: t => unit => bool = "" [@@bs.send];
  external insertBefore: t => Node => refChild::(option TODO) => Node = "" [@@bs.send];
  external isDefaultNamespace: t => string => bool = "" [@@bs.send];
  external isEqualNode: t => Node => bool = "" [@@bs.send];
  external isSameNode: t => Node => bool = "" [@@bs.send];
  external lookupNamespaceURI: t => string => string = "" [@@bs.send];
  external lookupPrefix: t => string => string = "" [@@bs.send];
  external normalize: t => unit => unit = "" [@@bs.send];
  external removeChild: t => Node => Node = "" [@@bs.send];
  external replaceChild: t => Node => Node => Node = "" [@@bs.send];
  external _ATTRIBUTE_NODE: float = "" [@@bs.val];
  external _CDATA_SECTION_NODE: float = "" [@@bs.val];
  external _COMMENT_NODE: float = "" [@@bs.val];
  external _DOCUMENT_FRAGMENT_NODE: float = "" [@@bs.val];
  external _DOCUMENT_NODE: float = "" [@@bs.val];
  external _DOCUMENT_POSITION_CONTAINED_BY: float = "" [@@bs.val];
  external _DOCUMENT_POSITION_CONTAINS: float = "" [@@bs.val];
  external _DOCUMENT_POSITION_DISCONNECTED: float = "" [@@bs.val];
  external _DOCUMENT_POSITION_FOLLOWING: float = "" [@@bs.val];
  external _DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: float = "" [@@bs.val];
  external _DOCUMENT_POSITION_PRECEDING: float = "" [@@bs.val];
  external _DOCUMENT_TYPE_NODE: float = "" [@@bs.val];
  external _ELEMENT_NODE: float = "" [@@bs.val];
  external _ENTITY_NODE: float = "" [@@bs.val];
  external _ENTITY_REFERENCE_NODE: float = "" [@@bs.val];
  external _NOTATION_NODE: float = "" [@@bs.val];
  external _PROCESSING_INSTRUCTION_NODE: float = "" [@@bs.val];
  external _TEXT_NODE: float = "" [@@bs.val];
  external innerText: t => string = "" [@@bs.send];
  external outerText: t => string = "" [@@bs.send];
};
let module NodeList = {
  type t;
  external _@@iterator: t => unit => Iterator = "" [@@bs.send];
  external length: t => float = "" [@@bs.send];
  external item: t => float => T = "" [@@bs.send];
};
let module NamedNodeMap = {
  type t;
  external length: t => float = "" [@@bs.send];
  external removeNamedItemNS: t => string => string => Attr = "" [@@bs.send];
  external item: t => float => Attr = "" [@@bs.send];
  external removeNamedItem: t => string => Attr = "" [@@bs.send];
  external getNamedItem: t => string => Attr = "" [@@bs.send];
  external setNamedItem: t => Attr => Attr = "" [@@bs.send];
  external getNamedItemNS: t => string => string => Attr = "" [@@bs.send];
  external setNamedItemNS: t => Attr => Attr = "" [@@bs.send];
};
let module Attr = {
  type t;
  external isId: t => bool = "" [@@bs.send];
  external specified: t => bool = "" [@@bs.send];
  external ownerElement: t => Element = "" [@@bs.send];
  external value: t => string = "" [@@bs.send];
  external name: t => string = "" [@@bs.send];
};
let module HTMLCollection = {
  type t;
  external _@@iterator: t => unit => Iterator = "" [@@bs.send];
  external length: t => float = "" [@@bs.send];
  external item: t => nameOrIndex::(option 'a) => optionalIndex::(option 'a) => Elem = "" [@@bs.send];
  external namedItem: t => string => Elem = "" [@@bs.send];
};
type TODO;
let module Document = {
  type t;
  external _URL: t => string = "" [@@bs.send];
  external adoptNode: t => Node => Node = "" [@@bs.send];
  external anchors: t => HTMLCollection = "" [@@bs.send];
  external applets: t => HTMLCollection = "" [@@bs.send];
  external body: t => HTMLElement = "" [@@bs.send];
  external characterSet: t => string = "" [@@bs.send];
  external close: t => unit => unit = "" [@@bs.send];
  external cookie: t => string = "" [@@bs.send];
  external createAttribute: t => string => Attr = "" [@@bs.send];
  external createAttributeNS: t => string => string => Attr = "" [@@bs.send];
  external createCDATASection: t => string => Text = "" [@@bs.send];
  external createComment: t => string => Comment = "" [@@bs.send];
  external createDocumentFragment: t => unit => DocumentFragment = "" [@@bs.send];
  external createElement: t => TODO => HTMLAnchorElement = "" [@@bs.send];
  external createElement: t => TODO => HTMLAudioElement = "" [@@bs.send];
  external createElement: t => TODO => HTMLButtonElement = "" [@@bs.send];
  external createElement: t => TODO => HTMLCanvasElement = "" [@@bs.send];
  external createElement: t => TODO => HTMLDivElement = "" [@@bs.send];
  external createElement: t => TODO => HTMLFormElement = "" [@@bs.send];
  external createElement: t => TODO => HTMLIFrameElement = "" [@@bs.send];
  external createElement: t => TODO => HTMLImageElement = "" [@@bs.send];
  external createElement: t => TODO => HTMLInputElement = "" [@@bs.send];
  external createElement: t => TODO => HTMLLabelElement = "" [@@bs.send];
  external createElement: t => TODO => HTMLLinkElement = "" [@@bs.send];
  external createElement: t => TODO => HTMLMediaElement = "" [@@bs.send];
  external createElement: t => TODO => HTMLOptionElement = "" [@@bs.send];
  external createElement: t => TODO => HTMLParagraphElement = "" [@@bs.send];
  external createElement: t => TODO => HTMLScriptElement = "" [@@bs.send];
  external createElement: t => TODO => HTMLSelectElement = "" [@@bs.send];
  external createElement: t => TODO => HTMLSourceElement = "" [@@bs.send];
  external createElement: t => TODO => HTMLSpanElement = "" [@@bs.send];
  external createElement: t => TODO => HTMLStyleElement = "" [@@bs.send];
  external createElement: t => TODO => HTMLTextAreaElement = "" [@@bs.send];
  external createElement: t => TODO => HTMLVideoElement = "" [@@bs.send];
  external createElement: t => TODO => HTMLTableRowElement = "" [@@bs.send];
  external createElement: t => TODO => HTMLTableCellElement = "" [@@bs.send];
  external createElement: t => string => HTMLElement = "" [@@bs.send];
  external createElementNS: t => string => string => Element = "" [@@bs.send];
  external createTextNode: t => string => Text = "" [@@bs.send];
  external currentScript: t => TODO = "" [@@bs.send];
  external doctype: t => DocumentType = "" [@@bs.send];
  external documentElement: t => HTMLElement = "" [@@bs.send];
  external documentMode: t => float = "" [@@bs.send];
  external domain: t => TODO = "" [@@bs.send];
  external embeds: t => HTMLCollection = "" [@@bs.send];
  external execCommand: t => string => showUI::(option bool) => value::(option 'a) => bool = "" [@@bs.send];
  external forms: t => HTMLCollection = "" [@@bs.send];
  external getElementById: t => string => HTMLElement = "" [@@bs.send];
  external getElementsByClassName: t => string => HTMLCollection = "" [@@bs.send];
  external getElementsByName: t => string => HTMLCollection = "" [@@bs.send];
  external getElementsByTagName: t => TODO => HTMLCollection = "" [@@bs.send];
  external getElementsByTagName: t => TODO => HTMLCollection = "" [@@bs.send];
  external getElementsByTagName: t => TODO => HTMLCollection = "" [@@bs.send];
  external getElementsByTagName: t => TODO => HTMLCollection = "" [@@bs.send];
  external getElementsByTagName: t => TODO => HTMLCollection = "" [@@bs.send];
  external getElementsByTagName: t => TODO => HTMLCollection = "" [@@bs.send];
  external getElementsByTagName: t => TODO => HTMLCollection = "" [@@bs.send];
  external getElementsByTagName: t => TODO => HTMLCollection = "" [@@bs.send];
  external getElementsByTagName: t => TODO => HTMLCollection = "" [@@bs.send];
  external getElementsByTagName: t => TODO => HTMLCollection = "" [@@bs.send];
  external getElementsByTagName: t => TODO => HTMLCollection = "" [@@bs.send];
  external getElementsByTagName: t => TODO => HTMLCollection = "" [@@bs.send];
  external getElementsByTagName: t => TODO => HTMLCollection = "" [@@bs.send];
  external getElementsByTagName: t => TODO => HTMLCollection = "" [@@bs.send];
  external getElementsByTagName: t => TODO => HTMLCollection = "" [@@bs.send];
  external getElementsByTagName: t => TODO => HTMLCollection = "" [@@bs.send];
  external getElementsByTagName: t => TODO => HTMLCollection = "" [@@bs.send];
  external getElementsByTagName: t => TODO => HTMLCollection = "" [@@bs.send];
  external getElementsByTagName: t => TODO => HTMLCollection = "" [@@bs.send];
  external getElementsByTagName: t => TODO => HTMLCollection = "" [@@bs.send];
  external getElementsByTagName: t => TODO => HTMLCollection = "" [@@bs.send];
  external getElementsByTagName: t => TODO => HTMLCollection = "" [@@bs.send];
  external getElementsByTagName: t => TODO => HTMLCollection = "" [@@bs.send];
  external getElementsByTagName: t => string => HTMLCollection = "" [@@bs.send];
  external getElementsByTagNameNS: t => string => TODO => HTMLCollection = "" [@@bs.send];
  external getElementsByTagNameNS: t => string => TODO => HTMLCollection = "" [@@bs.send];
  external getElementsByTagNameNS: t => string => TODO => HTMLCollection = "" [@@bs.send];
  external getElementsByTagNameNS: t => string => TODO => HTMLCollection = "" [@@bs.send];
  external getElementsByTagNameNS: t => string => TODO => HTMLCollection = "" [@@bs.send];
  external getElementsByTagNameNS: t => string => TODO => HTMLCollection = "" [@@bs.send];
  external getElementsByTagNameNS: t => string => TODO => HTMLCollection = "" [@@bs.send];
  external getElementsByTagNameNS: t => string => TODO => HTMLCollection = "" [@@bs.send];
  external getElementsByTagNameNS: t => string => TODO => HTMLCollection = "" [@@bs.send];
  external getElementsByTagNameNS: t => string => TODO => HTMLCollection = "" [@@bs.send];
  external getElementsByTagNameNS: t => string => TODO => HTMLCollection = "" [@@bs.send];
  external getElementsByTagNameNS: t => string => TODO => HTMLCollection = "" [@@bs.send];
  external getElementsByTagNameNS: t => string => TODO => HTMLCollection = "" [@@bs.send];
  external getElementsByTagNameNS: t => string => TODO => HTMLCollection = "" [@@bs.send];
  external getElementsByTagNameNS: t => string => TODO => HTMLCollection = "" [@@bs.send];
  external getElementsByTagNameNS: t => string => TODO => HTMLCollection = "" [@@bs.send];
  external getElementsByTagNameNS: t => string => TODO => HTMLCollection = "" [@@bs.send];
  external getElementsByTagNameNS: t => string => TODO => HTMLCollection = "" [@@bs.send];
  external getElementsByTagNameNS: t => string => TODO => HTMLCollection = "" [@@bs.send];
  external getElementsByTagNameNS: t => string => TODO => HTMLCollection = "" [@@bs.send];
  external getElementsByTagNameNS: t => string => TODO => HTMLCollection = "" [@@bs.send];
  external getElementsByTagNameNS: t => string => TODO => HTMLCollection = "" [@@bs.send];
  external getElementsByTagNameNS: t => string => TODO => HTMLCollection = "" [@@bs.send];
  external getElementsByTagNameNS: t => string => string => HTMLCollection = "" [@@bs.send];
  external head: t => HTMLElement = "" [@@bs.send];
  external images: t => HTMLCollection = "" [@@bs.send];
  external implementation: t => DOMImplementation = "" [@@bs.send];
  external importNode: t => Node => bool => Node = "" [@@bs.send];
  external inputEncoding: t => string = "" [@@bs.send];
  external lastModified: t => string = "" [@@bs.send];
  external links: t => HTMLCollection = "" [@@bs.send];
  external media: t => string = "" [@@bs.send];
  external open: t => url::(option string) => name::(option string) => features::(option string) => replace::(option bool) => 'a = "" [@@bs.send];
  external readyState: t => string = "" [@@bs.send];
  external referrer: t => string = "" [@@bs.send];
  external scripts: t => HTMLCollection = "" [@@bs.send];
  external styleSheets: t => StyleSheetList = "" [@@bs.send];
  external title: t => string = "" [@@bs.send];
  external write: t => array 'rest => unit = "" [@@bs.send] [@@bs.splice];
  external writeln: t => array 'rest => unit = "" [@@bs.send] [@@bs.splice];
  external xmlEncoding: t => string = "" [@@bs.send];
  external xmlStandalone: t => bool = "" [@@bs.send];
  external xmlVersion: t => string = "" [@@bs.send];
  external registerElement: t => string => options::(option ElementRegistrationOptions) => 'a = "" [@@bs.send];
  external getSelection: t => unit => TODO = "" [@@bs.send];
  external activeElement: t => HTMLElement = "" [@@bs.send];
  external hasFocus: t => unit => bool = "" [@@bs.send];
  external location: t => Location = "" [@@bs.send];
  external createEvent: t => TODO => CustomEvent = "" [@@bs.send];
  external createEvent: t => string => Event = "" [@@bs.send];
  external createRange: t => unit => Range = "" [@@bs.send];
  external elementFromPoint: t => float => float => HTMLElement = "" [@@bs.send];
  external defaultView: t => 'a = "" [@@bs.send];
  external compatMode: t => TODO = "" [@@bs.send];
  external hidden: t => bool = "" [@@bs.send];
  external childElementCount: t => float = "" [@@bs.send];
  external children: t => HTMLCollection = "" [@@bs.send];
  external firstElementChild: t => TODO = "" [@@bs.send];
  external lastElementChild: t => TODO = "" [@@bs.send];
  external querySelector: t => string => HTMLElement = "" [@@bs.send];
  external querySelectorAll: t => string => NodeList = "" [@@bs.send];
  external createNodeIterator: t => RootNodeT => TODO => filter::(option NodeFilterInterface) => NodeIterator = "" [@@bs.send];
  external createTreeWalker: t => RootNodeT => TODO => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "" [@@bs.send];
  external createNodeIterator: t => RootNodeT => TODO => filter::(option NodeFilterInterface) => NodeIterator = "" [@@bs.send];
  external createNodeIterator: t => RootNodeT => TODO => filter::(option NodeFilterInterface) => NodeIterator = "" [@@bs.send];
  external createNodeIterator: t => RootNodeT => TODO => filter::(option NodeFilterInterface) => NodeIterator = "" [@@bs.send];
  external createNodeIterator: t => RootNodeT => TODO => filter::(option NodeFilterInterface) => NodeIterator = "" [@@bs.send];
  external createNodeIterator: t => RootNodeT => TODO => filter::(option NodeFilterInterface) => NodeIterator = "" [@@bs.send];
  external createNodeIterator: t => RootNodeT => TODO => filter::(option NodeFilterInterface) => NodeIterator = "" [@@bs.send];
  external createNodeIterator: t => RootNodeT => TODO => filter::(option NodeFilterInterface) => NodeIterator = "" [@@bs.send];
  external createNodeIterator: t => RootNodeT => TODO => filter::(option NodeFilterInterface) => NodeIterator = "" [@@bs.send];
  external createNodeIterator: t => RootNodeT => TODO => filter::(option NodeFilterInterface) => NodeIterator = "" [@@bs.send];
  external createNodeIterator: t => RootNodeT => TODO => filter::(option NodeFilterInterface) => NodeIterator = "" [@@bs.send];
  external createNodeIterator: t => RootNodeT => TODO => filter::(option NodeFilterInterface) => NodeIterator = "" [@@bs.send];
  external createNodeIterator: t => RootNodeT => TODO => filter::(option NodeFilterInterface) => NodeIterator = "" [@@bs.send];
  external createNodeIterator: t => RootNodeT => TODO => filter::(option NodeFilterInterface) => NodeIterator = "" [@@bs.send];
  external createNodeIterator: t => RootNodeT => TODO => filter::(option NodeFilterInterface) => NodeIterator = "" [@@bs.send];
  external createNodeIterator: t => RootNodeT => TODO => filter::(option NodeFilterInterface) => NodeIterator = "" [@@bs.send];
  external createNodeIterator: t => RootNodeT => TODO => filter::(option NodeFilterInterface) => NodeIterator = "" [@@bs.send];
  external createNodeIterator: t => RootNodeT => TODO => filter::(option NodeFilterInterface) => NodeIterator = "" [@@bs.send];
  external createNodeIterator: t => RootNodeT => TODO => filter::(option NodeFilterInterface) => NodeIterator = "" [@@bs.send];
  external createNodeIterator: t => RootNodeT => TODO => filter::(option NodeFilterInterface) => NodeIterator = "" [@@bs.send];
  external createNodeIterator: t => RootNodeT => TODO => filter::(option NodeFilterInterface) => NodeIterator = "" [@@bs.send];
  external createNodeIterator: t => RootNodeT => TODO => filter::(option NodeFilterInterface) => NodeIterator = "" [@@bs.send];
  external createNodeIterator: t => RootNodeT => TODO => filter::(option NodeFilterInterface) => NodeIterator = "" [@@bs.send];
  external createNodeIterator: t => RootNodeT => TODO => filter::(option NodeFilterInterface) => NodeIterator = "" [@@bs.send];
  external createNodeIterator: t => RootNodeT => TODO => filter::(option NodeFilterInterface) => NodeIterator = "" [@@bs.send];
  external createTreeWalker: t => RootNodeT => TODO => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "" [@@bs.send];
  external createTreeWalker: t => RootNodeT => TODO => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "" [@@bs.send];
  external createTreeWalker: t => RootNodeT => TODO => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "" [@@bs.send];
  external createTreeWalker: t => RootNodeT => TODO => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "" [@@bs.send];
  external createTreeWalker: t => RootNodeT => TODO => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "" [@@bs.send];
  external createTreeWalker: t => RootNodeT => TODO => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "" [@@bs.send];
  external createTreeWalker: t => RootNodeT => TODO => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "" [@@bs.send];
  external createTreeWalker: t => RootNodeT => TODO => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "" [@@bs.send];
  external createTreeWalker: t => RootNodeT => TODO => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "" [@@bs.send];
  external createTreeWalker: t => RootNodeT => TODO => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "" [@@bs.send];
  external createTreeWalker: t => RootNodeT => TODO => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "" [@@bs.send];
  external createTreeWalker: t => RootNodeT => TODO => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "" [@@bs.send];
  external createTreeWalker: t => RootNodeT => TODO => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "" [@@bs.send];
  external createTreeWalker: t => RootNodeT => TODO => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "" [@@bs.send];
  external createTreeWalker: t => RootNodeT => TODO => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "" [@@bs.send];
  external createTreeWalker: t => RootNodeT => TODO => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "" [@@bs.send];
  external createTreeWalker: t => RootNodeT => TODO => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "" [@@bs.send];
  external createTreeWalker: t => RootNodeT => TODO => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "" [@@bs.send];
  external createTreeWalker: t => RootNodeT => TODO => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "" [@@bs.send];
  external createTreeWalker: t => RootNodeT => TODO => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "" [@@bs.send];
  external createTreeWalker: t => RootNodeT => TODO => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "" [@@bs.send];
  external createTreeWalker: t => RootNodeT => TODO => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "" [@@bs.send];
  external createTreeWalker: t => RootNodeT => TODO => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "" [@@bs.send];
  external createTreeWalker: t => RootNodeT => TODO => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "" [@@bs.send];
  external createNodeIterator: t => RootNodeT => TODO => filter::(option NodeFilterInterface) => NodeIterator = "" [@@bs.send];
  external createNodeIterator: t => RootNodeT => TODO => filter::(option NodeFilterInterface) => NodeIterator = "" [@@bs.send];
  external createNodeIterator: t => RootNodeT => TODO => filter::(option NodeFilterInterface) => NodeIterator = "" [@@bs.send];
  external createNodeIterator: t => RootNodeT => TODO => filter::(option NodeFilterInterface) => NodeIterator = "" [@@bs.send];
  external createNodeIterator: t => RootNodeT => TODO => filter::(option NodeFilterInterface) => NodeIterator = "" [@@bs.send];
  external createNodeIterator: t => RootNodeT => TODO => filter::(option NodeFilterInterface) => NodeIterator = "" [@@bs.send];
  external createNodeIterator: t => RootNodeT => TODO => filter::(option NodeFilterInterface) => NodeIterator = "" [@@bs.send];
  external createNodeIterator: t => RootNodeT => TODO => filter::(option NodeFilterInterface) => NodeIterator = "" [@@bs.send];
  external createTreeWalker: t => RootNodeT => TODO => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "" [@@bs.send];
  external createTreeWalker: t => RootNodeT => TODO => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "" [@@bs.send];
  external createTreeWalker: t => RootNodeT => TODO => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "" [@@bs.send];
  external createTreeWalker: t => RootNodeT => TODO => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "" [@@bs.send];
  external createTreeWalker: t => RootNodeT => TODO => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "" [@@bs.send];
  external createTreeWalker: t => RootNodeT => TODO => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "" [@@bs.send];
  external createTreeWalker: t => RootNodeT => TODO => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "" [@@bs.send];
  external createTreeWalker: t => RootNodeT => TODO => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "" [@@bs.send];
  external createNodeIterator: t => RootNodeT => TODO => filter::(option NodeFilterInterface) => NodeIterator = "" [@@bs.send];
  external createNodeIterator: t => RootNodeT => TODO => filter::(option NodeFilterInterface) => NodeIterator = "" [@@bs.send];
  external createNodeIterator: t => RootNodeT => TODO => filter::(option NodeFilterInterface) => NodeIterator = "" [@@bs.send];
  external createNodeIterator: t => RootNodeT => TODO => filter::(option NodeFilterInterface) => NodeIterator = "" [@@bs.send];
  external createNodeIterator: t => RootNodeT => TODO => filter::(option NodeFilterInterface) => NodeIterator = "" [@@bs.send];
  external createNodeIterator: t => RootNodeT => TODO => filter::(option NodeFilterInterface) => NodeIterator = "" [@@bs.send];
  external createNodeIterator: t => RootNodeT => TODO => filter::(option NodeFilterInterface) => NodeIterator = "" [@@bs.send];
  external createNodeIterator: t => RootNodeT => TODO => filter::(option NodeFilterInterface) => NodeIterator = "" [@@bs.send];
  external createTreeWalker: t => RootNodeT => TODO => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "" [@@bs.send];
  external createTreeWalker: t => RootNodeT => TODO => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "" [@@bs.send];
  external createTreeWalker: t => RootNodeT => TODO => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "" [@@bs.send];
  external createTreeWalker: t => RootNodeT => TODO => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "" [@@bs.send];
  external createTreeWalker: t => RootNodeT => TODO => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "" [@@bs.send];
  external createTreeWalker: t => RootNodeT => TODO => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "" [@@bs.send];
  external createTreeWalker: t => RootNodeT => TODO => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "" [@@bs.send];
  external createTreeWalker: t => RootNodeT => TODO => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "" [@@bs.send];
  external createNodeIterator: t => RootNodeT => float => filter::(option NodeFilterInterface) => NodeIterator = "" [@@bs.send];
  external createTreeWalker: t => RootNodeT => float => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "" [@@bs.send];
  external createNodeIterator: t => RootNodeT => unit => NodeIterator = "" [@@bs.send];
  external createTreeWalker: t => RootNodeT => unit => TreeWalker = "" [@@bs.send];
};
let module DocumentFragment = {
  type t;
  external childElementCount: t => float = "" [@@bs.send];
  external children: t => HTMLCollection = "" [@@bs.send];
  external firstElementChild: t => TODO = "" [@@bs.send];
  external lastElementChild: t => TODO = "" [@@bs.send];
  external querySelector: t => string => HTMLElement = "" [@@bs.send];
  external querySelectorAll: t => string => NodeList = "" [@@bs.send];
};
let module Selection = {
  type t;
  external anchorNode: t => TODO = "" [@@bs.send];
  external anchorOffset: t => float = "" [@@bs.send];
  external focusNode: t => TODO = "" [@@bs.send];
  external focusOffset: t => float = "" [@@bs.send];
  external isCollapsed: t => bool = "" [@@bs.send];
  external rangeCount: t => float = "" [@@bs.send];
  external addRange: t => Range => unit = "" [@@bs.send];
  external getRangeAt: t => float => Range = "" [@@bs.send];
  external removeRange: t => Range => unit = "" [@@bs.send];
  external removeAllRanges: t => unit => unit = "" [@@bs.send];
  external collapse: t => TODO => offset::(option float) => unit = "" [@@bs.send];
  external collapseToStart: t => unit => unit = "" [@@bs.send];
  external collapseToEnd: t => unit => unit = "" [@@bs.send];
  external containsNode: t => Node => aPartlyContained::(option bool) => bool = "" [@@bs.send];
  external deleteFromDocument: t => unit => unit = "" [@@bs.send];
  external extend: t => Node => offset::(option float) => unit = "" [@@bs.send];
  external empty: t => unit => unit = "" [@@bs.send];
  external selectAllChildren: t => Node => unit = "" [@@bs.send];
  external setPosition: t => TODO => offset::(option float) => unit = "" [@@bs.send];
  external setBaseAndExtent: t => Node => float => Node => float => unit = "" [@@bs.send];
  external toString: t => unit => string = "" [@@bs.send];
};
let module Range = {
  type t;
  external startOffset: t => float = "" [@@bs.send];
  external collapsed: t => bool = "" [@@bs.send];
  external endOffset: t => float = "" [@@bs.send];
  external startContainer: t => Node = "" [@@bs.send];
  external endContainer: t => Node = "" [@@bs.send];
  external commonAncestorContainer: t => Node = "" [@@bs.send];
  external setStart: t => Node => float => unit = "" [@@bs.send];
  external setEndBefore: t => Node => unit = "" [@@bs.send];
  external setStartBefore: t => Node => unit = "" [@@bs.send];
  external selectNode: t => Node => unit = "" [@@bs.send];
  external detach: t => unit => unit = "" [@@bs.send];
  external getBoundingClientRect: t => unit => ClientRect = "" [@@bs.send];
  external toString: t => unit => string = "" [@@bs.send];
  external compareBoundaryPoints: t => float => Range => float = "" [@@bs.send];
  external insertNode: t => Node => unit = "" [@@bs.send];
  external collapse: t => bool => unit = "" [@@bs.send];
  external selectNodeContents: t => Node => unit = "" [@@bs.send];
  external cloneContents: t => unit => Node = "" [@@bs.send];
  external setEnd: t => Node => float => unit = "" [@@bs.send];
  external cloneRange: t => unit => Range = "" [@@bs.send];
  external getClientRects: t => unit => ClientRectList = "" [@@bs.send];
  external surroundContents: t => Node => unit = "" [@@bs.send];
  external deleteContents: t => unit => unit = "" [@@bs.send];
  external setStartAfter: t => Node => unit = "" [@@bs.send];
  external extractContents: t => unit => DocumentFragment = "" [@@bs.send];
  external setEndAfter: t => Node => unit = "" [@@bs.send];
  external createContextualFragment: t => string => Node = "" [@@bs.send];
  external _END_TO_END: t => float = "" [@@bs.send];
  external _START_TO_START: t => float = "" [@@bs.send];
  external _START_TO_END: t => float = "" [@@bs.send];
  external _END_TO_START: t => float = "" [@@bs.send];
};
let module DocumentInstance = {
  external _URL: string = "document.URL" [@@bs.val];
  external adoptNode: Node => Node = "document.adoptNode" [@@bs.val];
  external anchors: HTMLCollection = "document.anchors" [@@bs.val];
  external applets: HTMLCollection = "document.applets" [@@bs.val];
  external body: HTMLElement = "document.body" [@@bs.val];
  external characterSet: string = "document.characterSet" [@@bs.val];
  external close: unit => unit = "document.close" [@@bs.val];
  external cookie: string = "document.cookie" [@@bs.val];
  external createAttribute: string => Attr = "document.createAttribute" [@@bs.val];
  external createAttributeNS: string => string => Attr = "document.createAttributeNS" [@@bs.val];
  external createCDATASection: string => Text = "document.createCDATASection" [@@bs.val];
  external createComment: string => Comment = "document.createComment" [@@bs.val];
  external createDocumentFragment: unit => DocumentFragment = "document.createDocumentFragment" [@@bs.val];
  external createElement: TODO => HTMLAnchorElement = "document.createElement" [@@bs.val];
  external createElement: TODO => HTMLAudioElement = "document.createElement" [@@bs.val];
  external createElement: TODO => HTMLButtonElement = "document.createElement" [@@bs.val];
  external createElement: TODO => HTMLCanvasElement = "document.createElement" [@@bs.val];
  external createElement: TODO => HTMLDivElement = "document.createElement" [@@bs.val];
  external createElement: TODO => HTMLFormElement = "document.createElement" [@@bs.val];
  external createElement: TODO => HTMLIFrameElement = "document.createElement" [@@bs.val];
  external createElement: TODO => HTMLImageElement = "document.createElement" [@@bs.val];
  external createElement: TODO => HTMLInputElement = "document.createElement" [@@bs.val];
  external createElement: TODO => HTMLLabelElement = "document.createElement" [@@bs.val];
  external createElement: TODO => HTMLLinkElement = "document.createElement" [@@bs.val];
  external createElement: TODO => HTMLMediaElement = "document.createElement" [@@bs.val];
  external createElement: TODO => HTMLOptionElement = "document.createElement" [@@bs.val];
  external createElement: TODO => HTMLParagraphElement = "document.createElement" [@@bs.val];
  external createElement: TODO => HTMLScriptElement = "document.createElement" [@@bs.val];
  external createElement: TODO => HTMLSelectElement = "document.createElement" [@@bs.val];
  external createElement: TODO => HTMLSourceElement = "document.createElement" [@@bs.val];
  external createElement: TODO => HTMLSpanElement = "document.createElement" [@@bs.val];
  external createElement: TODO => HTMLStyleElement = "document.createElement" [@@bs.val];
  external createElement: TODO => HTMLTextAreaElement = "document.createElement" [@@bs.val];
  external createElement: TODO => HTMLVideoElement = "document.createElement" [@@bs.val];
  external createElement: TODO => HTMLTableRowElement = "document.createElement" [@@bs.val];
  external createElement: TODO => HTMLTableCellElement = "document.createElement" [@@bs.val];
  external createElement: string => HTMLElement = "document.createElement" [@@bs.val];
  external createElementNS: string => string => Element = "document.createElementNS" [@@bs.val];
  external createTextNode: string => Text = "document.createTextNode" [@@bs.val];
  external currentScript: TODO = "document.currentScript" [@@bs.val];
  external doctype: DocumentType = "document.doctype" [@@bs.val];
  external documentElement: HTMLElement = "document.documentElement" [@@bs.val];
  external documentMode: float = "document.documentMode" [@@bs.val];
  external domain: TODO = "document.domain" [@@bs.val];
  external embeds: HTMLCollection = "document.embeds" [@@bs.val];
  external execCommand: string => showUI::(option bool) => value::(option 'a) => bool = "document.execCommand" [@@bs.val];
  external forms: HTMLCollection = "document.forms" [@@bs.val];
  external getElementById: string => HTMLElement = "document.getElementById" [@@bs.val];
  external getElementsByClassName: string => HTMLCollection = "document.getElementsByClassName" [@@bs.val];
  external getElementsByName: string => HTMLCollection = "document.getElementsByName" [@@bs.val];
  external getElementsByTagName: TODO => HTMLCollection = "document.getElementsByTagName" [@@bs.val];
  external getElementsByTagName: TODO => HTMLCollection = "document.getElementsByTagName" [@@bs.val];
  external getElementsByTagName: TODO => HTMLCollection = "document.getElementsByTagName" [@@bs.val];
  external getElementsByTagName: TODO => HTMLCollection = "document.getElementsByTagName" [@@bs.val];
  external getElementsByTagName: TODO => HTMLCollection = "document.getElementsByTagName" [@@bs.val];
  external getElementsByTagName: TODO => HTMLCollection = "document.getElementsByTagName" [@@bs.val];
  external getElementsByTagName: TODO => HTMLCollection = "document.getElementsByTagName" [@@bs.val];
  external getElementsByTagName: TODO => HTMLCollection = "document.getElementsByTagName" [@@bs.val];
  external getElementsByTagName: TODO => HTMLCollection = "document.getElementsByTagName" [@@bs.val];
  external getElementsByTagName: TODO => HTMLCollection = "document.getElementsByTagName" [@@bs.val];
  external getElementsByTagName: TODO => HTMLCollection = "document.getElementsByTagName" [@@bs.val];
  external getElementsByTagName: TODO => HTMLCollection = "document.getElementsByTagName" [@@bs.val];
  external getElementsByTagName: TODO => HTMLCollection = "document.getElementsByTagName" [@@bs.val];
  external getElementsByTagName: TODO => HTMLCollection = "document.getElementsByTagName" [@@bs.val];
  external getElementsByTagName: TODO => HTMLCollection = "document.getElementsByTagName" [@@bs.val];
  external getElementsByTagName: TODO => HTMLCollection = "document.getElementsByTagName" [@@bs.val];
  external getElementsByTagName: TODO => HTMLCollection = "document.getElementsByTagName" [@@bs.val];
  external getElementsByTagName: TODO => HTMLCollection = "document.getElementsByTagName" [@@bs.val];
  external getElementsByTagName: TODO => HTMLCollection = "document.getElementsByTagName" [@@bs.val];
  external getElementsByTagName: TODO => HTMLCollection = "document.getElementsByTagName" [@@bs.val];
  external getElementsByTagName: TODO => HTMLCollection = "document.getElementsByTagName" [@@bs.val];
  external getElementsByTagName: TODO => HTMLCollection = "document.getElementsByTagName" [@@bs.val];
  external getElementsByTagName: TODO => HTMLCollection = "document.getElementsByTagName" [@@bs.val];
  external getElementsByTagName: string => HTMLCollection = "document.getElementsByTagName" [@@bs.val];
  external getElementsByTagNameNS: string => TODO => HTMLCollection = "document.getElementsByTagNameNS" [@@bs.val];
  external getElementsByTagNameNS: string => TODO => HTMLCollection = "document.getElementsByTagNameNS" [@@bs.val];
  external getElementsByTagNameNS: string => TODO => HTMLCollection = "document.getElementsByTagNameNS" [@@bs.val];
  external getElementsByTagNameNS: string => TODO => HTMLCollection = "document.getElementsByTagNameNS" [@@bs.val];
  external getElementsByTagNameNS: string => TODO => HTMLCollection = "document.getElementsByTagNameNS" [@@bs.val];
  external getElementsByTagNameNS: string => TODO => HTMLCollection = "document.getElementsByTagNameNS" [@@bs.val];
  external getElementsByTagNameNS: string => TODO => HTMLCollection = "document.getElementsByTagNameNS" [@@bs.val];
  external getElementsByTagNameNS: string => TODO => HTMLCollection = "document.getElementsByTagNameNS" [@@bs.val];
  external getElementsByTagNameNS: string => TODO => HTMLCollection = "document.getElementsByTagNameNS" [@@bs.val];
  external getElementsByTagNameNS: string => TODO => HTMLCollection = "document.getElementsByTagNameNS" [@@bs.val];
  external getElementsByTagNameNS: string => TODO => HTMLCollection = "document.getElementsByTagNameNS" [@@bs.val];
  external getElementsByTagNameNS: string => TODO => HTMLCollection = "document.getElementsByTagNameNS" [@@bs.val];
  external getElementsByTagNameNS: string => TODO => HTMLCollection = "document.getElementsByTagNameNS" [@@bs.val];
  external getElementsByTagNameNS: string => TODO => HTMLCollection = "document.getElementsByTagNameNS" [@@bs.val];
  external getElementsByTagNameNS: string => TODO => HTMLCollection = "document.getElementsByTagNameNS" [@@bs.val];
  external getElementsByTagNameNS: string => TODO => HTMLCollection = "document.getElementsByTagNameNS" [@@bs.val];
  external getElementsByTagNameNS: string => TODO => HTMLCollection = "document.getElementsByTagNameNS" [@@bs.val];
  external getElementsByTagNameNS: string => TODO => HTMLCollection = "document.getElementsByTagNameNS" [@@bs.val];
  external getElementsByTagNameNS: string => TODO => HTMLCollection = "document.getElementsByTagNameNS" [@@bs.val];
  external getElementsByTagNameNS: string => TODO => HTMLCollection = "document.getElementsByTagNameNS" [@@bs.val];
  external getElementsByTagNameNS: string => TODO => HTMLCollection = "document.getElementsByTagNameNS" [@@bs.val];
  external getElementsByTagNameNS: string => TODO => HTMLCollection = "document.getElementsByTagNameNS" [@@bs.val];
  external getElementsByTagNameNS: string => TODO => HTMLCollection = "document.getElementsByTagNameNS" [@@bs.val];
  external getElementsByTagNameNS: string => string => HTMLCollection = "document.getElementsByTagNameNS" [@@bs.val];
  external head: HTMLElement = "document.head" [@@bs.val];
  external images: HTMLCollection = "document.images" [@@bs.val];
  external implementation: DOMImplementation = "document.implementation" [@@bs.val];
  external importNode: Node => bool => Node = "document.importNode" [@@bs.val];
  external inputEncoding: string = "document.inputEncoding" [@@bs.val];
  external lastModified: string = "document.lastModified" [@@bs.val];
  external links: HTMLCollection = "document.links" [@@bs.val];
  external media: string = "document.media" [@@bs.val];
  external open: url::(option string) => name::(option string) => features::(option string) => replace::(option bool) => 'a = "document.open" [@@bs.val];
  external readyState: string = "document.readyState" [@@bs.val];
  external referrer: string = "document.referrer" [@@bs.val];
  external scripts: HTMLCollection = "document.scripts" [@@bs.val];
  external styleSheets: StyleSheetList = "document.styleSheets" [@@bs.val];
  external title: string = "document.title" [@@bs.val];
  external write: array 'rest => unit = "document.write" [@@bs.val] [@@bs.splice];
  external writeln: array 'rest => unit = "document.writeln" [@@bs.val] [@@bs.splice];
  external xmlEncoding: string = "document.xmlEncoding" [@@bs.val];
  external xmlStandalone: bool = "document.xmlStandalone" [@@bs.val];
  external xmlVersion: string = "document.xmlVersion" [@@bs.val];
  external registerElement: string => options::(option ElementRegistrationOptions) => 'a = "document.registerElement" [@@bs.val];
  external getSelection: unit => TODO = "document.getSelection" [@@bs.val];
  external activeElement: HTMLElement = "document.activeElement" [@@bs.val];
  external hasFocus: unit => bool = "document.hasFocus" [@@bs.val];
  external location: Location = "document.location" [@@bs.val];
  external createEvent: TODO => CustomEvent = "document.createEvent" [@@bs.val];
  external createEvent: string => Event = "document.createEvent" [@@bs.val];
  external createRange: unit => Range = "document.createRange" [@@bs.val];
  external elementFromPoint: float => float => HTMLElement = "document.elementFromPoint" [@@bs.val];
  external defaultView: 'a = "document.defaultView" [@@bs.val];
  external compatMode: TODO = "document.compatMode" [@@bs.val];
  external hidden: bool = "document.hidden" [@@bs.val];
  external childElementCount: float = "document.childElementCount" [@@bs.val];
  external children: HTMLCollection = "document.children" [@@bs.val];
  external firstElementChild: TODO = "document.firstElementChild" [@@bs.val];
  external lastElementChild: TODO = "document.lastElementChild" [@@bs.val];
  external querySelector: string => HTMLElement = "document.querySelector" [@@bs.val];
  external querySelectorAll: string => NodeList = "document.querySelectorAll" [@@bs.val];
  external createNodeIterator: RootNodeT => TODO => filter::(option NodeFilterInterface) => NodeIterator = "document.createNodeIterator" [@@bs.val];
  external createTreeWalker: RootNodeT => TODO => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "document.createTreeWalker" [@@bs.val];
  external createNodeIterator: RootNodeT => TODO => filter::(option NodeFilterInterface) => NodeIterator = "document.createNodeIterator" [@@bs.val];
  external createNodeIterator: RootNodeT => TODO => filter::(option NodeFilterInterface) => NodeIterator = "document.createNodeIterator" [@@bs.val];
  external createNodeIterator: RootNodeT => TODO => filter::(option NodeFilterInterface) => NodeIterator = "document.createNodeIterator" [@@bs.val];
  external createNodeIterator: RootNodeT => TODO => filter::(option NodeFilterInterface) => NodeIterator = "document.createNodeIterator" [@@bs.val];
  external createNodeIterator: RootNodeT => TODO => filter::(option NodeFilterInterface) => NodeIterator = "document.createNodeIterator" [@@bs.val];
  external createNodeIterator: RootNodeT => TODO => filter::(option NodeFilterInterface) => NodeIterator = "document.createNodeIterator" [@@bs.val];
  external createNodeIterator: RootNodeT => TODO => filter::(option NodeFilterInterface) => NodeIterator = "document.createNodeIterator" [@@bs.val];
  external createNodeIterator: RootNodeT => TODO => filter::(option NodeFilterInterface) => NodeIterator = "document.createNodeIterator" [@@bs.val];
  external createNodeIterator: RootNodeT => TODO => filter::(option NodeFilterInterface) => NodeIterator = "document.createNodeIterator" [@@bs.val];
  external createNodeIterator: RootNodeT => TODO => filter::(option NodeFilterInterface) => NodeIterator = "document.createNodeIterator" [@@bs.val];
  external createNodeIterator: RootNodeT => TODO => filter::(option NodeFilterInterface) => NodeIterator = "document.createNodeIterator" [@@bs.val];
  external createNodeIterator: RootNodeT => TODO => filter::(option NodeFilterInterface) => NodeIterator = "document.createNodeIterator" [@@bs.val];
  external createNodeIterator: RootNodeT => TODO => filter::(option NodeFilterInterface) => NodeIterator = "document.createNodeIterator" [@@bs.val];
  external createNodeIterator: RootNodeT => TODO => filter::(option NodeFilterInterface) => NodeIterator = "document.createNodeIterator" [@@bs.val];
  external createNodeIterator: RootNodeT => TODO => filter::(option NodeFilterInterface) => NodeIterator = "document.createNodeIterator" [@@bs.val];
  external createNodeIterator: RootNodeT => TODO => filter::(option NodeFilterInterface) => NodeIterator = "document.createNodeIterator" [@@bs.val];
  external createNodeIterator: RootNodeT => TODO => filter::(option NodeFilterInterface) => NodeIterator = "document.createNodeIterator" [@@bs.val];
  external createNodeIterator: RootNodeT => TODO => filter::(option NodeFilterInterface) => NodeIterator = "document.createNodeIterator" [@@bs.val];
  external createNodeIterator: RootNodeT => TODO => filter::(option NodeFilterInterface) => NodeIterator = "document.createNodeIterator" [@@bs.val];
  external createNodeIterator: RootNodeT => TODO => filter::(option NodeFilterInterface) => NodeIterator = "document.createNodeIterator" [@@bs.val];
  external createNodeIterator: RootNodeT => TODO => filter::(option NodeFilterInterface) => NodeIterator = "document.createNodeIterator" [@@bs.val];
  external createNodeIterator: RootNodeT => TODO => filter::(option NodeFilterInterface) => NodeIterator = "document.createNodeIterator" [@@bs.val];
  external createNodeIterator: RootNodeT => TODO => filter::(option NodeFilterInterface) => NodeIterator = "document.createNodeIterator" [@@bs.val];
  external createNodeIterator: RootNodeT => TODO => filter::(option NodeFilterInterface) => NodeIterator = "document.createNodeIterator" [@@bs.val];
  external createTreeWalker: RootNodeT => TODO => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "document.createTreeWalker" [@@bs.val];
  external createTreeWalker: RootNodeT => TODO => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "document.createTreeWalker" [@@bs.val];
  external createTreeWalker: RootNodeT => TODO => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "document.createTreeWalker" [@@bs.val];
  external createTreeWalker: RootNodeT => TODO => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "document.createTreeWalker" [@@bs.val];
  external createTreeWalker: RootNodeT => TODO => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "document.createTreeWalker" [@@bs.val];
  external createTreeWalker: RootNodeT => TODO => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "document.createTreeWalker" [@@bs.val];
  external createTreeWalker: RootNodeT => TODO => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "document.createTreeWalker" [@@bs.val];
  external createTreeWalker: RootNodeT => TODO => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "document.createTreeWalker" [@@bs.val];
  external createTreeWalker: RootNodeT => TODO => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "document.createTreeWalker" [@@bs.val];
  external createTreeWalker: RootNodeT => TODO => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "document.createTreeWalker" [@@bs.val];
  external createTreeWalker: RootNodeT => TODO => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "document.createTreeWalker" [@@bs.val];
  external createTreeWalker: RootNodeT => TODO => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "document.createTreeWalker" [@@bs.val];
  external createTreeWalker: RootNodeT => TODO => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "document.createTreeWalker" [@@bs.val];
  external createTreeWalker: RootNodeT => TODO => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "document.createTreeWalker" [@@bs.val];
  external createTreeWalker: RootNodeT => TODO => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "document.createTreeWalker" [@@bs.val];
  external createTreeWalker: RootNodeT => TODO => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "document.createTreeWalker" [@@bs.val];
  external createTreeWalker: RootNodeT => TODO => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "document.createTreeWalker" [@@bs.val];
  external createTreeWalker: RootNodeT => TODO => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "document.createTreeWalker" [@@bs.val];
  external createTreeWalker: RootNodeT => TODO => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "document.createTreeWalker" [@@bs.val];
  external createTreeWalker: RootNodeT => TODO => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "document.createTreeWalker" [@@bs.val];
  external createTreeWalker: RootNodeT => TODO => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "document.createTreeWalker" [@@bs.val];
  external createTreeWalker: RootNodeT => TODO => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "document.createTreeWalker" [@@bs.val];
  external createTreeWalker: RootNodeT => TODO => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "document.createTreeWalker" [@@bs.val];
  external createTreeWalker: RootNodeT => TODO => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "document.createTreeWalker" [@@bs.val];
  external createNodeIterator: RootNodeT => TODO => filter::(option NodeFilterInterface) => NodeIterator = "document.createNodeIterator" [@@bs.val];
  external createNodeIterator: RootNodeT => TODO => filter::(option NodeFilterInterface) => NodeIterator = "document.createNodeIterator" [@@bs.val];
  external createNodeIterator: RootNodeT => TODO => filter::(option NodeFilterInterface) => NodeIterator = "document.createNodeIterator" [@@bs.val];
  external createNodeIterator: RootNodeT => TODO => filter::(option NodeFilterInterface) => NodeIterator = "document.createNodeIterator" [@@bs.val];
  external createNodeIterator: RootNodeT => TODO => filter::(option NodeFilterInterface) => NodeIterator = "document.createNodeIterator" [@@bs.val];
  external createNodeIterator: RootNodeT => TODO => filter::(option NodeFilterInterface) => NodeIterator = "document.createNodeIterator" [@@bs.val];
  external createNodeIterator: RootNodeT => TODO => filter::(option NodeFilterInterface) => NodeIterator = "document.createNodeIterator" [@@bs.val];
  external createNodeIterator: RootNodeT => TODO => filter::(option NodeFilterInterface) => NodeIterator = "document.createNodeIterator" [@@bs.val];
  external createTreeWalker: RootNodeT => TODO => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "document.createTreeWalker" [@@bs.val];
  external createTreeWalker: RootNodeT => TODO => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "document.createTreeWalker" [@@bs.val];
  external createTreeWalker: RootNodeT => TODO => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "document.createTreeWalker" [@@bs.val];
  external createTreeWalker: RootNodeT => TODO => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "document.createTreeWalker" [@@bs.val];
  external createTreeWalker: RootNodeT => TODO => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "document.createTreeWalker" [@@bs.val];
  external createTreeWalker: RootNodeT => TODO => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "document.createTreeWalker" [@@bs.val];
  external createTreeWalker: RootNodeT => TODO => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "document.createTreeWalker" [@@bs.val];
  external createTreeWalker: RootNodeT => TODO => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "document.createTreeWalker" [@@bs.val];
  external createNodeIterator: RootNodeT => TODO => filter::(option NodeFilterInterface) => NodeIterator = "document.createNodeIterator" [@@bs.val];
  external createNodeIterator: RootNodeT => TODO => filter::(option NodeFilterInterface) => NodeIterator = "document.createNodeIterator" [@@bs.val];
  external createNodeIterator: RootNodeT => TODO => filter::(option NodeFilterInterface) => NodeIterator = "document.createNodeIterator" [@@bs.val];
  external createNodeIterator: RootNodeT => TODO => filter::(option NodeFilterInterface) => NodeIterator = "document.createNodeIterator" [@@bs.val];
  external createNodeIterator: RootNodeT => TODO => filter::(option NodeFilterInterface) => NodeIterator = "document.createNodeIterator" [@@bs.val];
  external createNodeIterator: RootNodeT => TODO => filter::(option NodeFilterInterface) => NodeIterator = "document.createNodeIterator" [@@bs.val];
  external createNodeIterator: RootNodeT => TODO => filter::(option NodeFilterInterface) => NodeIterator = "document.createNodeIterator" [@@bs.val];
  external createNodeIterator: RootNodeT => TODO => filter::(option NodeFilterInterface) => NodeIterator = "document.createNodeIterator" [@@bs.val];
  external createTreeWalker: RootNodeT => TODO => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "document.createTreeWalker" [@@bs.val];
  external createTreeWalker: RootNodeT => TODO => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "document.createTreeWalker" [@@bs.val];
  external createTreeWalker: RootNodeT => TODO => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "document.createTreeWalker" [@@bs.val];
  external createTreeWalker: RootNodeT => TODO => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "document.createTreeWalker" [@@bs.val];
  external createTreeWalker: RootNodeT => TODO => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "document.createTreeWalker" [@@bs.val];
  external createTreeWalker: RootNodeT => TODO => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "document.createTreeWalker" [@@bs.val];
  external createTreeWalker: RootNodeT => TODO => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "document.createTreeWalker" [@@bs.val];
  external createTreeWalker: RootNodeT => TODO => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "document.createTreeWalker" [@@bs.val];
  external createNodeIterator: RootNodeT => float => filter::(option NodeFilterInterface) => NodeIterator = "document.createNodeIterator" [@@bs.val];
  external createTreeWalker: RootNodeT => float => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "document.createTreeWalker" [@@bs.val];
  external createNodeIterator: RootNodeT => unit => NodeIterator = "document.createNodeIterator" [@@bs.val];
  external createTreeWalker: RootNodeT => unit => TreeWalker = "document.createTreeWalker" [@@bs.val];
};
let module DOMTokenList = {
  type t;
  external length: t => float = "" [@@bs.send];
  external item: t => float => string = "" [@@bs.send];
  external contains: t => string => bool = "" [@@bs.send];
  external add: t => string => unit = "" [@@bs.send];
  external remove: t => string => unit = "" [@@bs.send];
  external toggle: t => string => bool = "" [@@bs.send];
};
let module Element = {
  type t;
  external attributes: t => NamedNodeMap = "" [@@bs.send];
  external childElementCount: t => float = "" [@@bs.send];
  external children: t => HTMLCollection = "" [@@bs.send];
  external classList: t => DOMTokenList = "" [@@bs.send];
  external className: t => string = "" [@@bs.send];
  external clientHeight: t => float = "" [@@bs.send];
  external clientLeft: t => float = "" [@@bs.send];
  external clientTop: t => float = "" [@@bs.send];
  external clientWidth: t => float = "" [@@bs.send];
  external firstElementChild: t => TODO = "" [@@bs.send];
  external id: t => string = "" [@@bs.send];
  external innerHTML: t => string = "" [@@bs.send];
  external lastElementChild: t => TODO = "" [@@bs.send];
  external localName: t => string = "" [@@bs.send];
  external namespaceURI: t => TODO = "" [@@bs.send];
  external nextElementSibling: t => TODO = "" [@@bs.send];
  external outerHTML: t => string = "" [@@bs.send];
  external prefix: t => string = "" [@@bs.send];
  external previousElementSibling: t => TODO = "" [@@bs.send];
  external scrollHeight: t => float = "" [@@bs.send];
  external scrollLeft: t => float = "" [@@bs.send];
  external scrollTop: t => float = "" [@@bs.send];
  external scrollWidth: t => float = "" [@@bs.send];
  external tagName: t => string = "" [@@bs.send];
  external closest: t => string => TODO = "" [@@bs.send];
  external dispatchEvent: t => Event => bool = "" [@@bs.send];
  external getAttribute: t => name::(option string) => string = "" [@@bs.send];
  external getAttributeNS: t => string => string => string = "" [@@bs.send];
  external getAttributeNode: t => string => Attr = "" [@@bs.send];
  external getAttributeNodeNS: t => string => string => Attr = "" [@@bs.send];
  external getBoundingClientRect: t => unit => ClientRect = "" [@@bs.send];
  external getClientRects: t => unit => TODO = "" [@@bs.send];
  external getElementsByClassName: t => string => HTMLCollection = "" [@@bs.send];
  external getElementsByTagName: t => TODO => HTMLCollection = "" [@@bs.send];
  external getElementsByTagName: t => TODO => HTMLCollection = "" [@@bs.send];
  external getElementsByTagName: t => TODO => HTMLCollection = "" [@@bs.send];
  external getElementsByTagName: t => TODO => HTMLCollection = "" [@@bs.send];
  external getElementsByTagName: t => TODO => HTMLCollection = "" [@@bs.send];
  external getElementsByTagName: t => TODO => HTMLCollection = "" [@@bs.send];
  external getElementsByTagName: t => TODO => HTMLCollection = "" [@@bs.send];
  external getElementsByTagName: t => TODO => HTMLCollection = "" [@@bs.send];
  external getElementsByTagName: t => TODO => HTMLCollection = "" [@@bs.send];
  external getElementsByTagName: t => TODO => HTMLCollection = "" [@@bs.send];
  external getElementsByTagName: t => TODO => HTMLCollection = "" [@@bs.send];
  external getElementsByTagName: t => TODO => HTMLCollection = "" [@@bs.send];
  external getElementsByTagName: t => TODO => HTMLCollection = "" [@@bs.send];
  external getElementsByTagName: t => TODO => HTMLCollection = "" [@@bs.send];
  external getElementsByTagName: t => TODO => HTMLCollection = "" [@@bs.send];
  external getElementsByTagName: t => TODO => HTMLCollection = "" [@@bs.send];
  external getElementsByTagName: t => TODO => HTMLCollection = "" [@@bs.send];
  external getElementsByTagName: t => TODO => HTMLCollection = "" [@@bs.send];
  external getElementsByTagName: t => TODO => HTMLCollection = "" [@@bs.send];
  external getElementsByTagName: t => TODO => HTMLCollection = "" [@@bs.send];
  external getElementsByTagName: t => TODO => HTMLCollection = "" [@@bs.send];
  external getElementsByTagName: t => TODO => HTMLCollection = "" [@@bs.send];
  external getElementsByTagName: t => TODO => HTMLCollection = "" [@@bs.send];
  external getElementsByTagName: t => string => HTMLCollection = "" [@@bs.send];
  external getElementsByTagNameNS: t => string => TODO => HTMLCollection = "" [@@bs.send];
  external getElementsByTagNameNS: t => string => TODO => HTMLCollection = "" [@@bs.send];
  external getElementsByTagNameNS: t => string => TODO => HTMLCollection = "" [@@bs.send];
  external getElementsByTagNameNS: t => string => TODO => HTMLCollection = "" [@@bs.send];
  external getElementsByTagNameNS: t => string => TODO => HTMLCollection = "" [@@bs.send];
  external getElementsByTagNameNS: t => string => TODO => HTMLCollection = "" [@@bs.send];
  external getElementsByTagNameNS: t => string => TODO => HTMLCollection = "" [@@bs.send];
  external getElementsByTagNameNS: t => string => TODO => HTMLCollection = "" [@@bs.send];
  external getElementsByTagNameNS: t => string => TODO => HTMLCollection = "" [@@bs.send];
  external getElementsByTagNameNS: t => string => TODO => HTMLCollection = "" [@@bs.send];
  external getElementsByTagNameNS: t => string => TODO => HTMLCollection = "" [@@bs.send];
  external getElementsByTagNameNS: t => string => TODO => HTMLCollection = "" [@@bs.send];
  external getElementsByTagNameNS: t => string => TODO => HTMLCollection = "" [@@bs.send];
  external getElementsByTagNameNS: t => string => TODO => HTMLCollection = "" [@@bs.send];
  external getElementsByTagNameNS: t => string => TODO => HTMLCollection = "" [@@bs.send];
  external getElementsByTagNameNS: t => string => TODO => HTMLCollection = "" [@@bs.send];
  external getElementsByTagNameNS: t => string => TODO => HTMLCollection = "" [@@bs.send];
  external getElementsByTagNameNS: t => string => TODO => HTMLCollection = "" [@@bs.send];
  external getElementsByTagNameNS: t => string => TODO => HTMLCollection = "" [@@bs.send];
  external getElementsByTagNameNS: t => string => TODO => HTMLCollection = "" [@@bs.send];
  external getElementsByTagNameNS: t => string => TODO => HTMLCollection = "" [@@bs.send];
  external getElementsByTagNameNS: t => string => TODO => HTMLCollection = "" [@@bs.send];
  external getElementsByTagNameNS: t => string => TODO => HTMLCollection = "" [@@bs.send];
  external getElementsByTagNameNS: t => string => string => HTMLCollection = "" [@@bs.send];
  external hasAttribute: t => string => bool = "" [@@bs.send];
  external hasAttributeNS: t => string => string => bool = "" [@@bs.send];
  external insertAdjacentElement: t => TODO => Element => unit = "" [@@bs.send];
  external insertAdjacentHTML: t => TODO => string => unit = "" [@@bs.send];
  external insertAdjacentText: t => TODO => string => unit = "" [@@bs.send];
  external matches: t => string => bool = "" [@@bs.send];
  external querySelector: t => string => HTMLElement = "" [@@bs.send];
  external querySelectorAll: t => string => NodeList = "" [@@bs.send];
  external releasePointerCapture: t => string => unit = "" [@@bs.send];
  external remove: t => unit => unit = "" [@@bs.send];
  external removeAttribute: t => name::(option string) => unit = "" [@@bs.send];
  external removeAttributeNode: t => Attr => Attr = "" [@@bs.send];
  external removeAttributeNS: t => string => string => unit = "" [@@bs.send];
  external requestFullscren: t => unit => unit = "" [@@bs.send];
  external requestPointerLock: t => unit => unit = "" [@@bs.send];
  external scrollIntoView: t => arg::(option TODO) => unit = "" [@@bs.send];
  external setAttribute: t => name::(option string) => value::(option string) => unit = "" [@@bs.send];
  external setAttributeNS: t => string => string => string => unit = "" [@@bs.send];
  external setAttributeNode: t => Attr => Attr = "" [@@bs.send];
  external setAttributeNodeNS: t => Attr => Attr = "" [@@bs.send];
  external setPointerCapture: t => string => unit = "" [@@bs.send];
};
let module HTMLElement = {
  type t;
  external blur: t => unit => unit = "" [@@bs.send];
  external click: t => unit => unit = "" [@@bs.send];
  external focus: t => unit => unit = "" [@@bs.send];
  external getBoundingClientRect: t => unit => ClientRect = "" [@@bs.send];
  external forceSpellcheck: t => unit => unit = "" [@@bs.send];
  external accessKey: t => string = "" [@@bs.send];
  external accessKeyLabel: t => string = "" [@@bs.send];
  external className: t => string = "" [@@bs.send];
  external contentEditable: t => string = "" [@@bs.send];
  external contextMenu: t => TODO = "" [@@bs.send];
  external dataset: t => TODO = "" [@@bs.send];
  external dir: t => TODO = "" [@@bs.send];
  external draggable: t => bool = "" [@@bs.send];
  external dropzone: t => 'a = "" [@@bs.send];
  external hidden: t => bool = "" [@@bs.send];
  external id: t => string = "" [@@bs.send];
  external innerHTML: t => string = "" [@@bs.send];
  external isContentEditable: t => bool = "" [@@bs.send];
  external itemProp: t => 'a = "" [@@bs.send];
  external itemScope: t => bool = "" [@@bs.send];
  external itemType: t => 'a = "" [@@bs.send];
  external itemValue: t => Object = "" [@@bs.send];
  external lang: t => string = "" [@@bs.send];
  external offsetHeight: t => float = "" [@@bs.send];
  external offsetLeft: t => float = "" [@@bs.send];
  external offsetParent: t => Element = "" [@@bs.send];
  external offsetTop: t => float = "" [@@bs.send];
  external offsetWidth: t => float = "" [@@bs.send];
  external onabort: t => TODO = "" [@@bs.send];
  external onblur: t => TODO = "" [@@bs.send];
  external oncancel: t => TODO = "" [@@bs.send];
  external oncanplay: t => TODO = "" [@@bs.send];
  external oncanplaythrough: t => TODO = "" [@@bs.send];
  external onchange: t => TODO = "" [@@bs.send];
  external onclick: t => TODO = "" [@@bs.send];
  external oncuechange: t => TODO = "" [@@bs.send];
  external ondblclick: t => TODO = "" [@@bs.send];
  external ondurationchange: t => TODO = "" [@@bs.send];
  external onemptied: t => TODO = "" [@@bs.send];
  external onended: t => TODO = "" [@@bs.send];
  external onerror: t => TODO = "" [@@bs.send];
  external onfocus: t => TODO = "" [@@bs.send];
  external oninput: t => TODO = "" [@@bs.send];
  external oninvalid: t => TODO = "" [@@bs.send];
  external onkeydown: t => TODO = "" [@@bs.send];
  external onkeypress: t => TODO = "" [@@bs.send];
  external onkeyup: t => TODO = "" [@@bs.send];
  external onload: t => TODO = "" [@@bs.send];
  external onloadeddata: t => TODO = "" [@@bs.send];
  external onloadedmetadata: t => TODO = "" [@@bs.send];
  external onloadstart: t => TODO = "" [@@bs.send];
  external onmousedown: t => TODO = "" [@@bs.send];
  external onmouseenter: t => TODO = "" [@@bs.send];
  external onmouseleave: t => TODO = "" [@@bs.send];
  external onmousemove: t => TODO = "" [@@bs.send];
  external onmouseout: t => TODO = "" [@@bs.send];
  external onmouseover: t => TODO = "" [@@bs.send];
  external onmouseup: t => TODO = "" [@@bs.send];
  external onmousewheel: t => TODO = "" [@@bs.send];
  external onpause: t => TODO = "" [@@bs.send];
  external onplay: t => TODO = "" [@@bs.send];
  external onplaying: t => TODO = "" [@@bs.send];
  external onprogress: t => TODO = "" [@@bs.send];
  external onratechange: t => TODO = "" [@@bs.send];
  external onreadystatechange: t => TODO = "" [@@bs.send];
  external onreset: t => TODO = "" [@@bs.send];
  external onresize: t => TODO = "" [@@bs.send];
  external onscroll: t => TODO = "" [@@bs.send];
  external onseeked: t => TODO = "" [@@bs.send];
  external onseeking: t => TODO = "" [@@bs.send];
  external onselect: t => TODO = "" [@@bs.send];
  external onshow: t => TODO = "" [@@bs.send];
  external onstalled: t => TODO = "" [@@bs.send];
  external onsubmit: t => TODO = "" [@@bs.send];
  external onsuspend: t => TODO = "" [@@bs.send];
  external ontimeupdate: t => TODO = "" [@@bs.send];
  external ontoggle: t => TODO = "" [@@bs.send];
  external onvolumechange: t => TODO = "" [@@bs.send];
  external onwaiting: t => TODO = "" [@@bs.send];
  external properties: t => 'a = "" [@@bs.send];
  external spellcheck: t => bool = "" [@@bs.send];
  external style: t => CSSStyleDeclaration = "" [@@bs.send];
  external tabIndex: t => float = "" [@@bs.send];
  external title: t => string = "" [@@bs.send];
  external translate: t => bool = "" [@@bs.send];
};
let module HTMLTableCellElement = {
  type t;
  external colSpan: t => float = "" [@@bs.send];
  external rowSpan: t => float = "" [@@bs.send];
  external cellIndex: t => float = "" [@@bs.send];
};
let module HTMLTableRowElement = {
  type t;
  external align: t => TODO = "" [@@bs.send];
  external rowIndex: t => float = "" [@@bs.send];
  external deleteCell: t => float => unit = "" [@@bs.send];
  external insertCell: t => float => HTMLTableCellElement = "" [@@bs.send];
};
let module HTMLMenuElement = {
  type t;
  external getCompact: t => unit => bool = "" [@@bs.send];
  external setCompact: t => bool => unit = "" [@@bs.send];
};
let module HTMLBaseElement = {
  type t;
  external href: t => string = "" [@@bs.send];
  external target: t => string = "" [@@bs.send];
};
let module CanvasGradient = {
  type t;
  external addColorStop: t => float => string => unit = "" [@@bs.send];
};
let module CanvasPattern = {
  type t;
  external setTransform: t => SVGMatrix => unit = "" [@@bs.send];
};
let module ImageBitmap = {
  type t;
  external close: t => unit => unit = "" [@@bs.send];
  external width: t => float = "" [@@bs.send];
  external height: t => float = "" [@@bs.send];
};
type TODO;
type TODO;
let module HitRegionOptions = {
  type t;
  external path: t => Path2D = "" [@@bs.send];
  external fillRule: t => CanvasFillRule = "" [@@bs.send];
  external id: t => string = "" [@@bs.send];
  external parentID: t => string = "" [@@bs.send];
  external cursor: t => string = "" [@@bs.send];
  external control: t => Element = "" [@@bs.send];
  external label: t => TODO = "" [@@bs.send];
  external role: t => TODO = "" [@@bs.send];
};
let module CanvasDrawingStyles = {
  type t;
  external lineWidth: t => float = "" [@@bs.send];
  external lineCap: t => string = "" [@@bs.send];
  external lineJoin: t => string = "" [@@bs.send];
  external miterLimit: t => float = "" [@@bs.send];
  external setLineDash: t => Array => unit = "" [@@bs.send];
  external getLineDash: t => unit => Array = "" [@@bs.send];
  external lineDashOffset: t => float = "" [@@bs.send];
  external font: t => string = "" [@@bs.send];
  external textAlign: t => string = "" [@@bs.send];
  external textBaseline: t => string = "" [@@bs.send];
  external direction: t => string = "" [@@bs.send];
};
let module SVGMatrix = {
  type t;
  external getComponent: t => float => float = "" [@@bs.send];
  external mMultiply: t => SVGMatrix => SVGMatrix = "" [@@bs.send];
  external inverse: t => unit => SVGMatrix = "" [@@bs.send];
  external mTranslate: t => float => float => SVGMatrix = "" [@@bs.send];
  external mScale: t => float => SVGMatrix = "" [@@bs.send];
  external mRotate: t => float => SVGMatrix = "" [@@bs.send];
};
let module TextMetrics = {
  type t;
  external width: t => float = "" [@@bs.send];
  external actualBoundingBoxLeft: t => float = "" [@@bs.send];
  external actualBoundingBoxRight: t => float = "" [@@bs.send];
  external fontBoundingBoxAscent: t => float = "" [@@bs.send];
  external fontBoundingBoxDescent: t => float = "" [@@bs.send];
  external actualBoundingBoxAscent: t => float = "" [@@bs.send];
  external actualBoundingBoxDescent: t => float = "" [@@bs.send];
  external emHeightAscent: t => float = "" [@@bs.send];
  external emHeightDescent: t => float = "" [@@bs.send];
  external hangingBaseline: t => float = "" [@@bs.send];
  external alphabeticBaseline: t => float = "" [@@bs.send];
  external ideographicBaseline: t => float = "" [@@bs.send];
};
let module Path2D = {
  type t;
  external addPath: t => Path2D => transformation::(option TODO) => unit = "" [@@bs.send];
  external addPathByStrokingPath: t => Path2D => CanvasDrawingStyles => transformation::(option TODO) => unit = "" [@@bs.send];
  external addText: t => string => CanvasDrawingStyles => TODO => float => float => maxWidth::(option float) => unit = "" [@@bs.send];
  external addPathByStrokingText: t => string => CanvasDrawingStyles => TODO => float => float => maxWidth::(option float) => unit = "" [@@bs.send];
  external addText: t => string => CanvasDrawingStyles => TODO => Path2D => maxWidth::(option float) => unit = "" [@@bs.send];
  external addPathByStrokingText: t => string => CanvasDrawingStyles => TODO => Path2D => maxWidth::(option float) => unit = "" [@@bs.send];
  external arc: t => float => float => float => float => float => anticlockwise::(option bool) => unit = "" [@@bs.send];
  external arcTo: t => float => float => float => float => float => unit => unit => unit = "" [@@bs.send];
  external arcTo: t => float => float => float => float => float => float => float => unit = "" [@@bs.send];
  external bezierCurveTo: t => float => float => float => float => float => float => unit = "" [@@bs.send];
  external closePath: t => unit => unit = "" [@@bs.send];
  external ellipse: t => float => float => float => float => float => float => float => anticlockwise::(option bool) => unit = "" [@@bs.send];
  external lineTo: t => float => float => unit = "" [@@bs.send];
  external moveTo: t => float => float => unit = "" [@@bs.send];
  external quadraticCurveTo: t => float => float => float => float => unit = "" [@@bs.send];
  external rect: t => float => float => float => float => unit = "" [@@bs.send];
};
let module ImageData = {
  type t;
  external width: t => float = "" [@@bs.send];
  external height: t => float = "" [@@bs.send];
  external data: t => Uint8ClampedArray = "" [@@bs.send];
};
let module CanvasRenderingContext2D = {
  type t;
  external canvas: t => HTMLCanvasElement = "" [@@bs.send];
  external width: t => float = "" [@@bs.send];
  external height: t => float = "" [@@bs.send];
  external commit: t => unit => unit = "" [@@bs.send];
  external save: t => unit => unit = "" [@@bs.send];
  external restore: t => unit => unit = "" [@@bs.send];
  external currentTransform: t => SVGMatrix = "" [@@bs.send];
  external scale: t => float => float => unit = "" [@@bs.send];
  external rotate: t => float => unit = "" [@@bs.send];
  external translate: t => float => float => unit = "" [@@bs.send];
  external transform: t => float => float => float => float => float => float => unit = "" [@@bs.send];
  external setTransform: t => float => float => float => float => float => float => unit = "" [@@bs.send];
  external resetTransform: t => unit => unit = "" [@@bs.send];
  external globalAlpha: t => float = "" [@@bs.send];
  external globalCompositeOperation: t => string = "" [@@bs.send];
  external imageSmoothingEnabled: t => bool = "" [@@bs.send];
  external strokeStyle: t => TODO = "" [@@bs.send];
  external fillStyle: t => TODO = "" [@@bs.send];
  external createLinearGradient: t => float => float => float => float => CanvasGradient = "" [@@bs.send];
  external createRadialGradient: t => float => float => float => float => float => float => CanvasGradient = "" [@@bs.send];
  external createPattern: t => CanvasImageSource => TODO => CanvasPattern = "" [@@bs.send];
  external shadowOffsetX: t => float = "" [@@bs.send];
  external shadowOffsetY: t => float = "" [@@bs.send];
  external shadowBlur: t => float = "" [@@bs.send];
  external shadowColor: t => string = "" [@@bs.send];
  external clearRect: t => float => float => float => float => unit = "" [@@bs.send];
  external fillRect: t => float => float => float => float => unit = "" [@@bs.send];
  external strokeRect: t => float => float => float => float => unit = "" [@@bs.send];
  external beginPath: t => unit => unit = "" [@@bs.send];
  external fill: t => fillRule::(option CanvasFillRule) => unit = "" [@@bs.send];
  external fill: t => Path2D => fillRule::(option CanvasFillRule) => unit = "" [@@bs.send];
  external stroke: t => unit => unit = "" [@@bs.send];
  external stroke: t => Path2D => unit = "" [@@bs.send];
  external drawFocusIfNeeded: t => Element => unit = "" [@@bs.send];
  external drawFocusIfNeeded: t => Path2D => Element => unit = "" [@@bs.send];
  external scrollPathIntoView: t => unit => unit = "" [@@bs.send];
  external scrollPathIntoView: t => Path2D => unit = "" [@@bs.send];
  external clip: t => fillRule::(option CanvasFillRule) => unit = "" [@@bs.send];
  external clip: t => Path2D => fillRule::(option CanvasFillRule) => unit = "" [@@bs.send];
  external resetClip: t => unit => unit = "" [@@bs.send];
  external isPointInPath: t => float => float => fillRule::(option CanvasFillRule) => bool = "" [@@bs.send];
  external isPointInPath: t => Path2D => float => float => fillRule::(option CanvasFillRule) => bool = "" [@@bs.send];
  external isPointInStroke: t => float => float => bool = "" [@@bs.send];
  external isPointInStroke: t => Path2D => float => float => bool = "" [@@bs.send];
  external fillText: t => string => float => float => maxWidth::(option float) => unit = "" [@@bs.send];
  external strokeText: t => string => float => float => maxWidth::(option float) => unit = "" [@@bs.send];
  external measureText: t => string => TextMetrics = "" [@@bs.send];
  external drawImage: t => CanvasImageSource => float => float => unit = "" [@@bs.send];
  external drawImage: t => CanvasImageSource => float => float => float => float => unit = "" [@@bs.send];
  external drawImage: t => CanvasImageSource => float => float => float => float => float => float => float => float => unit = "" [@@bs.send];
  external addHitRegion: t => options::(option HitRegionOptions) => unit = "" [@@bs.send];
  external removeHitRegion: t => string => unit = "" [@@bs.send];
  external clearHitRegions: t => unit => unit = "" [@@bs.send];
  external createImageData: t => float => float => ImageData = "" [@@bs.send];
  external createImageData: t => ImageData => ImageData = "" [@@bs.send];
  external getImageData: t => float => float => float => float => ImageData = "" [@@bs.send];
  external putImageData: t => ImageData => float => float => unit = "" [@@bs.send];
  external putImageData: t => ImageData => float => float => float => float => float => float => unit = "" [@@bs.send];
  external lineWidth: t => float = "" [@@bs.send];
  external lineCap: t => string = "" [@@bs.send];
  external lineJoin: t => string = "" [@@bs.send];
  external miterLimit: t => float = "" [@@bs.send];
  external setLineDash: t => Array => unit = "" [@@bs.send];
  external getLineDash: t => unit => Array = "" [@@bs.send];
  external lineDashOffset: t => float = "" [@@bs.send];
  external font: t => string = "" [@@bs.send];
  external textAlign: t => string = "" [@@bs.send];
  external textBaseline: t => string = "" [@@bs.send];
  external direction: t => string = "" [@@bs.send];
  external closePath: t => unit => unit = "" [@@bs.send];
  external moveTo: t => float => float => unit = "" [@@bs.send];
  external lineTo: t => float => float => unit = "" [@@bs.send];
  external quadraticCurveTo: t => float => float => float => float => unit = "" [@@bs.send];
  external bezierCurveTo: t => float => float => float => float => float => float => unit = "" [@@bs.send];
  external arcTo: t => float => float => float => float => float => unit = "" [@@bs.send];
  external arcTo: t => float => float => float => float => float => float => float => unit = "" [@@bs.send];
  external rect: t => float => float => float => float => unit = "" [@@bs.send];
  external arc: t => float => float => float => float => float => anticlockwise::(option bool) => unit = "" [@@bs.send];
  external ellipse: t => float => float => float => float => float => float => float => anticlockwise::(option bool) => unit = "" [@@bs.send];
};
let module WebGLRenderingContext = {
  type t;
};
type TODO;
let module HTMLCanvasElement = {
  type t;
  external width: t => float = "" [@@bs.send];
  external height: t => float = "" [@@bs.send];
  external getContext: t => TODO => array 'rest => TODO = "" [@@bs.send] [@@bs.splice];
  external getContext: t => TODO => array 'rest => TODO = "" [@@bs.send] [@@bs.splice];
  external getContext: t => string => array 'rest => TODO = "" [@@bs.send] [@@bs.splice];
  external toDataURL: t => type::(option string) => array 'rest => string = "" [@@bs.send] [@@bs.splice];
  external toBlob: t => File => unit => type::(option string) => array 'rest => unit = "" [@@bs.send] [@@bs.splice];
};
let module HTMLFormElement = {
  type t;
  external acceptCharset: t => string = "" [@@bs.send];
  external action: t => string = "" [@@bs.send];
  external elements: t => HTMLCollection = "" [@@bs.send];
  external encoding: t => string = "" [@@bs.send];
  external enctype: t => string = "" [@@bs.send];
  external length: t => float = "" [@@bs.send];
  external method: t => string = "" [@@bs.send];
  external name: t => string = "" [@@bs.send];
  external target: t => string = "" [@@bs.send];
  external checkValidity: t => unit => bool = "" [@@bs.send];
  external item: t => name::(option 'a) => index::(option 'a) => 'a = "" [@@bs.send];
  external namedItem: t => string => 'a = "" [@@bs.send];
  external reset: t => unit => unit = "" [@@bs.send];
  external submit: t => unit => unit = "" [@@bs.send];
};
let module HTMLIFrameElement = {
  type t;
  external allowFullScreen: t => bool = "" [@@bs.send];
  external frameBorder: t => string = "" [@@bs.send];
  external height: t => string = "" [@@bs.send];
  external marginHeight: t => string = "" [@@bs.send];
  external marginWidth: t => string = "" [@@bs.send];
  external name: t => string = "" [@@bs.send];
  external scrolling: t => string = "" [@@bs.send];
  external sandbox: t => DOMTokenList = "" [@@bs.send];
  external src: t => string = "" [@@bs.send];
  external srcDoc: t => string = "" [@@bs.send];
  external width: t => string = "" [@@bs.send];
};
let module HTMLImageElement = {
  type t;
  external alt: t => string = "" [@@bs.send];
  external complete: t => bool = "" [@@bs.send];
  external crossOrigin: t => TODO = "" [@@bs.send];
  external currentSrc: t => string = "" [@@bs.send];
  external height: t => float = "" [@@bs.send];
  external isMap: t => bool = "" [@@bs.send];
  external naturalHeight: t => float = "" [@@bs.send];
  external naturalWidth: t => float = "" [@@bs.send];
  external sizes: t => string = "" [@@bs.send];
  external src: t => string = "" [@@bs.send];
  external srcset: t => string = "" [@@bs.send];
  external useMap: t => string = "" [@@bs.send];
  external width: t => float = "" [@@bs.send];
};
let module Image = {
  type t;
  external constructor: t => width::(option float) => height::(option float) => unit = "" [@@bs.send];
};
let module MediaError = {
  type t;
  external _MEDIA_ERR_ABORTED: t => float = "" [@@bs.send];
  external _MEDIA_ERR_NETWORK: t => float = "" [@@bs.send];
  external _MEDIA_ERR_DECODE: t => float = "" [@@bs.send];
  external _MEDIA_ERR_SRC_NOT_SUPPORTED: t => float = "" [@@bs.send];
  external code: t => float = "" [@@bs.send];
};
let module TimeRanges = {
  type t;
  external length: t => float = "" [@@bs.send];
  external start: t => float => float = "" [@@bs.send];
  external end: t => float => float = "" [@@bs.send];
};
let module AudioTrack = {
  type t;
  external id: t => string = "" [@@bs.send];
  external kind: t => string = "" [@@bs.send];
  external label: t => string = "" [@@bs.send];
  external language: t => string = "" [@@bs.send];
  external enabled: t => bool = "" [@@bs.send];
};
let module AudioTrackList = {
  type t;
  external length: t => float = "" [@@bs.send];
  external getTrackById: t => string => TODO = "" [@@bs.send];
  external onchange: t => 'a => 'a = "" [@@bs.send];
  external onaddtrack: t => 'a => 'a = "" [@@bs.send];
  external onremovetrack: t => 'a => 'a = "" [@@bs.send];
};
let module VideoTrack = {
  type t;
  external id: t => string = "" [@@bs.send];
  external kind: t => string = "" [@@bs.send];
  external label: t => string = "" [@@bs.send];
  external language: t => string = "" [@@bs.send];
  external selected: t => bool = "" [@@bs.send];
};
let module VideoTrackList = {
  type t;
  external length: t => float = "" [@@bs.send];
  external getTrackById: t => string => TODO = "" [@@bs.send];
  external selectedIndex: t => float = "" [@@bs.send];
  external onchange: t => 'a => 'a = "" [@@bs.send];
  external onaddtrack: t => 'a => 'a = "" [@@bs.send];
  external onremovetrack: t => 'a => 'a = "" [@@bs.send];
};
let module TextTrackCue = {
  type t;
  external constructor: t => float => float => string => unit = "" [@@bs.send];
  external track: t => TextTrack = "" [@@bs.send];
  external id: t => string = "" [@@bs.send];
  external startTime: t => float = "" [@@bs.send];
  external endTime: t => float = "" [@@bs.send];
  external pauseOnExit: t => bool = "" [@@bs.send];
  external vertical: t => string = "" [@@bs.send];
  external snapToLines: t => bool = "" [@@bs.send];
  external lines: t => float = "" [@@bs.send];
  external position: t => float = "" [@@bs.send];
  external size: t => float = "" [@@bs.send];
  external align: t => string = "" [@@bs.send];
  external text: t => string = "" [@@bs.send];
  external getCueAsHTML: t => unit => Node = "" [@@bs.send];
  external onenter: t => 'a => 'a = "" [@@bs.send];
  external onexit: t => 'a => 'a = "" [@@bs.send];
};
let module TextTrackCueList = {
  type t;
  external length: t => float = "" [@@bs.send];
  external getCueById: t => string => TODO = "" [@@bs.send];
};
let module TextTrack = {
  type t;
  external kind: t => string = "" [@@bs.send];
  external label: t => string = "" [@@bs.send];
  external language: t => string = "" [@@bs.send];
  external mode: t => string = "" [@@bs.send];
  external cues: t => TextTrackCueList = "" [@@bs.send];
  external activeCues: t => TextTrackCueList = "" [@@bs.send];
  external addCue: t => TextTrackCue => unit = "" [@@bs.send];
  external removeCue: t => TextTrackCue => unit = "" [@@bs.send];
  external oncuechange: t => 'a => 'a = "" [@@bs.send];
};
let module TextTrackList = {
  type t;
  external length: t => float = "" [@@bs.send];
  external onaddtrack: t => 'a => 'a = "" [@@bs.send];
  external onremovetrack: t => 'a => 'a = "" [@@bs.send];
};
let module HTMLMediaElement = {
  type t;
  external error: t => TODO = "" [@@bs.send];
  external src: t => string = "" [@@bs.send];
  external srcObject: t => TODO = "" [@@bs.send];
  external currentSrc: t => string = "" [@@bs.send];
  external crossOrigin: t => TODO = "" [@@bs.send];
  external _NETWORK_EMPTY: t => float = "" [@@bs.send];
  external _NETWORK_IDLE: t => float = "" [@@bs.send];
  external _NETWORK_LOADING: t => float = "" [@@bs.send];
  external _NETWORK_NO_SOURCE: t => float = "" [@@bs.send];
  external networkState: t => float = "" [@@bs.send];
  external preload: t => string = "" [@@bs.send];
  external buffered: t => TimeRanges = "" [@@bs.send];
  external load: t => unit => unit = "" [@@bs.send];
  external canPlayType: t => string => string = "" [@@bs.send];
  external _HAVE_NOTHING: t => float = "" [@@bs.send];
  external _HAVE_METADATA: t => float = "" [@@bs.send];
  external _HAVE_CURRENT_DATA: t => float = "" [@@bs.send];
  external _HAVE_FUTURE_DATA: t => float = "" [@@bs.send];
  external _HAVE_ENOUGH_DATA: t => float = "" [@@bs.send];
  external readyState: t => float = "" [@@bs.send];
  external seeking: t => bool = "" [@@bs.send];
  external currentTime: t => float = "" [@@bs.send];
  external duration: t => float = "" [@@bs.send];
  external startDate: t => Date = "" [@@bs.send];
  external paused: t => bool = "" [@@bs.send];
  external defaultPlaybackRate: t => float = "" [@@bs.send];
  external playbackRate: t => float = "" [@@bs.send];
  external played: t => TimeRanges = "" [@@bs.send];
  external seekable: t => TimeRanges = "" [@@bs.send];
  external ended: t => bool = "" [@@bs.send];
  external autoplay: t => bool = "" [@@bs.send];
  external loop: t => bool = "" [@@bs.send];
  external play: t => unit => unit = "" [@@bs.send];
  external pause: t => unit => unit = "" [@@bs.send];
  external fastSeek: t => unit => unit = "" [@@bs.send];
  external mediaGroup: t => string = "" [@@bs.send];
  external controller: t => TODO = "" [@@bs.send];
  external controls: t => bool = "" [@@bs.send];
  external volume: t => float = "" [@@bs.send];
  external muted: t => bool = "" [@@bs.send];
  external defaultMuted: t => bool = "" [@@bs.send];
  external audioTracks: t => AudioTrackList = "" [@@bs.send];
  external videoTracks: t => VideoTrackList = "" [@@bs.send];
  external textTracks: t => TextTrackList = "" [@@bs.send];
  external addTextTrack: t => string => label::(option string) => language::(option string) => TextTrack = "" [@@bs.send];
};
let module HTMLAudioElement = {
  type t;
};
let module HTMLVideoElement = {
  type t;
  external width: t => float = "" [@@bs.send];
  external height: t => float = "" [@@bs.send];
  external videoWidth: t => float = "" [@@bs.send];
  external videoHeight: t => float = "" [@@bs.send];
  external poster: t => string = "" [@@bs.send];
};
let module HTMLSourceElement = {
  type t;
  external src: t => string = "" [@@bs.send];
  external type: t => string = "" [@@bs.send];
  external srcset: t => string = "" [@@bs.send];
  external sizes: t => string = "" [@@bs.send];
  external media: t => string = "" [@@bs.send];
};
let module ValidityState = {
  type t;
  external badInput: t => bool = "" [@@bs.send];
  external customError: t => bool = "" [@@bs.send];
  external patternMismatch: t => bool = "" [@@bs.send];
  external rangeOverflow: t => bool = "" [@@bs.send];
  external rangeUnderflow: t => bool = "" [@@bs.send];
  external stepMismatch: t => bool = "" [@@bs.send];
  external tooLong: t => bool = "" [@@bs.send];
  external typeMismatch: t => bool = "" [@@bs.send];
  external valueMissing: t => bool = "" [@@bs.send];
};
type TODO;
type TODO;
let module HTMLInputElement = {
  type t;
  external accept: t => string = "" [@@bs.send];
  external align: t => string = "" [@@bs.send];
  external alt: t => string = "" [@@bs.send];
  external autocomplete: t => string = "" [@@bs.send];
  external autofocus: t => bool = "" [@@bs.send];
  external border: t => string = "" [@@bs.send];
  external checked: t => bool = "" [@@bs.send];
  external complete: t => bool = "" [@@bs.send];
  external defaultChecked: t => bool = "" [@@bs.send];
  external defaultValue: t => string = "" [@@bs.send];
  external dirname: t => string = "" [@@bs.send];
  external disabled: t => bool = "" [@@bs.send];
  external dynsrc: t => string = "" [@@bs.send];
  external files: t => FileList = "" [@@bs.send];
  external form: t => TODO = "" [@@bs.send];
  external formAction: t => string = "" [@@bs.send];
  external formEncType: t => string = "" [@@bs.send];
  external formMethod: t => string = "" [@@bs.send];
  external formNoValidate: t => bool = "" [@@bs.send];
  external formTarget: t => string = "" [@@bs.send];
  external height: t => string = "" [@@bs.send];
  external hspace: t => float = "" [@@bs.send];
  external indeterminate: t => bool = "" [@@bs.send];
  external labels: t => NodeList = "" [@@bs.send];
  external list: t => TODO = "" [@@bs.send];
  external loop: t => float = "" [@@bs.send];
  external lowsrc: t => string = "" [@@bs.send];
  external max: t => string = "" [@@bs.send];
  external maxLength: t => float = "" [@@bs.send];
  external min: t => string = "" [@@bs.send];
  external multiple: t => bool = "" [@@bs.send];
  external name: t => string = "" [@@bs.send];
  external pattern: t => string = "" [@@bs.send];
  external placeholder: t => string = "" [@@bs.send];
  external readOnly: t => bool = "" [@@bs.send];
  external required: t => bool = "" [@@bs.send];
  external selectionDirection: t => SelectionDirection = "" [@@bs.send];
  external selectionEnd: t => float = "" [@@bs.send];
  external selectionStart: t => float = "" [@@bs.send];
  external size: t => float = "" [@@bs.send];
  external src: t => string = "" [@@bs.send];
  external start: t => string = "" [@@bs.send];
  external status: t => bool = "" [@@bs.send];
  external step: t => string = "" [@@bs.send];
  external tabIndex: t => float = "" [@@bs.send];
  external type: t => string = "" [@@bs.send];
  external useMap: t => string = "" [@@bs.send];
  external validationMessage: t => string = "" [@@bs.send];
  external validity: t => ValidityState = "" [@@bs.send];
  external value: t => string = "" [@@bs.send];
  external valueAsDate: t => Date = "" [@@bs.send];
  external valueAsNumber: t => float = "" [@@bs.send];
  external vrml: t => string = "" [@@bs.send];
  external vspace: t => float = "" [@@bs.send];
  external width: t => string = "" [@@bs.send];
  external willValidate: t => bool = "" [@@bs.send];
  external blur: t => unit => unit = "" [@@bs.send];
  external checkValidity: t => unit => bool = "" [@@bs.send];
  external setCustomValidity: t => string => unit = "" [@@bs.send];
  external click: t => unit => unit = "" [@@bs.send];
  external createTextRange: t => unit => TextRange = "" [@@bs.send];
  external focus: t => unit => unit = "" [@@bs.send];
  external select: t => unit => unit = "" [@@bs.send];
  external setRangeText: t => string => start::(option unit) => end::(option unit) => selectMode::(option unit) => unit = "" [@@bs.send];
  external setRangeText: t => string => float => float => selectMode::(option SelectionMode) => unit = "" [@@bs.send];
  external setSelectionRange: t => float => float => direction::(option SelectionDirection) => unit = "" [@@bs.send];
};
let module HTMLButtonElement = {
  type t;
  external disabled: t => bool = "" [@@bs.send];
  external form: t => TODO = "" [@@bs.send];
  external name: t => string = "" [@@bs.send];
  external type: t => string = "" [@@bs.send];
  external value: t => string = "" [@@bs.send];
  external checkValidity: t => unit => bool = "" [@@bs.send];
};
let module HTMLTextAreaElement = {
  type t;
  external autofocus: t => bool = "" [@@bs.send];
  external cols: t => float = "" [@@bs.send];
  external dirName: t => string = "" [@@bs.send];
  external disabled: t => bool = "" [@@bs.send];
  external form: t => TODO = "" [@@bs.send];
  external maxLength: t => float = "" [@@bs.send];
  external name: t => string = "" [@@bs.send];
  external placeholder: t => string = "" [@@bs.send];
  external readOnly: t => bool = "" [@@bs.send];
  external required: t => bool = "" [@@bs.send];
  external rows: t => float = "" [@@bs.send];
  external wrap: t => string = "" [@@bs.send];
  external type: t => string = "" [@@bs.send];
  external defaultValue: t => string = "" [@@bs.send];
  external value: t => string = "" [@@bs.send];
  external textLength: t => float = "" [@@bs.send];
  external willValidate: t => bool = "" [@@bs.send];
  external validity: t => ValidityState = "" [@@bs.send];
  external validationMessage: t => string = "" [@@bs.send];
  external checkValidity: t => unit => bool = "" [@@bs.send];
  external setCustomValidity: t => string => unit = "" [@@bs.send];
  external labels: t => NodeList = "" [@@bs.send];
  external select: t => unit => unit = "" [@@bs.send];
  external selectionStart: t => float = "" [@@bs.send];
  external selectionEnd: t => float = "" [@@bs.send];
  external selectionDirection: t => SelectionDirection = "" [@@bs.send];
  external setSelectionRange: t => float => float => direction::(option SelectionDirection) => unit = "" [@@bs.send];
};
let module HTMLSelectElement = {
  type t;
  external disabled: t => bool = "" [@@bs.send];
  external form: t => TODO = "" [@@bs.send];
  external length: t => float = "" [@@bs.send];
  external multiple: t => bool = "" [@@bs.send];
  external name: t => string = "" [@@bs.send];
  external options: t => HTMLOptionsCollection = "" [@@bs.send];
  external selectedIndex: t => float = "" [@@bs.send];
  external size: t => float = "" [@@bs.send];
  external type: t => string = "" [@@bs.send];
  external value: t => string = "" [@@bs.send];
  external add: t => HTMLElement => before::(option HTMLElement) => unit = "" [@@bs.send];
  external checkValidity: t => unit => bool = "" [@@bs.send];
  external remove: t => index::(option float) => unit = "" [@@bs.send];
};
let module HTMLOptionsCollection = {
  type t;
  external length: t => float = "" [@@bs.send];
  external item: t => float => Node = "" [@@bs.send];
  external namedItem: t => string => Node = "" [@@bs.send];
};
let module HTMLOptionElement = {
  type t;
  external defaultSelected: t => bool = "" [@@bs.send];
  external disabled: t => bool = "" [@@bs.send];
  external form: t => TODO = "" [@@bs.send];
  external index: t => float = "" [@@bs.send];
  external label: t => string = "" [@@bs.send];
  external selected: t => bool = "" [@@bs.send];
  external text: t => string = "" [@@bs.send];
  external value: t => string = "" [@@bs.send];
};
let module HTMLAnchorElement = {
  type t;
  external charset: t => string = "" [@@bs.send];
  external coords: t => string = "" [@@bs.send];
  external download: t => string = "" [@@bs.send];
  external hash: t => string = "" [@@bs.send];
  external host: t => string = "" [@@bs.send];
  external hostname: t => string = "" [@@bs.send];
  external href: t => string = "" [@@bs.send];
  external hreflang: t => string = "" [@@bs.send];
  external media: t => string = "" [@@bs.send];
  external name: t => string = "" [@@bs.send];
  external origin: t => string = "" [@@bs.send];
  external password: t => string = "" [@@bs.send];
  external pathname: t => string = "" [@@bs.send];
  external port: t => string = "" [@@bs.send];
  external protocol: t => string = "" [@@bs.send];
  external rel: t => string = "" [@@bs.send];
  external rev: t => string = "" [@@bs.send];
  external search: t => string = "" [@@bs.send];
  external shape: t => string = "" [@@bs.send];
  external target: t => string = "" [@@bs.send];
  external text: t => string = "" [@@bs.send];
  external type: t => string = "" [@@bs.send];
  external username: t => string = "" [@@bs.send];
};
let module HTMLLabelElement = {
  type t;
  external form: t => TODO = "" [@@bs.send];
  external htmlFor: t => string = "" [@@bs.send];
  external control: t => TODO = "" [@@bs.send];
};
let module HTMLLinkElement = {
  type t;
  external crossOrigin: t => TODO = "" [@@bs.send];
  external href: t => string = "" [@@bs.send];
  external hreflang: t => string = "" [@@bs.send];
  external media: t => string = "" [@@bs.send];
  external rel: t => string = "" [@@bs.send];
  external sizes: t => DOMTokenList = "" [@@bs.send];
  external type: t => string = "" [@@bs.send];
};
let module HTMLScriptElement = {
  type t;
  external async: t => bool = "" [@@bs.send];
  external charset: t => string = "" [@@bs.send];
  external crossOrigin: t => string = "" [@@bs.send];
  external defer: t => bool = "" [@@bs.send];
  external src: t => string = "" [@@bs.send];
  external text: t => string = "" [@@bs.send];
  external type: t => string = "" [@@bs.send];
};
let module HTMLStyleElement = {
  type t;
  external disabled: t => bool = "" [@@bs.send];
  external media: t => string = "" [@@bs.send];
  external scoped: t => bool = "" [@@bs.send];
  external sheet: t => TODO = "" [@@bs.send];
  external type: t => string = "" [@@bs.send];
};
let module HTMLParagraphElement = {
  type t;
  external align: t => TODO = "" [@@bs.send];
};
let module HTMLDivElement = {
  type t;
};
let module HTMLSpanElement = {
  type t;
};
let module HTMLAppletElement = {
  type t;
};
let module HTMLEmbedElement = {
  type t;
};
let module TextRange = {
  type t;
  external boundingLeft: t => float = "" [@@bs.send];
  external htmlText: t => string = "" [@@bs.send];
  external offsetLeft: t => float = "" [@@bs.send];
  external boundingWidth: t => float = "" [@@bs.send];
  external boundingHeight: t => float = "" [@@bs.send];
  external boundingTop: t => float = "" [@@bs.send];
  external text: t => string = "" [@@bs.send];
  external offsetTop: t => float = "" [@@bs.send];
  external moveToPoint: t => float => float => unit = "" [@@bs.send];
  external queryCommandValue: t => string => 'a = "" [@@bs.send];
  external getBookmark: t => unit => string = "" [@@bs.send];
  external move: t => string => count::(option float) => float = "" [@@bs.send];
  external queryCommandIndeterm: t => string => bool = "" [@@bs.send];
  external scrollIntoView: t => fStart::(option bool) => unit = "" [@@bs.send];
  external findText: t => string => count::(option float) => flags::(option float) => bool = "" [@@bs.send];
  external execCommand: t => string => showUI::(option bool) => value::(option 'a) => bool = "" [@@bs.send];
  external getBoundingClientRect: t => unit => ClientRect = "" [@@bs.send];
  external moveToBookmark: t => string => bool = "" [@@bs.send];
  external isEqual: t => TextRange => bool = "" [@@bs.send];
  external duplicate: t => unit => TextRange = "" [@@bs.send];
  external collapse: t => start::(option bool) => unit = "" [@@bs.send];
  external queryCommandText: t => string => string = "" [@@bs.send];
  external select: t => unit => unit = "" [@@bs.send];
  external pasteHTML: t => string => unit = "" [@@bs.send];
  external inRange: t => TextRange => bool = "" [@@bs.send];
  external moveEnd: t => string => count::(option float) => float = "" [@@bs.send];
  external getClientRects: t => unit => ClientRectList = "" [@@bs.send];
  external moveStart: t => string => count::(option float) => float = "" [@@bs.send];
  external parentElement: t => unit => Element = "" [@@bs.send];
  external queryCommandState: t => string => bool = "" [@@bs.send];
  external compareEndPoints: t => string => TextRange => float = "" [@@bs.send];
  external execCommandShowHelp: t => string => bool = "" [@@bs.send];
  external moveToElementText: t => Element => unit = "" [@@bs.send];
  external expand: t => string => bool = "" [@@bs.send];
  external queryCommandSupported: t => string => bool = "" [@@bs.send];
  external setEndPoint: t => string => TextRange => unit = "" [@@bs.send];
  external queryCommandEnabled: t => string => bool = "" [@@bs.send];
};
let module ClientRect = {
  type t;
  external left: t => float = "" [@@bs.send];
  external width: t => float = "" [@@bs.send];
  external right: t => float = "" [@@bs.send];
  external top: t => float = "" [@@bs.send];
  external bottom: t => float = "" [@@bs.send];
  external height: t => float = "" [@@bs.send];
};
let module ClientRectList = {
  type t;
  external _@@iterator: t => unit => Iterator = "" [@@bs.send];
  external length: t => float = "" [@@bs.send];
  external item: t => float => ClientRect = "" [@@bs.send];
};
let module DOMImplementation = {
  type t;
  external createDocumentType: t => string => string => string => DocumentType = "" [@@bs.send];
  external createDocument: t => string => string => DocumentType => Document = "" [@@bs.send];
  external hasFeature: t => string => version::(option string) => bool = "" [@@bs.send];
  external createHTMLDocument: t => title::(option string) => Document = "" [@@bs.send];
};
let module DocumentType = {
  type t;
  external name: t => string = "" [@@bs.send];
  external notations: t => NamedNodeMap = "" [@@bs.send];
  external systemId: t => string = "" [@@bs.send];
  external internalSubset: t => string = "" [@@bs.send];
  external entities: t => NamedNodeMap = "" [@@bs.send];
  external publicId: t => string = "" [@@bs.send];
};
let module CharacterData = {
  type t;
  external length: t => float = "" [@@bs.send];
  external data: t => string = "" [@@bs.send];
  external deleteData: t => float => float => unit = "" [@@bs.send];
  external replaceData: t => float => float => string => unit = "" [@@bs.send];
  external appendData: t => string => unit = "" [@@bs.send];
  external insertData: t => float => string => unit = "" [@@bs.send];
  external substringData: t => float => float => string = "" [@@bs.send];
};
let module Text = {
  type t;
  external wholeText: t => string = "" [@@bs.send];
  external splitText: t => float => Text = "" [@@bs.send];
  external replaceWholeText: t => string => Text = "" [@@bs.send];
};
let module Comment = {
  type t;
  external text: t => string = "" [@@bs.send];
};
let module URL = {
  type t;
  external createObjectURL: Blob => string = "" [@@bs.val];
  external createObjectURL: MediaSource => string = "" [@@bs.val];
  external createFor: Blob => string = "" [@@bs.val];
  external revokeObjectURL: string => unit = "" [@@bs.val];
  external constructor: t => string => base::(option TODO) => unit = "" [@@bs.send];
  external hash: t => string = "" [@@bs.send];
  external host: t => string = "" [@@bs.send];
  external hostname: t => string = "" [@@bs.send];
  external href: t => string = "" [@@bs.send];
  external origin: t => string = "" [@@bs.send];
  external password: t => string = "" [@@bs.send];
  external pathname: t => string = "" [@@bs.send];
  external port: t => string = "" [@@bs.send];
  external protocol: t => string = "" [@@bs.send];
  external search: t => string = "" [@@bs.send];
  external searchParams: t => URLSearchParams = "" [@@bs.send];
  external username: t => string = "" [@@bs.send];
};
let module MediaSource = {
  type t;
  external sourceBuffers: t => SourceBufferList = "" [@@bs.send];
  external activeSourceBuffers: t => SourceBufferList = "" [@@bs.send];
  external readyState: t => TODO = "" [@@bs.send];
  external duration: t => float = "" [@@bs.send];
  external addSourceBuffer: t => string => SourceBuffer = "" [@@bs.send];
  external removeSourceBuffer: t => SourceBuffer => unit = "" [@@bs.send];
  external endOfStream: t => error::(option string) => unit = "" [@@bs.send];
  external isTypeSupported: string => bool = "" [@@bs.val];
};
let module SourceBuffer = {
  type t;
  external mode: t => TODO = "" [@@bs.send];
  external updating: t => bool = "" [@@bs.send];
  external buffered: t => TimeRanges = "" [@@bs.send];
  external timestampOffset: t => float = "" [@@bs.send];
  external audioTracks: t => AudioTrackList = "" [@@bs.send];
  external videoTracks: t => VideoTrackList = "" [@@bs.send];
  external textTracks: t => TextTrackList = "" [@@bs.send];
  external appendWindowStart: t => float = "" [@@bs.send];
  external appendWindowEnd: t => float = "" [@@bs.send];
  external appendBuffer: t => TODO => unit = "" [@@bs.send];
  external abort: t => unit => unit = "" [@@bs.send];
  external remove: t => float => float => unit = "" [@@bs.send];
  external trackDefaults: t => TrackDefaultList = "" [@@bs.send];
};
let module SourceBufferList = {
  type t;
  external length: t => float = "" [@@bs.send];
};
let module Storage = {
  type t;
  external length: t => float = "" [@@bs.send];
  external getItem: t => string => TODO = "" [@@bs.send];
  external setItem: t => string => string => unit = "" [@@bs.send];
  external clear: t => unit => unit = "" [@@bs.send];
  external removeItem: t => string => unit = "" [@@bs.send];
  external key: t => float => TODO = "" [@@bs.send];
};
let module TrackDefaultList = {
  type t;
  external length: t => float = "" [@@bs.send];
};
let module TrackDefault = {
  type t;
  external type: t => TODO = "" [@@bs.send];
  external byteStreamTrackID: t => string = "" [@@bs.send];
  external language: t => string = "" [@@bs.send];
  external label: t => string = "" [@@bs.send];
  external kinds: t => Array = "" [@@bs.send];
};
type TODO;
type TODO;
let module NodeFilter = {
  type t;
  external _SHOW_ALL: TODO = "" [@@bs.val];
  external _SHOW_ELEMENT: TODO = "" [@@bs.val];
  external _SHOW_ATTRIBUTE: TODO = "" [@@bs.val];
  external _SHOW_TEXT: TODO = "" [@@bs.val];
  external _SHOW_CDATA_SECTION: TODO = "" [@@bs.val];
  external _SHOW_ENTITY_REFERENCE: TODO = "" [@@bs.val];
  external _SHOW_ENTITY: TODO = "" [@@bs.val];
  external _SHOW_PROCESSING_INSTRUCTION: TODO = "" [@@bs.val];
  external _SHOW_COMMENT: TODO = "" [@@bs.val];
  external _SHOW_DOCUMENT: TODO = "" [@@bs.val];
  external _SHOW_DOCUMENT_TYPE: TODO = "" [@@bs.val];
  external _SHOW_DOCUMENT_FRAGMENT: TODO = "" [@@bs.val];
  external _SHOW_NOTATION: TODO = "" [@@bs.val];
  external _FILTER_ACCEPT: TODO = "" [@@bs.val];
  external _FILTER_REJECT: TODO = "" [@@bs.val];
  external _FILTER_SKIP: TODO = "" [@@bs.val];
  external acceptNode: t => NodeFilterCallback = "" [@@bs.send];
};
let module NodeIterator = {
  type t;
  external root: t => RootNodeT = "" [@@bs.send];
  external whatToShow: t => float = "" [@@bs.send];
  external filter: t => NodeFilter = "" [@@bs.send];
  external expandEntityReferences: t => bool = "" [@@bs.send];
  external referenceNode: t => TODO = "" [@@bs.send];
  external pointerBeforeReferenceNode: t => bool = "" [@@bs.send];
  external detach: t => unit => unit = "" [@@bs.send];
  external previousNode: t => unit => TODO = "" [@@bs.send];
  external nextNode: t => unit => TODO = "" [@@bs.send];
};
let module TreeWalker = {
  type t;
  external root: t => RootNodeT = "" [@@bs.send];
  external whatToShow: t => float = "" [@@bs.send];
  external filter: t => NodeFilter = "" [@@bs.send];
  external expandEntityReferences: t => bool = "" [@@bs.send];
  external currentNode: t => TODO = "" [@@bs.send];
  external parentNode: t => unit => TODO = "" [@@bs.send];
  external firstChild: t => unit => TODO = "" [@@bs.send];
  external lastChild: t => unit => TODO = "" [@@bs.send];
  external previousSibling: t => unit => TODO = "" [@@bs.send];
  external nextSibling: t => unit => TODO = "" [@@bs.send];
  external previousNode: t => unit => TODO = "" [@@bs.send];
  external nextNode: t => unit => TODO = "" [@@bs.send];
};
type TODO;
external alert: message::(option 'a) => unit = "alert" [@@bs.val];
external prompt: message::(option 'a) => value::(option 'a) => string = "prompt" [@@bs.val];
external close: unit => unit = "close" [@@bs.val];
external confirm: message::(option string) => bool = "confirm" [@@bs.val];
let module EventInstance = {
  external constructor: string => eventInitDict::(option Event$Init) => unit = "event.constructor" [@@bs.val];
  external bubbles: bool = "event.bubbles" [@@bs.val];
  external cancelable: bool = "event.cancelable" [@@bs.val];
  external currentTarget: EventTarget = "event.currentTarget" [@@bs.val];
  external defaultPrevented: bool = "event.defaultPrevented" [@@bs.val];
  external eventPhase: float = "event.eventPhase" [@@bs.val];
  external isTrusted: bool = "event.isTrusted" [@@bs.val];
  external srcElement: Element = "event.srcElement" [@@bs.val];
  external target: EventTarget = "event.target" [@@bs.val];
  external timeStamp: float = "event.timeStamp" [@@bs.val];
  external type: string = "event.type" [@@bs.val];
  external preventDefault: unit => unit = "event.preventDefault" [@@bs.val];
  external stopImmediatePropagation: unit => unit = "event.stopImmediatePropagation" [@@bs.val];
  external stopPropagation: unit => unit = "event.stopPropagation" [@@bs.val];
  external _AT_TARGET: float = "event.AT_TARGET" [@@bs.val];
  external _BUBBLING_PHASE: float = "event.BUBBLING_PHASE" [@@bs.val];
  external _CAPTURING_PHASE: float = "event.CAPTURING_PHASE" [@@bs.val];
  external initEvent: string => bool => bool => unit = "event.initEvent" [@@bs.val];
};
external getComputedStyle: Element => pseudoElt::(option string) => 'a = "getComputedStyle" [@@bs.val];
external requestAnimationFrame: float => unit => float = "requestAnimationFrame" [@@bs.val];
external cancelAnimationFrame: float => unit = "cancelAnimationFrame" [@@bs.val];
let module LocalStorageInstance = {
  external length: float = "localStorage.length" [@@bs.val];
  external getItem: string => TODO = "localStorage.getItem" [@@bs.val];
  external setItem: string => string => unit = "localStorage.setItem" [@@bs.val];
  external clear: unit => unit = "localStorage.clear" [@@bs.val];
  external removeItem: string => unit = "localStorage.removeItem" [@@bs.val];
  external key: float => TODO = "localStorage.key" [@@bs.val];
};
external focus: unit => unit = "focus" [@@bs.val];
external onfocus: Event => 'a = "onfocus" [@@bs.val];
external onmessage: MessageEvent => 'a = "onmessage" [@@bs.val];
external open: url::(option string) => target::(option string) => features::(option string) => replace::(option bool) => 'a = "open" [@@bs.val];
external parent: WindowProxy = "parent" [@@bs.val];
external print: unit => unit = "print" [@@bs.val];
external self: 'a = "self" [@@bs.val];
let module SessionStorageInstance = {
  external length: float = "sessionStorage.length" [@@bs.val];
  external getItem: string => TODO = "sessionStorage.getItem" [@@bs.val];
  external setItem: string => string => unit = "sessionStorage.setItem" [@@bs.val];
  external clear: unit => unit = "sessionStorage.clear" [@@bs.val];
  external removeItem: string => unit = "sessionStorage.removeItem" [@@bs.val];
  external key: float => TODO = "sessionStorage.key" [@@bs.val];
};
external status: string = "status" [@@bs.val];
external top: WindowProxy = "top" [@@bs.val];
external getSelection: unit => TODO = "getSelection" [@@bs.val];
