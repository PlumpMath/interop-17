let module Blob = {
  type t;
  external create: unit => t = "Blob" [@@bs.new]; 
  external constructor: t => (blobParts::(option array TODO) => options::(option TODO) => unit) = "" [@@bs.send];
  external isClosed: t => bool = "" [@@bs.get];
  external size: t => float = "" [@@bs.get];
  external _type: t => string = "" [@@bs.get];
  external close: t => (unit => unit) = "" [@@bs.send];
  external slice: t => (start::(option float) => end::(option float) => contentType::(option string) => Blob.t) = "" [@@bs.send];
};
let module FileReader = {
  type t;
  external create: unit => t = "FileReader" [@@bs.new]; 
  external abort: t => (unit => unit) = "" [@@bs.send];
  external _DONE: t => float = "" [@@bs.get];
  external _EMPTY: t => float = "" [@@bs.get];
  external error: t => DOMError.t = "" [@@bs.get];
  external _LOADING: t => float = "" [@@bs.get];
  external onabort: t => ('a => 'a) = "" [@@bs.get];
  external onerror: t => ('a => 'a) = "" [@@bs.get];
  external onload: t => ('a => 'a) = "" [@@bs.get];
  external onloadend: t => ('a => 'a) = "" [@@bs.get];
  external onloadstart: t => ('a => 'a) = "" [@@bs.get];
  external onprogress: t => ('a => 'a) = "" [@@bs.get];
  external readAsArrayBuffer: t => (Blob.t => unit) = "" [@@bs.send];
  external readAsDataURL: t => (Blob.t => unit) = "" [@@bs.send];
  external readAsText: t => (Blob.t => encoding::(option string) => unit) = "" [@@bs.send];
  external readyState: t => TODO = "" [@@bs.get];
  external result: t => 'a = "" [@@bs.get];
};
let module File = {
  type t;
  external create: unit => t = "File" [@@bs.new]; 
  external lastModifiedDate: t => 'a = "" [@@bs.get];
  external name: t => string = "" [@@bs.get];
};
let module FileList = {
  type t;
  external create: unit => t = "FileList" [@@bs.new]; 
  external _@@iterator: t => (unit => Iterator.t) = "" [@@bs.send];
  external length: t => float = "" [@@bs.get];
  external item: t => (float => File.t) = "" [@@bs.send];
};
let module DataTransfer = {
  type t;
  external create: unit => t = "DataTransfer" [@@bs.new]; 
  external clearData: t => (format::(option string) => unit) = "" [@@bs.send];
  external getData: t => (string => string) = "" [@@bs.send];
  external setData: t => (string => string => unit) = "" [@@bs.send];
  external setDragImage: t => (Element.t => float => float => unit) = "" [@@bs.send];
  external dropEffect: t => string = "" [@@bs.get];
  external effectAllowed: t => string = "" [@@bs.get];
  external files: t => FileList.t = "" [@@bs.get];
  external items: t => DataTransferItemList.t = "" [@@bs.get];
  external types: t => array string = "" [@@bs.get];
};
let module DataTransferItemList = {
  type t;
  external create: unit => t = "DataTransferItemList" [@@bs.new]; 
  external length: t => float = "" [@@bs.get];
  external add: t => (string => string => TODO) = "" [@@bs.send];
  external add: t => (File.t => TODO) = "" [@@bs.send];
  external remove: t => (float => unit) = "" [@@bs.send];
  external clear: t => (unit => unit) = "" [@@bs.send];
};
let module DataTransferItem = {
  type t;
  external create: unit => t = "DataTransferItem" [@@bs.new]; 
  external kind: t => string = "" [@@bs.get];
  external _type: t => string = "" [@@bs.get];
  external getAsString: t => (TODO => unit) = "" [@@bs.send];
  external getAsFile: t => (unit => TODO) = "" [@@bs.send];
};
let module DOMError = {
  type t;
  external create: unit => t = "DOMError" [@@bs.new]; 
  external name: t => string = "" [@@bs.get];
};
type TODO;
type TODO;
type TODO;
type TODO;
type TODO;
type TODO;
type TODO;
type TODO;
let module EventTarget = {
  type t;
  external create: unit => t = "EventTarget" [@@bs.new]; 
  external addEventListener: t => (MouseEventTypes.t => MouseEventListener.t => useCapture::(option bool) => unit) = "" [@@bs.send];
  external addEventListener: t => (KeyboardEventTypes.t => KeyboardEventListener.t => useCapture::(option bool) => unit) = "" [@@bs.send];
  external addEventListener: t => (string => EventListener.t => useCapture::(option bool) => unit) = "" [@@bs.send];
  external removeEventListener: t => (MouseEventTypes.t => MouseEventListener.t => useCapture::(option bool) => unit) = "" [@@bs.send];
  external removeEventListener: t => (KeyboardEventTypes.t => KeyboardEventListener.t => useCapture::(option bool) => unit) = "" [@@bs.send];
  external removeEventListener: t => (string => EventListener.t => useCapture::(option bool) => unit) = "" [@@bs.send];
  external attachEvent: t => (MouseEventTypes.t => MouseEventListener.t => unit) = "" [@@bs.get];
  external attachEvent: t => (KeyboardEventTypes.t => KeyboardEventListener.t => unit) = "" [@@bs.get];
  external attachEvent: t => (string => EventListener.t => unit) = "" [@@bs.get];
  external detachEvent: t => (MouseEventTypes.t => MouseEventListener.t => unit) = "" [@@bs.get];
  external detachEvent: t => (KeyboardEventTypes.t => KeyboardEventListener.t => unit) = "" [@@bs.get];
  external detachEvent: t => (string => EventListener.t => unit) = "" [@@bs.get];
  external dispatchEvent: t => (Event.t => bool) = "" [@@bs.send];
  external cancelBubble: t => bool = "" [@@bs.get];
  external initEvent: t => (string => bool => bool => unit) = "" [@@bs.send];
};
type TODO;
let module Event = {
  type t;
  external create: unit => t = "Event" [@@bs.new]; 
  external constructor: t => (string => eventInitDict::(option Event$Init.t) => unit) = "" [@@bs.send];
  external bubbles: t => bool = "" [@@bs.get];
  external cancelable: t => bool = "" [@@bs.get];
  external currentTarget: t => EventTarget.t = "" [@@bs.get];
  external defaultPrevented: t => bool = "" [@@bs.get];
  external eventPhase: t => float = "" [@@bs.get];
  external isTrusted: t => bool = "" [@@bs.get];
  external srcElement: t => Element.t = "" [@@bs.get];
  external target: t => EventTarget.t = "" [@@bs.get];
  external timeStamp: t => float = "" [@@bs.get];
  external _type: t => string = "" [@@bs.get];
  external preventDefault: t => (unit => unit) = "" [@@bs.send];
  external stopImmediatePropagation: t => (unit => unit) = "" [@@bs.send];
  external stopPropagation: t => (unit => unit) = "" [@@bs.send];
  external _AT_TARGET: t => float = "" [@@bs.get];
  external _BUBBLING_PHASE: t => float = "" [@@bs.get];
  external _CAPTURING_PHASE: t => float = "" [@@bs.get];
  external initEvent: t => (string => bool => bool => unit) = "" [@@bs.send];
};
type TODO;
let module CustomEvent = {
  type t;
  external create: unit => t = "CustomEvent" [@@bs.new]; 
  external constructor: t => (string => eventInitDict::(option CustomEvent$Init.t) => unit) = "" [@@bs.send];
  external detail: t => 'a = "" [@@bs.get];
  external initCustomEvent: t => (string => bool => bool => 'a => CustomEvent.t) = "" [@@bs.send];
};
let module UIEvent = {
  type t;
  external create: unit => t = "UIEvent" [@@bs.new]; 
  external detail: t => float = "" [@@bs.get];
  external view: t => 'a = "" [@@bs.get];
};
let module MouseEvent = {
  type t;
  external create: unit => t = "MouseEvent" [@@bs.new]; 
  external altKey: t => bool = "" [@@bs.get];
  external button: t => float = "" [@@bs.get];
  external buttons: t => float = "" [@@bs.get];
  external clientX: t => float = "" [@@bs.get];
  external clientY: t => float = "" [@@bs.get];
  external ctrlKey: t => bool = "" [@@bs.get];
  external metaKey: t => bool = "" [@@bs.get];
  external movementX: t => float = "" [@@bs.get];
  external movementY: t => float = "" [@@bs.get];
  external offsetX: t => float = "" [@@bs.get];
  external offsetY: t => float = "" [@@bs.get];
  external pageX: t => float = "" [@@bs.get];
  external pageY: t => float = "" [@@bs.get];
  external region: t => TODO = "" [@@bs.get];
  external screenX: t => float = "" [@@bs.get];
  external screenY: t => float = "" [@@bs.get];
  external shiftKey: t => bool = "" [@@bs.get];
  external relatedTarget: t => TODO = "" [@@bs.get];
  external getModifierState: t => (string => bool) = "" [@@bs.send];
};
let module WheelEvent = {
  type t;
  external create: unit => t = "WheelEvent" [@@bs.new]; 
  external deltaX: t => float = "" [@@bs.get];
  external deltaY: t => float = "" [@@bs.get];
  external deltaZ: t => float = "" [@@bs.get];
  external deltaMode: t => TODO = "" [@@bs.get];
};
let module DragEvent = {
  type t;
  external create: unit => t = "DragEvent" [@@bs.new]; 
  external dataTransfer: t => TODO = "" [@@bs.get];
};
let module ProgressEvent = {
  type t;
  external create: unit => t = "ProgressEvent" [@@bs.new]; 
  external lengthComputable: t => bool = "" [@@bs.get];
  external loaded: t => float = "" [@@bs.get];
  external total: t => float = "" [@@bs.get];
  external initProgressEvent: t => (string => bool => bool => bool => float => float => unit) = "" [@@bs.send];
};
let module PromiseRejectionEvent = {
  type t;
  external create: unit => t = "PromiseRejectionEvent" [@@bs.new]; 
  external promise: t => Promise.t = "" [@@bs.get];
  external reason: t => 'a = "" [@@bs.get];
};
let module MessageEvent = {
  type t;
  external create: unit => t = "MessageEvent" [@@bs.new]; 
  external data: t => TODO = "" [@@bs.get];
  external origin: t => string = "" [@@bs.get];
  external lastEventId: t => string = "" [@@bs.get];
  external source: t => WindowProxy.t = "" [@@bs.get];
};
let module KeyboardEvent = {
  type t;
  external create: unit => t = "KeyboardEvent" [@@bs.new]; 
  external altKey: t => bool = "" [@@bs.get];
  external code: t => string = "" [@@bs.get];
  external ctrlKey: t => bool = "" [@@bs.get];
  external isComposing: t => bool = "" [@@bs.get];
  external key: t => string = "" [@@bs.get];
  external location: t => float = "" [@@bs.get];
  external metaKey: t => bool = "" [@@bs.get];
  external repeat: t => bool = "" [@@bs.get];
  external shiftKey: t => bool = "" [@@bs.get];
  external getModifierState: t => (keyArg::(option string) => bool) = "" [@@bs.send];
  external charCode: t => float = "" [@@bs.get];
  external keyCode: t => float = "" [@@bs.get];
  external which: t => float = "" [@@bs.get];
};
let module Touch = {
  type t;
  external create: unit => t = "Touch" [@@bs.new]; 
  external clientX: t => float = "" [@@bs.get];
  external clientY: t => float = "" [@@bs.get];
  external identifier: t => float = "" [@@bs.get];
  external pageX: t => float = "" [@@bs.get];
  external pageY: t => float = "" [@@bs.get];
  external screenX: t => float = "" [@@bs.get];
  external screenY: t => float = "" [@@bs.get];
  external target: t => EventTarget.t = "" [@@bs.get];
};
let module TouchList = {
  type t;
  external create: unit => t = "TouchList" [@@bs.new]; 
  external length: t => float = "" [@@bs.get];
  external item: t => (float => TODO) = "" [@@bs.send];
};
let module TouchEvent = {
  type t;
  external create: unit => t = "TouchEvent" [@@bs.new]; 
  external altKey: t => bool = "" [@@bs.get];
  external changedTouches: t => TouchList.t = "" [@@bs.get];
  external ctrlKey: t => bool = "" [@@bs.get];
  external metaKey: t => bool = "" [@@bs.get];
  external shiftKey: t => bool = "" [@@bs.get];
  external targetTouchesRead: t => TouchList.t = "" [@@bs.get];
  external touches: t => TouchList.t = "" [@@bs.get];
};
let module Node = {
  type t;
  external create: unit => t = "Node" [@@bs.new]; 
  external baseURI: t => TODO = "" [@@bs.get];
  external childNodes: t => NodeList.t = "" [@@bs.get];
  external firstChild: t => TODO = "" [@@bs.get];
  external lastChild: t => TODO = "" [@@bs.get];
  external nextSibling: t => TODO = "" [@@bs.get];
  external nodeName: t => string = "" [@@bs.get];
  external nodeType: t => float = "" [@@bs.get];
  external nodeValue: t => string = "" [@@bs.get];
  external ownerDocument: t => Document.t = "" [@@bs.get];
  external parentElement: t => TODO = "" [@@bs.get];
  external parentNode: t => TODO = "" [@@bs.get];
  external previousSibling: t => TODO = "" [@@bs.get];
  external rootNode: t => Node.t = "" [@@bs.get];
  external textContent: t => string = "" [@@bs.get];
  external appendChild: t => (Node.t => Node.t) = "" [@@bs.send];
  external cloneNode: t => (deep::(option bool) => this.t) = "" [@@bs.send];
  external compareDocumentPosition: t => (Node.t => float) = "" [@@bs.send];
  external contains: t => (TODO => bool) = "" [@@bs.send];
  external hasChildNodes: t => (unit => bool) = "" [@@bs.send];
  external insertBefore: t => (Node.t => refChild::(option TODO) => Node.t) = "" [@@bs.send];
  external isDefaultNamespace: t => (string => bool) = "" [@@bs.send];
  external isEqualNode: t => (Node.t => bool) = "" [@@bs.send];
  external isSameNode: t => (Node.t => bool) = "" [@@bs.send];
  external lookupNamespaceURI: t => (string => string) = "" [@@bs.send];
  external lookupPrefix: t => (string => string) = "" [@@bs.send];
  external normalize: t => (unit => unit) = "" [@@bs.send];
  external removeChild: t => (Node.t => Node.t) = "" [@@bs.send];
  external replaceChild: t => (Node.t => Node.t => Node.t) = "" [@@bs.send];
  external _ATTRIBUTE_NODE: float = "" [@@bs.val];
  external _CDATA_SECTION_NODE: float = "" [@@bs.val];
  external _COMMENT_NODE: float = "" [@@bs.val];
  external _DOCUMENT_FRAGMENT_NODE: float = "" [@@bs.val];
  external _DOCUMENT_NODE: float = "" [@@bs.val];
  external _DOCUMENT_POSITION_CONTAINED_BY: float = "" [@@bs.val];
  external _DOCUMENT_POSITION_CONTAINS: float = "" [@@bs.val];
  external _DOCUMENT_POSITION_DISCONNECTED: float = "" [@@bs.val];
  external _DOCUMENT_POSITION_FOLLOWING: float = "" [@@bs.val];
  external _DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: float = "" [@@bs.val];
  external _DOCUMENT_POSITION_PRECEDING: float = "" [@@bs.val];
  external _DOCUMENT_TYPE_NODE: float = "" [@@bs.val];
  external _ELEMENT_NODE: float = "" [@@bs.val];
  external _ENTITY_NODE: float = "" [@@bs.val];
  external _ENTITY_REFERENCE_NODE: float = "" [@@bs.val];
  external _NOTATION_NODE: float = "" [@@bs.val];
  external _PROCESSING_INSTRUCTION_NODE: float = "" [@@bs.val];
  external _TEXT_NODE: float = "" [@@bs.val];
  external innerText: t => string = "" [@@bs.get];
  external outerText: t => string = "" [@@bs.get];
};
let module NodeList = {
  type t;
  external create: unit => t = "NodeList" [@@bs.new]; 
  external _@@iterator: t => (unit => Iterator.t) = "" [@@bs.send];
  external length: t => float = "" [@@bs.get];
  external item: t => (float => T.t) = "" [@@bs.send];
};
let module NamedNodeMap = {
  type t;
  external create: unit => t = "NamedNodeMap" [@@bs.new]; 
  external length: t => float = "" [@@bs.get];
  external removeNamedItemNS: t => (string => string => Attr.t) = "" [@@bs.send];
  external item: t => (float => Attr.t) = "" [@@bs.send];
  external removeNamedItem: t => (string => Attr.t) = "" [@@bs.send];
  external getNamedItem: t => (string => Attr.t) = "" [@@bs.send];
  external setNamedItem: t => (Attr.t => Attr.t) = "" [@@bs.send];
  external getNamedItemNS: t => (string => string => Attr.t) = "" [@@bs.send];
  external setNamedItemNS: t => (Attr.t => Attr.t) = "" [@@bs.send];
};
let module Attr = {
  type t;
  external create: unit => t = "Attr" [@@bs.new]; 
  external isId: t => bool = "" [@@bs.get];
  external specified: t => bool = "" [@@bs.get];
  external ownerElement: t => Element.t = "" [@@bs.get];
  external value: t => string = "" [@@bs.get];
  external name: t => string = "" [@@bs.get];
};
let module HTMLCollection = {
  type t;
  external create: unit => t = "HTMLCollection" [@@bs.new]; 
  external _@@iterator: t => (unit => Iterator.t) = "" [@@bs.send];
  external length: t => float = "" [@@bs.get];
  external item: t => (nameOrIndex::(option 'a) => optionalIndex::(option 'a) => Elem.t) = "" [@@bs.send];
  external namedItem: t => (string => Elem.t) = "" [@@bs.send];
};
type TODO;
let module Document = {
  type t;
  external create: unit => t = "Document" [@@bs.new]; 
  external _URL: t => string = "" [@@bs.get];
  external adoptNode: t => (Node.t => Node.t) = "" [@@bs.send];
  external anchors: t => HTMLCollection.t = "" [@@bs.get];
  external applets: t => HTMLCollection.t = "" [@@bs.get];
  external body: t => HTMLElement.t = "" [@@bs.get];
  external characterSet: t => string = "" [@@bs.get];
  external close: t => (unit => unit) = "" [@@bs.send];
  external cookie: t => string = "" [@@bs.get];
  external createAttribute: t => (string => Attr.t) = "" [@@bs.send];
  external createAttributeNS: t => (string => string => Attr.t) = "" [@@bs.send];
  external createCDATASection: t => (string => Text.t) = "" [@@bs.send];
  external createComment: t => (string => Comment.t) = "" [@@bs.send];
  external createDocumentFragment: t => (unit => DocumentFragment.t) = "" [@@bs.send];
  external createElement: t => ("a" => HTMLAnchorElement.t) = "" [@@bs.send];
  external createElement: t => ("audio" => HTMLAudioElement.t) = "" [@@bs.send];
  external createElement: t => ("button" => HTMLButtonElement.t) = "" [@@bs.send];
  external createElement: t => ("canvas" => HTMLCanvasElement.t) = "" [@@bs.send];
  external createElement: t => ("div" => HTMLDivElement.t) = "" [@@bs.send];
  external createElement: t => ("form" => HTMLFormElement.t) = "" [@@bs.send];
  external createElement: t => ("iframe" => HTMLIFrameElement.t) = "" [@@bs.send];
  external createElement: t => ("img" => HTMLImageElement.t) = "" [@@bs.send];
  external createElement: t => ("input" => HTMLInputElement.t) = "" [@@bs.send];
  external createElement: t => ("label" => HTMLLabelElement.t) = "" [@@bs.send];
  external createElement: t => ("link" => HTMLLinkElement.t) = "" [@@bs.send];
  external createElement: t => ("media" => HTMLMediaElement.t) = "" [@@bs.send];
  external createElement: t => ("option" => HTMLOptionElement.t) = "" [@@bs.send];
  external createElement: t => ("p" => HTMLParagraphElement.t) = "" [@@bs.send];
  external createElement: t => ("script" => HTMLScriptElement.t) = "" [@@bs.send];
  external createElement: t => ("select" => HTMLSelectElement.t) = "" [@@bs.send];
  external createElement: t => ("source" => HTMLSourceElement.t) = "" [@@bs.send];
  external createElement: t => ("span" => HTMLSpanElement.t) = "" [@@bs.send];
  external createElement: t => ("style" => HTMLStyleElement.t) = "" [@@bs.send];
  external createElement: t => ("textarea" => HTMLTextAreaElement.t) = "" [@@bs.send];
  external createElement: t => ("video" => HTMLVideoElement.t) = "" [@@bs.send];
  external createElement: t => ("tr" => HTMLTableRowElement.t) = "" [@@bs.send];
  external createElement: t => (TODO => HTMLTableCellElement.t) = "" [@@bs.send];
  external createElement: t => (string => HTMLElement.t) = "" [@@bs.send];
  external createElementNS: t => (string => string => Element.t) = "" [@@bs.send];
  external createTextNode: t => (string => Text.t) = "" [@@bs.send];
  external currentScript: t => TODO = "" [@@bs.get];
  external doctype: t => DocumentType.t = "" [@@bs.get];
  external documentElement: t => HTMLElement.t = "" [@@bs.get];
  external documentMode: t => float = "" [@@bs.get];
  external domain: t => TODO = "" [@@bs.get];
  external embeds: t => HTMLCollection.t = "" [@@bs.get];
  external execCommand: t => (string => showUI::(option bool) => value::(option 'a) => bool) = "" [@@bs.send];
  external forms: t => HTMLCollection.t = "" [@@bs.get];
  external getElementById: t => (string => HTMLElement.t) = "" [@@bs.send];
  external getElementsByClassName: t => (string => HTMLCollection.t) = "" [@@bs.send];
  external getElementsByName: t => (string => HTMLCollection.t) = "" [@@bs.send];
  external getElementsByTagName: t => ("a" => HTMLCollection.t) = "" [@@bs.send];
  external getElementsByTagName: t => ("audio" => HTMLCollection.t) = "" [@@bs.send];
  external getElementsByTagName: t => ("button" => HTMLCollection.t) = "" [@@bs.send];
  external getElementsByTagName: t => ("canvas" => HTMLCollection.t) = "" [@@bs.send];
  external getElementsByTagName: t => ("div" => HTMLCollection.t) = "" [@@bs.send];
  external getElementsByTagName: t => ("form" => HTMLCollection.t) = "" [@@bs.send];
  external getElementsByTagName: t => ("iframe" => HTMLCollection.t) = "" [@@bs.send];
  external getElementsByTagName: t => ("img" => HTMLCollection.t) = "" [@@bs.send];
  external getElementsByTagName: t => ("input" => HTMLCollection.t) = "" [@@bs.send];
  external getElementsByTagName: t => ("label" => HTMLCollection.t) = "" [@@bs.send];
  external getElementsByTagName: t => ("link" => HTMLCollection.t) = "" [@@bs.send];
  external getElementsByTagName: t => ("media" => HTMLCollection.t) = "" [@@bs.send];
  external getElementsByTagName: t => ("option" => HTMLCollection.t) = "" [@@bs.send];
  external getElementsByTagName: t => ("p" => HTMLCollection.t) = "" [@@bs.send];
  external getElementsByTagName: t => ("script" => HTMLCollection.t) = "" [@@bs.send];
  external getElementsByTagName: t => ("select" => HTMLCollection.t) = "" [@@bs.send];
  external getElementsByTagName: t => ("source" => HTMLCollection.t) = "" [@@bs.send];
  external getElementsByTagName: t => ("span" => HTMLCollection.t) = "" [@@bs.send];
  external getElementsByTagName: t => ("style" => HTMLCollection.t) = "" [@@bs.send];
  external getElementsByTagName: t => ("textarea" => HTMLCollection.t) = "" [@@bs.send];
  external getElementsByTagName: t => ("video" => HTMLCollection.t) = "" [@@bs.send];
  external getElementsByTagName: t => ("tr" => HTMLCollection.t) = "" [@@bs.send];
  external getElementsByTagName: t => (TODO => HTMLCollection.t) = "" [@@bs.send];
  external getElementsByTagName: t => (string => HTMLCollection.t) = "" [@@bs.send];
  external getElementsByTagNameNS: t => (string => "a" => HTMLCollection.t) = "" [@@bs.send];
  external getElementsByTagNameNS: t => (string => "audio" => HTMLCollection.t) = "" [@@bs.send];
  external getElementsByTagNameNS: t => (string => "button" => HTMLCollection.t) = "" [@@bs.send];
  external getElementsByTagNameNS: t => (string => "canvas" => HTMLCollection.t) = "" [@@bs.send];
  external getElementsByTagNameNS: t => (string => "div" => HTMLCollection.t) = "" [@@bs.send];
  external getElementsByTagNameNS: t => (string => "form" => HTMLCollection.t) = "" [@@bs.send];
  external getElementsByTagNameNS: t => (string => "iframe" => HTMLCollection.t) = "" [@@bs.send];
  external getElementsByTagNameNS: t => (string => "img" => HTMLCollection.t) = "" [@@bs.send];
  external getElementsByTagNameNS: t => (string => "input" => HTMLCollection.t) = "" [@@bs.send];
  external getElementsByTagNameNS: t => (string => "label" => HTMLCollection.t) = "" [@@bs.send];
  external getElementsByTagNameNS: t => (string => "link" => HTMLCollection.t) = "" [@@bs.send];
  external getElementsByTagNameNS: t => (string => "media" => HTMLCollection.t) = "" [@@bs.send];
  external getElementsByTagNameNS: t => (string => "option" => HTMLCollection.t) = "" [@@bs.send];
  external getElementsByTagNameNS: t => (string => "p" => HTMLCollection.t) = "" [@@bs.send];
  external getElementsByTagNameNS: t => (string => "script" => HTMLCollection.t) = "" [@@bs.send];
  external getElementsByTagNameNS: t => (string => "select" => HTMLCollection.t) = "" [@@bs.send];
  external getElementsByTagNameNS: t => (string => "source" => HTMLCollection.t) = "" [@@bs.send];
  external getElementsByTagNameNS: t => (string => "span" => HTMLCollection.t) = "" [@@bs.send];
  external getElementsByTagNameNS: t => (string => "style" => HTMLCollection.t) = "" [@@bs.send];
  external getElementsByTagNameNS: t => (string => "textarea" => HTMLCollection.t) = "" [@@bs.send];
  external getElementsByTagNameNS: t => (string => "video" => HTMLCollection.t) = "" [@@bs.send];
  external getElementsByTagNameNS: t => (string => "tr" => HTMLCollection.t) = "" [@@bs.send];
  external getElementsByTagNameNS: t => (string => TODO => HTMLCollection.t) = "" [@@bs.send];
  external getElementsByTagNameNS: t => (string => string => HTMLCollection.t) = "" [@@bs.send];
  external head: t => HTMLElement.t = "" [@@bs.get];
  external images: t => HTMLCollection.t = "" [@@bs.get];
  external implementation: t => DOMImplementation.t = "" [@@bs.get];
  external importNode: t => (Node.t => bool => Node.t) = "" [@@bs.send];
  external inputEncoding: t => string = "" [@@bs.get];
  external lastModified: t => string = "" [@@bs.get];
  external links: t => HTMLCollection.t = "" [@@bs.get];
  external media: t => string = "" [@@bs.get];
  external open: t => (url::(option string) => name::(option string) => features::(option string) => replace::(option bool) => 'a) = "" [@@bs.send];
  external readyState: t => string = "" [@@bs.get];
  external referrer: t => string = "" [@@bs.get];
  external scripts: t => HTMLCollection.t = "" [@@bs.get];
  external styleSheets: t => StyleSheetList.t = "" [@@bs.get];
  external title: t => string = "" [@@bs.get];
  external write: t => (array 'rest => unit) = "" [@@bs.send] [@@bs.splice];
  external writeln: t => (array 'rest => unit) = "" [@@bs.send] [@@bs.splice];
  external xmlEncoding: t => string = "" [@@bs.get];
  external xmlStandalone: t => bool = "" [@@bs.get];
  external xmlVersion: t => string = "" [@@bs.get];
  external registerElement: t => (string => options::(option ElementRegistrationOptions.t) => 'a) = "" [@@bs.send];
  external getSelection: t => (unit => TODO) = "" [@@bs.send];
  external activeElement: t => HTMLElement.t = "" [@@bs.get];
  external hasFocus: t => (unit => bool) = "" [@@bs.send];
  external location: t => Location.t = "" [@@bs.get];
  external createEvent: t => ("CustomEvent" => CustomEvent.t) = "" [@@bs.send];
  external createEvent: t => (string => Event.t) = "" [@@bs.send];
  external createRange: t => (unit => Range.t) = "" [@@bs.send];
  external elementFromPoint: t => (float => float => HTMLElement.t) = "" [@@bs.send];
  external defaultView: t => 'a = "" [@@bs.get];
  external compatMode: t => TODO = "" [@@bs.get];
  external hidden: t => bool = "" [@@bs.get];
  external childElementCount: t => float = "" [@@bs.get];
  external children: t => HTMLCollection.t = "" [@@bs.get];
  external firstElementChild: t => TODO = "" [@@bs.get];
  external lastElementChild: t => TODO = "" [@@bs.get];
  external querySelector: t => (string => HTMLElement.t) = "" [@@bs.send];
  external querySelectorAll: t => (string => NodeList.t) = "" [@@bs.send];
  external createNodeIterator: t => (RootNodeT.t => 2. => filter::(option NodeFilterInterface.t) => NodeIterator.t) = "" [@@bs.send];
  external createTreeWalker: t => (RootNodeT.t => 2. => filter::(option NodeFilterInterface.t) => entityReferenceExpansion::(option bool) => TreeWalker.t) = "" [@@bs.send];
  external createNodeIterator: t => (RootNodeT.t => 256. => filter::(option NodeFilterInterface.t) => NodeIterator.t) = "" [@@bs.send];
  external createNodeIterator: t => (RootNodeT.t => 257. => filter::(option NodeFilterInterface.t) => NodeIterator.t) = "" [@@bs.send];
  external createNodeIterator: t => (RootNodeT.t => 260. => filter::(option NodeFilterInterface.t) => NodeIterator.t) = "" [@@bs.send];
  external createNodeIterator: t => (RootNodeT.t => 261. => filter::(option NodeFilterInterface.t) => NodeIterator.t) = "" [@@bs.send];
  external createNodeIterator: t => (RootNodeT.t => 384. => filter::(option NodeFilterInterface.t) => NodeIterator.t) = "" [@@bs.send];
  external createNodeIterator: t => (RootNodeT.t => 385. => filter::(option NodeFilterInterface.t) => NodeIterator.t) = "" [@@bs.send];
  external createNodeIterator: t => (RootNodeT.t => 388. => filter::(option NodeFilterInterface.t) => NodeIterator.t) = "" [@@bs.send];
  external createNodeIterator: t => (RootNodeT.t => 389. => filter::(option NodeFilterInterface.t) => NodeIterator.t) = "" [@@bs.send];
  external createNodeIterator: t => (RootNodeT.t => 512. => filter::(option NodeFilterInterface.t) => NodeIterator.t) = "" [@@bs.send];
  external createNodeIterator: t => (RootNodeT.t => 513. => filter::(option NodeFilterInterface.t) => NodeIterator.t) = "" [@@bs.send];
  external createNodeIterator: t => (RootNodeT.t => 516. => filter::(option NodeFilterInterface.t) => NodeIterator.t) = "" [@@bs.send];
  external createNodeIterator: t => (RootNodeT.t => 517. => filter::(option NodeFilterInterface.t) => NodeIterator.t) = "" [@@bs.send];
  external createNodeIterator: t => (RootNodeT.t => 640. => filter::(option NodeFilterInterface.t) => NodeIterator.t) = "" [@@bs.send];
  external createNodeIterator: t => (RootNodeT.t => 641. => filter::(option NodeFilterInterface.t) => NodeIterator.t) = "" [@@bs.send];
  external createNodeIterator: t => (RootNodeT.t => 644. => filter::(option NodeFilterInterface.t) => NodeIterator.t) = "" [@@bs.send];
  external createNodeIterator: t => (RootNodeT.t => 645. => filter::(option NodeFilterInterface.t) => NodeIterator.t) = "" [@@bs.send];
  external createNodeIterator: t => (RootNodeT.t => 768. => filter::(option NodeFilterInterface.t) => NodeIterator.t) = "" [@@bs.send];
  external createNodeIterator: t => (RootNodeT.t => 769. => filter::(option NodeFilterInterface.t) => NodeIterator.t) = "" [@@bs.send];
  external createNodeIterator: t => (RootNodeT.t => 772. => filter::(option NodeFilterInterface.t) => NodeIterator.t) = "" [@@bs.send];
  external createNodeIterator: t => (RootNodeT.t => 773. => filter::(option NodeFilterInterface.t) => NodeIterator.t) = "" [@@bs.send];
  external createNodeIterator: t => (RootNodeT.t => 896. => filter::(option NodeFilterInterface.t) => NodeIterator.t) = "" [@@bs.send];
  external createNodeIterator: t => (RootNodeT.t => 897. => filter::(option NodeFilterInterface.t) => NodeIterator.t) = "" [@@bs.send];
  external createNodeIterator: t => (RootNodeT.t => 900. => filter::(option NodeFilterInterface.t) => NodeIterator.t) = "" [@@bs.send];
  external createNodeIterator: t => (RootNodeT.t => 901. => filter::(option NodeFilterInterface.t) => NodeIterator.t) = "" [@@bs.send];
  external createTreeWalker: t => (RootNodeT.t => 256. => filter::(option NodeFilterInterface.t) => entityReferenceExpansion::(option bool) => TreeWalker.t) = "" [@@bs.send];
  external createTreeWalker: t => (RootNodeT.t => 257. => filter::(option NodeFilterInterface.t) => entityReferenceExpansion::(option bool) => TreeWalker.t) = "" [@@bs.send];
  external createTreeWalker: t => (RootNodeT.t => 260. => filter::(option NodeFilterInterface.t) => entityReferenceExpansion::(option bool) => TreeWalker.t) = "" [@@bs.send];
  external createTreeWalker: t => (RootNodeT.t => 261. => filter::(option NodeFilterInterface.t) => entityReferenceExpansion::(option bool) => TreeWalker.t) = "" [@@bs.send];
  external createTreeWalker: t => (RootNodeT.t => 384. => filter::(option NodeFilterInterface.t) => entityReferenceExpansion::(option bool) => TreeWalker.t) = "" [@@bs.send];
  external createTreeWalker: t => (RootNodeT.t => 385. => filter::(option NodeFilterInterface.t) => entityReferenceExpansion::(option bool) => TreeWalker.t) = "" [@@bs.send];
  external createTreeWalker: t => (RootNodeT.t => 388. => filter::(option NodeFilterInterface.t) => entityReferenceExpansion::(option bool) => TreeWalker.t) = "" [@@bs.send];
  external createTreeWalker: t => (RootNodeT.t => 389. => filter::(option NodeFilterInterface.t) => entityReferenceExpansion::(option bool) => TreeWalker.t) = "" [@@bs.send];
  external createTreeWalker: t => (RootNodeT.t => 512. => filter::(option NodeFilterInterface.t) => entityReferenceExpansion::(option bool) => TreeWalker.t) = "" [@@bs.send];
  external createTreeWalker: t => (RootNodeT.t => 513. => filter::(option NodeFilterInterface.t) => entityReferenceExpansion::(option bool) => TreeWalker.t) = "" [@@bs.send];
  external createTreeWalker: t => (RootNodeT.t => 516. => filter::(option NodeFilterInterface.t) => entityReferenceExpansion::(option bool) => TreeWalker.t) = "" [@@bs.send];
  external createTreeWalker: t => (RootNodeT.t => 517. => filter::(option NodeFilterInterface.t) => entityReferenceExpansion::(option bool) => TreeWalker.t) = "" [@@bs.send];
  external createTreeWalker: t => (RootNodeT.t => 640. => filter::(option NodeFilterInterface.t) => entityReferenceExpansion::(option bool) => TreeWalker.t) = "" [@@bs.send];
  external createTreeWalker: t => (RootNodeT.t => 641. => filter::(option NodeFilterInterface.t) => entityReferenceExpansion::(option bool) => TreeWalker.t) = "" [@@bs.send];
  external createTreeWalker: t => (RootNodeT.t => 644. => filter::(option NodeFilterInterface.t) => entityReferenceExpansion::(option bool) => TreeWalker.t) = "" [@@bs.send];
  external createTreeWalker: t => (RootNodeT.t => 645. => filter::(option NodeFilterInterface.t) => entityReferenceExpansion::(option bool) => TreeWalker.t) = "" [@@bs.send];
  external createTreeWalker: t => (RootNodeT.t => 768. => filter::(option NodeFilterInterface.t) => entityReferenceExpansion::(option bool) => TreeWalker.t) = "" [@@bs.send];
  external createTreeWalker: t => (RootNodeT.t => 769. => filter::(option NodeFilterInterface.t) => entityReferenceExpansion::(option bool) => TreeWalker.t) = "" [@@bs.send];
  external createTreeWalker: t => (RootNodeT.t => 772. => filter::(option NodeFilterInterface.t) => entityReferenceExpansion::(option bool) => TreeWalker.t) = "" [@@bs.send];
  external createTreeWalker: t => (RootNodeT.t => 773. => filter::(option NodeFilterInterface.t) => entityReferenceExpansion::(option bool) => TreeWalker.t) = "" [@@bs.send];
  external createTreeWalker: t => (RootNodeT.t => 896. => filter::(option NodeFilterInterface.t) => entityReferenceExpansion::(option bool) => TreeWalker.t) = "" [@@bs.send];
  external createTreeWalker: t => (RootNodeT.t => 897. => filter::(option NodeFilterInterface.t) => entityReferenceExpansion::(option bool) => TreeWalker.t) = "" [@@bs.send];
  external createTreeWalker: t => (RootNodeT.t => 900. => filter::(option NodeFilterInterface.t) => entityReferenceExpansion::(option bool) => TreeWalker.t) = "" [@@bs.send];
  external createTreeWalker: t => (RootNodeT.t => 901. => filter::(option NodeFilterInterface.t) => entityReferenceExpansion::(option bool) => TreeWalker.t) = "" [@@bs.send];
  external createNodeIterator: t => (RootNodeT.t => 1024. => filter::(option NodeFilterInterface.t) => NodeIterator.t) = "" [@@bs.send];
  external createNodeIterator: t => (RootNodeT.t => 1025. => filter::(option NodeFilterInterface.t) => NodeIterator.t) = "" [@@bs.send];
  external createNodeIterator: t => (RootNodeT.t => 1028. => filter::(option NodeFilterInterface.t) => NodeIterator.t) = "" [@@bs.send];
  external createNodeIterator: t => (RootNodeT.t => 1029. => filter::(option NodeFilterInterface.t) => NodeIterator.t) = "" [@@bs.send];
  external createNodeIterator: t => (RootNodeT.t => 1152. => filter::(option NodeFilterInterface.t) => NodeIterator.t) = "" [@@bs.send];
  external createNodeIterator: t => (RootNodeT.t => 1153. => filter::(option NodeFilterInterface.t) => NodeIterator.t) = "" [@@bs.send];
  external createNodeIterator: t => (RootNodeT.t => 1156. => filter::(option NodeFilterInterface.t) => NodeIterator.t) = "" [@@bs.send];
  external createNodeIterator: t => (RootNodeT.t => 1157. => filter::(option NodeFilterInterface.t) => NodeIterator.t) = "" [@@bs.send];
  external createTreeWalker: t => (RootNodeT.t => 1024. => filter::(option NodeFilterInterface.t) => entityReferenceExpansion::(option bool) => TreeWalker.t) = "" [@@bs.send];
  external createTreeWalker: t => (RootNodeT.t => 1025. => filter::(option NodeFilterInterface.t) => entityReferenceExpansion::(option bool) => TreeWalker.t) = "" [@@bs.send];
  external createTreeWalker: t => (RootNodeT.t => 1028. => filter::(option NodeFilterInterface.t) => entityReferenceExpansion::(option bool) => TreeWalker.t) = "" [@@bs.send];
  external createTreeWalker: t => (RootNodeT.t => 1029. => filter::(option NodeFilterInterface.t) => entityReferenceExpansion::(option bool) => TreeWalker.t) = "" [@@bs.send];
  external createTreeWalker: t => (RootNodeT.t => 1152. => filter::(option NodeFilterInterface.t) => entityReferenceExpansion::(option bool) => TreeWalker.t) = "" [@@bs.send];
  external createTreeWalker: t => (RootNodeT.t => 1153. => filter::(option NodeFilterInterface.t) => entityReferenceExpansion::(option bool) => TreeWalker.t) = "" [@@bs.send];
  external createTreeWalker: t => (RootNodeT.t => 1156. => filter::(option NodeFilterInterface.t) => entityReferenceExpansion::(option bool) => TreeWalker.t) = "" [@@bs.send];
  external createTreeWalker: t => (RootNodeT.t => 1157. => filter::(option NodeFilterInterface.t) => entityReferenceExpansion::(option bool) => TreeWalker.t) = "" [@@bs.send];
  external createNodeIterator: t => (RootNodeT.t => 1. => filter::(option NodeFilterInterface.t) => NodeIterator.t) = "" [@@bs.send];
  external createNodeIterator: t => (RootNodeT.t => 4. => filter::(option NodeFilterInterface.t) => NodeIterator.t) = "" [@@bs.send];
  external createNodeIterator: t => (RootNodeT.t => 5. => filter::(option NodeFilterInterface.t) => NodeIterator.t) = "" [@@bs.send];
  external createNodeIterator: t => (RootNodeT.t => 128. => filter::(option NodeFilterInterface.t) => NodeIterator.t) = "" [@@bs.send];
  external createNodeIterator: t => (RootNodeT.t => 129. => filter::(option NodeFilterInterface.t) => NodeIterator.t) = "" [@@bs.send];
  external createNodeIterator: t => (RootNodeT.t => 132. => filter::(option NodeFilterInterface.t) => NodeIterator.t) = "" [@@bs.send];
  external createNodeIterator: t => (RootNodeT.t => 133. => filter::(option NodeFilterInterface.t) => NodeIterator.t) = "" [@@bs.send];
  external createNodeIterator: t => (RootNodeT.t => -1. => filter::(option NodeFilterInterface.t) => NodeIterator.t) = "" [@@bs.send];
  external createTreeWalker: t => (RootNodeT.t => 1. => filter::(option NodeFilterInterface.t) => entityReferenceExpansion::(option bool) => TreeWalker.t) = "" [@@bs.send];
  external createTreeWalker: t => (RootNodeT.t => 4. => filter::(option NodeFilterInterface.t) => entityReferenceExpansion::(option bool) => TreeWalker.t) = "" [@@bs.send];
  external createTreeWalker: t => (RootNodeT.t => 5. => filter::(option NodeFilterInterface.t) => entityReferenceExpansion::(option bool) => TreeWalker.t) = "" [@@bs.send];
  external createTreeWalker: t => (RootNodeT.t => 128. => filter::(option NodeFilterInterface.t) => entityReferenceExpansion::(option bool) => TreeWalker.t) = "" [@@bs.send];
  external createTreeWalker: t => (RootNodeT.t => 129. => filter::(option NodeFilterInterface.t) => entityReferenceExpansion::(option bool) => TreeWalker.t) = "" [@@bs.send];
  external createTreeWalker: t => (RootNodeT.t => 132. => filter::(option NodeFilterInterface.t) => entityReferenceExpansion::(option bool) => TreeWalker.t) = "" [@@bs.send];
  external createTreeWalker: t => (RootNodeT.t => 133. => filter::(option NodeFilterInterface.t) => entityReferenceExpansion::(option bool) => TreeWalker.t) = "" [@@bs.send];
  external createTreeWalker: t => (RootNodeT.t => -1. => filter::(option NodeFilterInterface.t) => entityReferenceExpansion::(option bool) => TreeWalker.t) = "" [@@bs.send];
  external createNodeIterator: t => (RootNodeT.t => float => filter::(option NodeFilterInterface.t) => NodeIterator.t) = "" [@@bs.send];
  external createTreeWalker: t => (RootNodeT.t => float => filter::(option NodeFilterInterface.t) => entityReferenceExpansion::(option bool) => TreeWalker.t) = "" [@@bs.send];
  external createNodeIterator: t => (RootNodeT.t => unit => NodeIterator.t) = "" [@@bs.send];
  external createTreeWalker: t => (RootNodeT.t => unit => TreeWalker.t) = "" [@@bs.send];
};
let module DocumentFragment = {
  type t;
  external create: unit => t = "DocumentFragment" [@@bs.new]; 
  external childElementCount: t => float = "" [@@bs.get];
  external children: t => HTMLCollection.t = "" [@@bs.get];
  external firstElementChild: t => TODO = "" [@@bs.get];
  external lastElementChild: t => TODO = "" [@@bs.get];
  external querySelector: t => (string => HTMLElement.t) = "" [@@bs.send];
  external querySelectorAll: t => (string => NodeList.t) = "" [@@bs.send];
};
let module Selection = {
  type t;
  external create: unit => t = "Selection" [@@bs.new]; 
  external anchorNode: t => TODO = "" [@@bs.get];
  external anchorOffset: t => float = "" [@@bs.get];
  external focusNode: t => TODO = "" [@@bs.get];
  external focusOffset: t => float = "" [@@bs.get];
  external isCollapsed: t => bool = "" [@@bs.get];
  external rangeCount: t => float = "" [@@bs.get];
  external addRange: t => (Range.t => unit) = "" [@@bs.send];
  external getRangeAt: t => (float => Range.t) = "" [@@bs.send];
  external removeRange: t => (Range.t => unit) = "" [@@bs.send];
  external removeAllRanges: t => (unit => unit) = "" [@@bs.send];
  external collapse: t => (TODO => offset::(option float) => unit) = "" [@@bs.send];
  external collapseToStart: t => (unit => unit) = "" [@@bs.send];
  external collapseToEnd: t => (unit => unit) = "" [@@bs.send];
  external containsNode: t => (Node.t => aPartlyContained::(option bool) => bool) = "" [@@bs.send];
  external deleteFromDocument: t => (unit => unit) = "" [@@bs.send];
  external extend: t => (Node.t => offset::(option float) => unit) = "" [@@bs.send];
  external empty: t => (unit => unit) = "" [@@bs.send];
  external selectAllChildren: t => (Node.t => unit) = "" [@@bs.send];
  external setPosition: t => (TODO => offset::(option float) => unit) = "" [@@bs.send];
  external setBaseAndExtent: t => (Node.t => float => Node.t => float => unit) = "" [@@bs.send];
  external toString: t => (unit => string) = "" [@@bs.send];
};
let module Range = {
  type t;
  external create: unit => t = "Range" [@@bs.new]; 
  external startOffset: t => float = "" [@@bs.get];
  external collapsed: t => bool = "" [@@bs.get];
  external endOffset: t => float = "" [@@bs.get];
  external startContainer: t => Node.t = "" [@@bs.get];
  external endContainer: t => Node.t = "" [@@bs.get];
  external commonAncestorContainer: t => Node.t = "" [@@bs.get];
  external setStart: t => (Node.t => float => unit) = "" [@@bs.send];
  external setEndBefore: t => (Node.t => unit) = "" [@@bs.send];
  external setStartBefore: t => (Node.t => unit) = "" [@@bs.send];
  external selectNode: t => (Node.t => unit) = "" [@@bs.send];
  external detach: t => (unit => unit) = "" [@@bs.send];
  external getBoundingClientRect: t => (unit => ClientRect.t) = "" [@@bs.send];
  external toString: t => (unit => string) = "" [@@bs.send];
  external compareBoundaryPoints: t => (float => Range.t => float) = "" [@@bs.send];
  external insertNode: t => (Node.t => unit) = "" [@@bs.send];
  external collapse: t => (bool => unit) = "" [@@bs.send];
  external selectNodeContents: t => (Node.t => unit) = "" [@@bs.send];
  external cloneContents: t => (unit => Node.t) = "" [@@bs.send];
  external setEnd: t => (Node.t => float => unit) = "" [@@bs.send];
  external cloneRange: t => (unit => Range.t) = "" [@@bs.send];
  external getClientRects: t => (unit => ClientRectList.t) = "" [@@bs.send];
  external surroundContents: t => (Node.t => unit) = "" [@@bs.send];
  external deleteContents: t => (unit => unit) = "" [@@bs.send];
  external setStartAfter: t => (Node.t => unit) = "" [@@bs.send];
  external extractContents: t => (unit => DocumentFragment.t) = "" [@@bs.send];
  external setEndAfter: t => (Node.t => unit) = "" [@@bs.send];
  external createContextualFragment: t => (string => Node.t) = "" [@@bs.send];
  external _END_TO_END: t => float = "" [@@bs.get];
  external _START_TO_START: t => float = "" [@@bs.get];
  external _START_TO_END: t => float = "" [@@bs.get];
  external _END_TO_START: t => float = "" [@@bs.get];
};
let module DocumentInstance = {
  external _URL: string = "document.URL" [@@bs.val];
  external adoptNode: (Node.t => Node.t) = "document.adoptNode" [@@bs.send];
  external anchors: HTMLCollection.t = "document.anchors" [@@bs.val];
  external applets: HTMLCollection.t = "document.applets" [@@bs.val];
  external body: HTMLElement.t = "document.body" [@@bs.val];
  external characterSet: string = "document.characterSet" [@@bs.val];
  external close: (unit => unit) = "document.close" [@@bs.send];
  external cookie: string = "document.cookie" [@@bs.val];
  external createAttribute: (string => Attr.t) = "document.createAttribute" [@@bs.send];
  external createAttributeNS: (string => string => Attr.t) = "document.createAttributeNS" [@@bs.send];
  external createCDATASection: (string => Text.t) = "document.createCDATASection" [@@bs.send];
  external createComment: (string => Comment.t) = "document.createComment" [@@bs.send];
  external createDocumentFragment: (unit => DocumentFragment.t) = "document.createDocumentFragment" [@@bs.send];
  external createElement: ("a" => HTMLAnchorElement.t) = "document.createElement" [@@bs.send];
  external createElement: ("audio" => HTMLAudioElement.t) = "document.createElement" [@@bs.send];
  external createElement: ("button" => HTMLButtonElement.t) = "document.createElement" [@@bs.send];
  external createElement: ("canvas" => HTMLCanvasElement.t) = "document.createElement" [@@bs.send];
  external createElement: ("div" => HTMLDivElement.t) = "document.createElement" [@@bs.send];
  external createElement: ("form" => HTMLFormElement.t) = "document.createElement" [@@bs.send];
  external createElement: ("iframe" => HTMLIFrameElement.t) = "document.createElement" [@@bs.send];
  external createElement: ("img" => HTMLImageElement.t) = "document.createElement" [@@bs.send];
  external createElement: ("input" => HTMLInputElement.t) = "document.createElement" [@@bs.send];
  external createElement: ("label" => HTMLLabelElement.t) = "document.createElement" [@@bs.send];
  external createElement: ("link" => HTMLLinkElement.t) = "document.createElement" [@@bs.send];
  external createElement: ("media" => HTMLMediaElement.t) = "document.createElement" [@@bs.send];
  external createElement: ("option" => HTMLOptionElement.t) = "document.createElement" [@@bs.send];
  external createElement: ("p" => HTMLParagraphElement.t) = "document.createElement" [@@bs.send];
  external createElement: ("script" => HTMLScriptElement.t) = "document.createElement" [@@bs.send];
  external createElement: ("select" => HTMLSelectElement.t) = "document.createElement" [@@bs.send];
  external createElement: ("source" => HTMLSourceElement.t) = "document.createElement" [@@bs.send];
  external createElement: ("span" => HTMLSpanElement.t) = "document.createElement" [@@bs.send];
  external createElement: ("style" => HTMLStyleElement.t) = "document.createElement" [@@bs.send];
  external createElement: ("textarea" => HTMLTextAreaElement.t) = "document.createElement" [@@bs.send];
  external createElement: ("video" => HTMLVideoElement.t) = "document.createElement" [@@bs.send];
  external createElement: ("tr" => HTMLTableRowElement.t) = "document.createElement" [@@bs.send];
  external createElement: (TODO => HTMLTableCellElement.t) = "document.createElement" [@@bs.send];
  external createElement: (string => HTMLElement.t) = "document.createElement" [@@bs.send];
  external createElementNS: (string => string => Element.t) = "document.createElementNS" [@@bs.send];
  external createTextNode: (string => Text.t) = "document.createTextNode" [@@bs.send];
  external currentScript: TODO = "document.currentScript" [@@bs.val];
  external doctype: DocumentType.t = "document.doctype" [@@bs.val];
  external documentElement: HTMLElement.t = "document.documentElement" [@@bs.val];
  external documentMode: float = "document.documentMode" [@@bs.val];
  external domain: TODO = "document.domain" [@@bs.val];
  external embeds: HTMLCollection.t = "document.embeds" [@@bs.val];
  external execCommand: (string => showUI::(option bool) => value::(option 'a) => bool) = "document.execCommand" [@@bs.send];
  external forms: HTMLCollection.t = "document.forms" [@@bs.val];
  external getElementById: (string => HTMLElement.t) = "document.getElementById" [@@bs.send];
  external getElementsByClassName: (string => HTMLCollection.t) = "document.getElementsByClassName" [@@bs.send];
  external getElementsByName: (string => HTMLCollection.t) = "document.getElementsByName" [@@bs.send];
  external getElementsByTagName: ("a" => HTMLCollection.t) = "document.getElementsByTagName" [@@bs.send];
  external getElementsByTagName: ("audio" => HTMLCollection.t) = "document.getElementsByTagName" [@@bs.send];
  external getElementsByTagName: ("button" => HTMLCollection.t) = "document.getElementsByTagName" [@@bs.send];
  external getElementsByTagName: ("canvas" => HTMLCollection.t) = "document.getElementsByTagName" [@@bs.send];
  external getElementsByTagName: ("div" => HTMLCollection.t) = "document.getElementsByTagName" [@@bs.send];
  external getElementsByTagName: ("form" => HTMLCollection.t) = "document.getElementsByTagName" [@@bs.send];
  external getElementsByTagName: ("iframe" => HTMLCollection.t) = "document.getElementsByTagName" [@@bs.send];
  external getElementsByTagName: ("img" => HTMLCollection.t) = "document.getElementsByTagName" [@@bs.send];
  external getElementsByTagName: ("input" => HTMLCollection.t) = "document.getElementsByTagName" [@@bs.send];
  external getElementsByTagName: ("label" => HTMLCollection.t) = "document.getElementsByTagName" [@@bs.send];
  external getElementsByTagName: ("link" => HTMLCollection.t) = "document.getElementsByTagName" [@@bs.send];
  external getElementsByTagName: ("media" => HTMLCollection.t) = "document.getElementsByTagName" [@@bs.send];
  external getElementsByTagName: ("option" => HTMLCollection.t) = "document.getElementsByTagName" [@@bs.send];
  external getElementsByTagName: ("p" => HTMLCollection.t) = "document.getElementsByTagName" [@@bs.send];
  external getElementsByTagName: ("script" => HTMLCollection.t) = "document.getElementsByTagName" [@@bs.send];
  external getElementsByTagName: ("select" => HTMLCollection.t) = "document.getElementsByTagName" [@@bs.send];
  external getElementsByTagName: ("source" => HTMLCollection.t) = "document.getElementsByTagName" [@@bs.send];
  external getElementsByTagName: ("span" => HTMLCollection.t) = "document.getElementsByTagName" [@@bs.send];
  external getElementsByTagName: ("style" => HTMLCollection.t) = "document.getElementsByTagName" [@@bs.send];
  external getElementsByTagName: ("textarea" => HTMLCollection.t) = "document.getElementsByTagName" [@@bs.send];
  external getElementsByTagName: ("video" => HTMLCollection.t) = "document.getElementsByTagName" [@@bs.send];
  external getElementsByTagName: ("tr" => HTMLCollection.t) = "document.getElementsByTagName" [@@bs.send];
  external getElementsByTagName: (TODO => HTMLCollection.t) = "document.getElementsByTagName" [@@bs.send];
  external getElementsByTagName: (string => HTMLCollection.t) = "document.getElementsByTagName" [@@bs.send];
  external getElementsByTagNameNS: (string => "a" => HTMLCollection.t) = "document.getElementsByTagNameNS" [@@bs.send];
  external getElementsByTagNameNS: (string => "audio" => HTMLCollection.t) = "document.getElementsByTagNameNS" [@@bs.send];
  external getElementsByTagNameNS: (string => "button" => HTMLCollection.t) = "document.getElementsByTagNameNS" [@@bs.send];
  external getElementsByTagNameNS: (string => "canvas" => HTMLCollection.t) = "document.getElementsByTagNameNS" [@@bs.send];
  external getElementsByTagNameNS: (string => "div" => HTMLCollection.t) = "document.getElementsByTagNameNS" [@@bs.send];
  external getElementsByTagNameNS: (string => "form" => HTMLCollection.t) = "document.getElementsByTagNameNS" [@@bs.send];
  external getElementsByTagNameNS: (string => "iframe" => HTMLCollection.t) = "document.getElementsByTagNameNS" [@@bs.send];
  external getElementsByTagNameNS: (string => "img" => HTMLCollection.t) = "document.getElementsByTagNameNS" [@@bs.send];
  external getElementsByTagNameNS: (string => "input" => HTMLCollection.t) = "document.getElementsByTagNameNS" [@@bs.send];
  external getElementsByTagNameNS: (string => "label" => HTMLCollection.t) = "document.getElementsByTagNameNS" [@@bs.send];
  external getElementsByTagNameNS: (string => "link" => HTMLCollection.t) = "document.getElementsByTagNameNS" [@@bs.send];
  external getElementsByTagNameNS: (string => "media" => HTMLCollection.t) = "document.getElementsByTagNameNS" [@@bs.send];
  external getElementsByTagNameNS: (string => "option" => HTMLCollection.t) = "document.getElementsByTagNameNS" [@@bs.send];
  external getElementsByTagNameNS: (string => "p" => HTMLCollection.t) = "document.getElementsByTagNameNS" [@@bs.send];
  external getElementsByTagNameNS: (string => "script" => HTMLCollection.t) = "document.getElementsByTagNameNS" [@@bs.send];
  external getElementsByTagNameNS: (string => "select" => HTMLCollection.t) = "document.getElementsByTagNameNS" [@@bs.send];
  external getElementsByTagNameNS: (string => "source" => HTMLCollection.t) = "document.getElementsByTagNameNS" [@@bs.send];
  external getElementsByTagNameNS: (string => "span" => HTMLCollection.t) = "document.getElementsByTagNameNS" [@@bs.send];
  external getElementsByTagNameNS: (string => "style" => HTMLCollection.t) = "document.getElementsByTagNameNS" [@@bs.send];
  external getElementsByTagNameNS: (string => "textarea" => HTMLCollection.t) = "document.getElementsByTagNameNS" [@@bs.send];
  external getElementsByTagNameNS: (string => "video" => HTMLCollection.t) = "document.getElementsByTagNameNS" [@@bs.send];
  external getElementsByTagNameNS: (string => "tr" => HTMLCollection.t) = "document.getElementsByTagNameNS" [@@bs.send];
  external getElementsByTagNameNS: (string => TODO => HTMLCollection.t) = "document.getElementsByTagNameNS" [@@bs.send];
  external getElementsByTagNameNS: (string => string => HTMLCollection.t) = "document.getElementsByTagNameNS" [@@bs.send];
  external head: HTMLElement.t = "document.head" [@@bs.val];
  external images: HTMLCollection.t = "document.images" [@@bs.val];
  external implementation: DOMImplementation.t = "document.implementation" [@@bs.val];
  external importNode: (Node.t => bool => Node.t) = "document.importNode" [@@bs.send];
  external inputEncoding: string = "document.inputEncoding" [@@bs.val];
  external lastModified: string = "document.lastModified" [@@bs.val];
  external links: HTMLCollection.t = "document.links" [@@bs.val];
  external media: string = "document.media" [@@bs.val];
  external open: (url::(option string) => name::(option string) => features::(option string) => replace::(option bool) => 'a) = "document.open" [@@bs.send];
  external readyState: string = "document.readyState" [@@bs.val];
  external referrer: string = "document.referrer" [@@bs.val];
  external scripts: HTMLCollection.t = "document.scripts" [@@bs.val];
  external styleSheets: StyleSheetList.t = "document.styleSheets" [@@bs.val];
  external title: string = "document.title" [@@bs.val];
  external write: (array 'rest => unit) = "document.write" [@@bs.send] [@@bs.splice];
  external writeln: (array 'rest => unit) = "document.writeln" [@@bs.send] [@@bs.splice];
  external xmlEncoding: string = "document.xmlEncoding" [@@bs.val];
  external xmlStandalone: bool = "document.xmlStandalone" [@@bs.val];
  external xmlVersion: string = "document.xmlVersion" [@@bs.val];
  external registerElement: (string => options::(option ElementRegistrationOptions.t) => 'a) = "document.registerElement" [@@bs.send];
  external getSelection: (unit => TODO) = "document.getSelection" [@@bs.send];
  external activeElement: HTMLElement.t = "document.activeElement" [@@bs.val];
  external hasFocus: (unit => bool) = "document.hasFocus" [@@bs.send];
  external location: Location.t = "document.location" [@@bs.val];
  external createEvent: ("CustomEvent" => CustomEvent.t) = "document.createEvent" [@@bs.send];
  external createEvent: (string => Event.t) = "document.createEvent" [@@bs.send];
  external createRange: (unit => Range.t) = "document.createRange" [@@bs.send];
  external elementFromPoint: (float => float => HTMLElement.t) = "document.elementFromPoint" [@@bs.send];
  external defaultView: 'a = "document.defaultView" [@@bs.val];
  external compatMode: TODO = "document.compatMode" [@@bs.val];
  external hidden: bool = "document.hidden" [@@bs.val];
  external childElementCount: float = "document.childElementCount" [@@bs.val];
  external children: HTMLCollection.t = "document.children" [@@bs.val];
  external firstElementChild: TODO = "document.firstElementChild" [@@bs.val];
  external lastElementChild: TODO = "document.lastElementChild" [@@bs.val];
  external querySelector: (string => HTMLElement.t) = "document.querySelector" [@@bs.send];
  external querySelectorAll: (string => NodeList.t) = "document.querySelectorAll" [@@bs.send];
  external createNodeIterator: (RootNodeT.t => 2. => filter::(option NodeFilterInterface.t) => NodeIterator.t) = "document.createNodeIterator" [@@bs.send];
  external createTreeWalker: (RootNodeT.t => 2. => filter::(option NodeFilterInterface.t) => entityReferenceExpansion::(option bool) => TreeWalker.t) = "document.createTreeWalker" [@@bs.send];
  external createNodeIterator: (RootNodeT.t => 256. => filter::(option NodeFilterInterface.t) => NodeIterator.t) = "document.createNodeIterator" [@@bs.send];
  external createNodeIterator: (RootNodeT.t => 257. => filter::(option NodeFilterInterface.t) => NodeIterator.t) = "document.createNodeIterator" [@@bs.send];
  external createNodeIterator: (RootNodeT.t => 260. => filter::(option NodeFilterInterface.t) => NodeIterator.t) = "document.createNodeIterator" [@@bs.send];
  external createNodeIterator: (RootNodeT.t => 261. => filter::(option NodeFilterInterface.t) => NodeIterator.t) = "document.createNodeIterator" [@@bs.send];
  external createNodeIterator: (RootNodeT.t => 384. => filter::(option NodeFilterInterface.t) => NodeIterator.t) = "document.createNodeIterator" [@@bs.send];
  external createNodeIterator: (RootNodeT.t => 385. => filter::(option NodeFilterInterface.t) => NodeIterator.t) = "document.createNodeIterator" [@@bs.send];
  external createNodeIterator: (RootNodeT.t => 388. => filter::(option NodeFilterInterface.t) => NodeIterator.t) = "document.createNodeIterator" [@@bs.send];
  external createNodeIterator: (RootNodeT.t => 389. => filter::(option NodeFilterInterface.t) => NodeIterator.t) = "document.createNodeIterator" [@@bs.send];
  external createNodeIterator: (RootNodeT.t => 512. => filter::(option NodeFilterInterface.t) => NodeIterator.t) = "document.createNodeIterator" [@@bs.send];
  external createNodeIterator: (RootNodeT.t => 513. => filter::(option NodeFilterInterface.t) => NodeIterator.t) = "document.createNodeIterator" [@@bs.send];
  external createNodeIterator: (RootNodeT.t => 516. => filter::(option NodeFilterInterface.t) => NodeIterator.t) = "document.createNodeIterator" [@@bs.send];
  external createNodeIterator: (RootNodeT.t => 517. => filter::(option NodeFilterInterface.t) => NodeIterator.t) = "document.createNodeIterator" [@@bs.send];
  external createNodeIterator: (RootNodeT.t => 640. => filter::(option NodeFilterInterface.t) => NodeIterator.t) = "document.createNodeIterator" [@@bs.send];
  external createNodeIterator: (RootNodeT.t => 641. => filter::(option NodeFilterInterface.t) => NodeIterator.t) = "document.createNodeIterator" [@@bs.send];
  external createNodeIterator: (RootNodeT.t => 644. => filter::(option NodeFilterInterface.t) => NodeIterator.t) = "document.createNodeIterator" [@@bs.send];
  external createNodeIterator: (RootNodeT.t => 645. => filter::(option NodeFilterInterface.t) => NodeIterator.t) = "document.createNodeIterator" [@@bs.send];
  external createNodeIterator: (RootNodeT.t => 768. => filter::(option NodeFilterInterface.t) => NodeIterator.t) = "document.createNodeIterator" [@@bs.send];
  external createNodeIterator: (RootNodeT.t => 769. => filter::(option NodeFilterInterface.t) => NodeIterator.t) = "document.createNodeIterator" [@@bs.send];
  external createNodeIterator: (RootNodeT.t => 772. => filter::(option NodeFilterInterface.t) => NodeIterator.t) = "document.createNodeIterator" [@@bs.send];
  external createNodeIterator: (RootNodeT.t => 773. => filter::(option NodeFilterInterface.t) => NodeIterator.t) = "document.createNodeIterator" [@@bs.send];
  external createNodeIterator: (RootNodeT.t => 896. => filter::(option NodeFilterInterface.t) => NodeIterator.t) = "document.createNodeIterator" [@@bs.send];
  external createNodeIterator: (RootNodeT.t => 897. => filter::(option NodeFilterInterface.t) => NodeIterator.t) = "document.createNodeIterator" [@@bs.send];
  external createNodeIterator: (RootNodeT.t => 900. => filter::(option NodeFilterInterface.t) => NodeIterator.t) = "document.createNodeIterator" [@@bs.send];
  external createNodeIterator: (RootNodeT.t => 901. => filter::(option NodeFilterInterface.t) => NodeIterator.t) = "document.createNodeIterator" [@@bs.send];
  external createTreeWalker: (RootNodeT.t => 256. => filter::(option NodeFilterInterface.t) => entityReferenceExpansion::(option bool) => TreeWalker.t) = "document.createTreeWalker" [@@bs.send];
  external createTreeWalker: (RootNodeT.t => 257. => filter::(option NodeFilterInterface.t) => entityReferenceExpansion::(option bool) => TreeWalker.t) = "document.createTreeWalker" [@@bs.send];
  external createTreeWalker: (RootNodeT.t => 260. => filter::(option NodeFilterInterface.t) => entityReferenceExpansion::(option bool) => TreeWalker.t) = "document.createTreeWalker" [@@bs.send];
  external createTreeWalker: (RootNodeT.t => 261. => filter::(option NodeFilterInterface.t) => entityReferenceExpansion::(option bool) => TreeWalker.t) = "document.createTreeWalker" [@@bs.send];
  external createTreeWalker: (RootNodeT.t => 384. => filter::(option NodeFilterInterface.t) => entityReferenceExpansion::(option bool) => TreeWalker.t) = "document.createTreeWalker" [@@bs.send];
  external createTreeWalker: (RootNodeT.t => 385. => filter::(option NodeFilterInterface.t) => entityReferenceExpansion::(option bool) => TreeWalker.t) = "document.createTreeWalker" [@@bs.send];
  external createTreeWalker: (RootNodeT.t => 388. => filter::(option NodeFilterInterface.t) => entityReferenceExpansion::(option bool) => TreeWalker.t) = "document.createTreeWalker" [@@bs.send];
  external createTreeWalker: (RootNodeT.t => 389. => filter::(option NodeFilterInterface.t) => entityReferenceExpansion::(option bool) => TreeWalker.t) = "document.createTreeWalker" [@@bs.send];
  external createTreeWalker: (RootNodeT.t => 512. => filter::(option NodeFilterInterface.t) => entityReferenceExpansion::(option bool) => TreeWalker.t) = "document.createTreeWalker" [@@bs.send];
  external createTreeWalker: (RootNodeT.t => 513. => filter::(option NodeFilterInterface.t) => entityReferenceExpansion::(option bool) => TreeWalker.t) = "document.createTreeWalker" [@@bs.send];
  external createTreeWalker: (RootNodeT.t => 516. => filter::(option NodeFilterInterface.t) => entityReferenceExpansion::(option bool) => TreeWalker.t) = "document.createTreeWalker" [@@bs.send];
  external createTreeWalker: (RootNodeT.t => 517. => filter::(option NodeFilterInterface.t) => entityReferenceExpansion::(option bool) => TreeWalker.t) = "document.createTreeWalker" [@@bs.send];
  external createTreeWalker: (RootNodeT.t => 640. => filter::(option NodeFilterInterface.t) => entityReferenceExpansion::(option bool) => TreeWalker.t) = "document.createTreeWalker" [@@bs.send];
  external createTreeWalker: (RootNodeT.t => 641. => filter::(option NodeFilterInterface.t) => entityReferenceExpansion::(option bool) => TreeWalker.t) = "document.createTreeWalker" [@@bs.send];
  external createTreeWalker: (RootNodeT.t => 644. => filter::(option NodeFilterInterface.t) => entityReferenceExpansion::(option bool) => TreeWalker.t) = "document.createTreeWalker" [@@bs.send];
  external createTreeWalker: (RootNodeT.t => 645. => filter::(option NodeFilterInterface.t) => entityReferenceExpansion::(option bool) => TreeWalker.t) = "document.createTreeWalker" [@@bs.send];
  external createTreeWalker: (RootNodeT.t => 768. => filter::(option NodeFilterInterface.t) => entityReferenceExpansion::(option bool) => TreeWalker.t) = "document.createTreeWalker" [@@bs.send];
  external createTreeWalker: (RootNodeT.t => 769. => filter::(option NodeFilterInterface.t) => entityReferenceExpansion::(option bool) => TreeWalker.t) = "document.createTreeWalker" [@@bs.send];
  external createTreeWalker: (RootNodeT.t => 772. => filter::(option NodeFilterInterface.t) => entityReferenceExpansion::(option bool) => TreeWalker.t) = "document.createTreeWalker" [@@bs.send];
  external createTreeWalker: (RootNodeT.t => 773. => filter::(option NodeFilterInterface.t) => entityReferenceExpansion::(option bool) => TreeWalker.t) = "document.createTreeWalker" [@@bs.send];
  external createTreeWalker: (RootNodeT.t => 896. => filter::(option NodeFilterInterface.t) => entityReferenceExpansion::(option bool) => TreeWalker.t) = "document.createTreeWalker" [@@bs.send];
  external createTreeWalker: (RootNodeT.t => 897. => filter::(option NodeFilterInterface.t) => entityReferenceExpansion::(option bool) => TreeWalker.t) = "document.createTreeWalker" [@@bs.send];
  external createTreeWalker: (RootNodeT.t => 900. => filter::(option NodeFilterInterface.t) => entityReferenceExpansion::(option bool) => TreeWalker.t) = "document.createTreeWalker" [@@bs.send];
  external createTreeWalker: (RootNodeT.t => 901. => filter::(option NodeFilterInterface.t) => entityReferenceExpansion::(option bool) => TreeWalker.t) = "document.createTreeWalker" [@@bs.send];
  external createNodeIterator: (RootNodeT.t => 1024. => filter::(option NodeFilterInterface.t) => NodeIterator.t) = "document.createNodeIterator" [@@bs.send];
  external createNodeIterator: (RootNodeT.t => 1025. => filter::(option NodeFilterInterface.t) => NodeIterator.t) = "document.createNodeIterator" [@@bs.send];
  external createNodeIterator: (RootNodeT.t => 1028. => filter::(option NodeFilterInterface.t) => NodeIterator.t) = "document.createNodeIterator" [@@bs.send];
  external createNodeIterator: (RootNodeT.t => 1029. => filter::(option NodeFilterInterface.t) => NodeIterator.t) = "document.createNodeIterator" [@@bs.send];
  external createNodeIterator: (RootNodeT.t => 1152. => filter::(option NodeFilterInterface.t) => NodeIterator.t) = "document.createNodeIterator" [@@bs.send];
  external createNodeIterator: (RootNodeT.t => 1153. => filter::(option NodeFilterInterface.t) => NodeIterator.t) = "document.createNodeIterator" [@@bs.send];
  external createNodeIterator: (RootNodeT.t => 1156. => filter::(option NodeFilterInterface.t) => NodeIterator.t) = "document.createNodeIterator" [@@bs.send];
  external createNodeIterator: (RootNodeT.t => 1157. => filter::(option NodeFilterInterface.t) => NodeIterator.t) = "document.createNodeIterator" [@@bs.send];
  external createTreeWalker: (RootNodeT.t => 1024. => filter::(option NodeFilterInterface.t) => entityReferenceExpansion::(option bool) => TreeWalker.t) = "document.createTreeWalker" [@@bs.send];
  external createTreeWalker: (RootNodeT.t => 1025. => filter::(option NodeFilterInterface.t) => entityReferenceExpansion::(option bool) => TreeWalker.t) = "document.createTreeWalker" [@@bs.send];
  external createTreeWalker: (RootNodeT.t => 1028. => filter::(option NodeFilterInterface.t) => entityReferenceExpansion::(option bool) => TreeWalker.t) = "document.createTreeWalker" [@@bs.send];
  external createTreeWalker: (RootNodeT.t => 1029. => filter::(option NodeFilterInterface.t) => entityReferenceExpansion::(option bool) => TreeWalker.t) = "document.createTreeWalker" [@@bs.send];
  external createTreeWalker: (RootNodeT.t => 1152. => filter::(option NodeFilterInterface.t) => entityReferenceExpansion::(option bool) => TreeWalker.t) = "document.createTreeWalker" [@@bs.send];
  external createTreeWalker: (RootNodeT.t => 1153. => filter::(option NodeFilterInterface.t) => entityReferenceExpansion::(option bool) => TreeWalker.t) = "document.createTreeWalker" [@@bs.send];
  external createTreeWalker: (RootNodeT.t => 1156. => filter::(option NodeFilterInterface.t) => entityReferenceExpansion::(option bool) => TreeWalker.t) = "document.createTreeWalker" [@@bs.send];
  external createTreeWalker: (RootNodeT.t => 1157. => filter::(option NodeFilterInterface.t) => entityReferenceExpansion::(option bool) => TreeWalker.t) = "document.createTreeWalker" [@@bs.send];
  external createNodeIterator: (RootNodeT.t => 1. => filter::(option NodeFilterInterface.t) => NodeIterator.t) = "document.createNodeIterator" [@@bs.send];
  external createNodeIterator: (RootNodeT.t => 4. => filter::(option NodeFilterInterface.t) => NodeIterator.t) = "document.createNodeIterator" [@@bs.send];
  external createNodeIterator: (RootNodeT.t => 5. => filter::(option NodeFilterInterface.t) => NodeIterator.t) = "document.createNodeIterator" [@@bs.send];
  external createNodeIterator: (RootNodeT.t => 128. => filter::(option NodeFilterInterface.t) => NodeIterator.t) = "document.createNodeIterator" [@@bs.send];
  external createNodeIterator: (RootNodeT.t => 129. => filter::(option NodeFilterInterface.t) => NodeIterator.t) = "document.createNodeIterator" [@@bs.send];
  external createNodeIterator: (RootNodeT.t => 132. => filter::(option NodeFilterInterface.t) => NodeIterator.t) = "document.createNodeIterator" [@@bs.send];
  external createNodeIterator: (RootNodeT.t => 133. => filter::(option NodeFilterInterface.t) => NodeIterator.t) = "document.createNodeIterator" [@@bs.send];
  external createNodeIterator: (RootNodeT.t => -1. => filter::(option NodeFilterInterface.t) => NodeIterator.t) = "document.createNodeIterator" [@@bs.send];
  external createTreeWalker: (RootNodeT.t => 1. => filter::(option NodeFilterInterface.t) => entityReferenceExpansion::(option bool) => TreeWalker.t) = "document.createTreeWalker" [@@bs.send];
  external createTreeWalker: (RootNodeT.t => 4. => filter::(option NodeFilterInterface.t) => entityReferenceExpansion::(option bool) => TreeWalker.t) = "document.createTreeWalker" [@@bs.send];
  external createTreeWalker: (RootNodeT.t => 5. => filter::(option NodeFilterInterface.t) => entityReferenceExpansion::(option bool) => TreeWalker.t) = "document.createTreeWalker" [@@bs.send];
  external createTreeWalker: (RootNodeT.t => 128. => filter::(option NodeFilterInterface.t) => entityReferenceExpansion::(option bool) => TreeWalker.t) = "document.createTreeWalker" [@@bs.send];
  external createTreeWalker: (RootNodeT.t => 129. => filter::(option NodeFilterInterface.t) => entityReferenceExpansion::(option bool) => TreeWalker.t) = "document.createTreeWalker" [@@bs.send];
  external createTreeWalker: (RootNodeT.t => 132. => filter::(option NodeFilterInterface.t) => entityReferenceExpansion::(option bool) => TreeWalker.t) = "document.createTreeWalker" [@@bs.send];
  external createTreeWalker: (RootNodeT.t => 133. => filter::(option NodeFilterInterface.t) => entityReferenceExpansion::(option bool) => TreeWalker.t) = "document.createTreeWalker" [@@bs.send];
  external createTreeWalker: (RootNodeT.t => -1. => filter::(option NodeFilterInterface.t) => entityReferenceExpansion::(option bool) => TreeWalker.t) = "document.createTreeWalker" [@@bs.send];
  external createNodeIterator: (RootNodeT.t => float => filter::(option NodeFilterInterface.t) => NodeIterator.t) = "document.createNodeIterator" [@@bs.send];
  external createTreeWalker: (RootNodeT.t => float => filter::(option NodeFilterInterface.t) => entityReferenceExpansion::(option bool) => TreeWalker.t) = "document.createTreeWalker" [@@bs.send];
  external createNodeIterator: (RootNodeT.t => unit => NodeIterator.t) = "document.createNodeIterator" [@@bs.send];
  external createTreeWalker: (RootNodeT.t => unit => TreeWalker.t) = "document.createTreeWalker" [@@bs.send];
};
let module DOMTokenList = {
  type t;
  external create: unit => t = "DOMTokenList" [@@bs.new]; 
  external length: t => float = "" [@@bs.get];
  external item: t => (float => string) = "" [@@bs.send];
  external contains: t => (string => bool) = "" [@@bs.send];
  external add: t => (string => unit) = "" [@@bs.send];
  external remove: t => (string => unit) = "" [@@bs.send];
  external toggle: t => (string => bool) = "" [@@bs.send];
};
let module Element = {
  type t;
  external create: unit => t = "Element" [@@bs.new]; 
  external attributes: t => NamedNodeMap.t = "" [@@bs.get];
  external childElementCount: t => float = "" [@@bs.get];
  external children: t => HTMLCollection.t = "" [@@bs.get];
  external classList: t => DOMTokenList.t = "" [@@bs.get];
  external className: t => string = "" [@@bs.get];
  external clientHeight: t => float = "" [@@bs.get];
  external clientLeft: t => float = "" [@@bs.get];
  external clientTop: t => float = "" [@@bs.get];
  external clientWidth: t => float = "" [@@bs.get];
  external firstElementChild: t => TODO = "" [@@bs.get];
  external id: t => string = "" [@@bs.get];
  external innerHTML: t => string = "" [@@bs.get];
  external lastElementChild: t => TODO = "" [@@bs.get];
  external localName: t => string = "" [@@bs.get];
  external namespaceURI: t => TODO = "" [@@bs.get];
  external nextElementSibling: t => TODO = "" [@@bs.get];
  external outerHTML: t => string = "" [@@bs.get];
  external prefix: t => string = "" [@@bs.get];
  external previousElementSibling: t => TODO = "" [@@bs.get];
  external scrollHeight: t => float = "" [@@bs.get];
  external scrollLeft: t => float = "" [@@bs.get];
  external scrollTop: t => float = "" [@@bs.get];
  external scrollWidth: t => float = "" [@@bs.get];
  external tagName: t => string = "" [@@bs.get];
  external closest: t => (string => TODO) = "" [@@bs.send];
  external dispatchEvent: t => (Event.t => bool) = "" [@@bs.send];
  external getAttribute: t => (name::(option string) => string) = "" [@@bs.send];
  external getAttributeNS: t => (string => string => string) = "" [@@bs.send];
  external getAttributeNode: t => (string => Attr.t) = "" [@@bs.send];
  external getAttributeNodeNS: t => (string => string => Attr.t) = "" [@@bs.send];
  external getBoundingClientRect: t => (unit => ClientRect.t) = "" [@@bs.send];
  external getClientRects: t => (unit => TODO) = "" [@@bs.send];
  external getElementsByClassName: t => (string => HTMLCollection.t) = "" [@@bs.send];
  external getElementsByTagName: t => ("a" => HTMLCollection.t) = "" [@@bs.send];
  external getElementsByTagName: t => ("audio" => HTMLCollection.t) = "" [@@bs.send];
  external getElementsByTagName: t => ("button" => HTMLCollection.t) = "" [@@bs.send];
  external getElementsByTagName: t => ("canvas" => HTMLCollection.t) = "" [@@bs.send];
  external getElementsByTagName: t => ("div" => HTMLCollection.t) = "" [@@bs.send];
  external getElementsByTagName: t => ("form" => HTMLCollection.t) = "" [@@bs.send];
  external getElementsByTagName: t => ("iframe" => HTMLCollection.t) = "" [@@bs.send];
  external getElementsByTagName: t => ("img" => HTMLCollection.t) = "" [@@bs.send];
  external getElementsByTagName: t => ("input" => HTMLCollection.t) = "" [@@bs.send];
  external getElementsByTagName: t => ("label" => HTMLCollection.t) = "" [@@bs.send];
  external getElementsByTagName: t => ("link" => HTMLCollection.t) = "" [@@bs.send];
  external getElementsByTagName: t => ("media" => HTMLCollection.t) = "" [@@bs.send];
  external getElementsByTagName: t => ("option" => HTMLCollection.t) = "" [@@bs.send];
  external getElementsByTagName: t => ("p" => HTMLCollection.t) = "" [@@bs.send];
  external getElementsByTagName: t => ("script" => HTMLCollection.t) = "" [@@bs.send];
  external getElementsByTagName: t => ("select" => HTMLCollection.t) = "" [@@bs.send];
  external getElementsByTagName: t => ("source" => HTMLCollection.t) = "" [@@bs.send];
  external getElementsByTagName: t => ("span" => HTMLCollection.t) = "" [@@bs.send];
  external getElementsByTagName: t => ("style" => HTMLCollection.t) = "" [@@bs.send];
  external getElementsByTagName: t => ("textarea" => HTMLCollection.t) = "" [@@bs.send];
  external getElementsByTagName: t => ("video" => HTMLCollection.t) = "" [@@bs.send];
  external getElementsByTagName: t => ("tr" => HTMLCollection.t) = "" [@@bs.send];
  external getElementsByTagName: t => (TODO => HTMLCollection.t) = "" [@@bs.send];
  external getElementsByTagName: t => (string => HTMLCollection.t) = "" [@@bs.send];
  external getElementsByTagNameNS: t => (string => "a" => HTMLCollection.t) = "" [@@bs.send];
  external getElementsByTagNameNS: t => (string => "audio" => HTMLCollection.t) = "" [@@bs.send];
  external getElementsByTagNameNS: t => (string => "button" => HTMLCollection.t) = "" [@@bs.send];
  external getElementsByTagNameNS: t => (string => "canvas" => HTMLCollection.t) = "" [@@bs.send];
  external getElementsByTagNameNS: t => (string => "div" => HTMLCollection.t) = "" [@@bs.send];
  external getElementsByTagNameNS: t => (string => "form" => HTMLCollection.t) = "" [@@bs.send];
  external getElementsByTagNameNS: t => (string => "iframe" => HTMLCollection.t) = "" [@@bs.send];
  external getElementsByTagNameNS: t => (string => "img" => HTMLCollection.t) = "" [@@bs.send];
  external getElementsByTagNameNS: t => (string => "input" => HTMLCollection.t) = "" [@@bs.send];
  external getElementsByTagNameNS: t => (string => "label" => HTMLCollection.t) = "" [@@bs.send];
  external getElementsByTagNameNS: t => (string => "link" => HTMLCollection.t) = "" [@@bs.send];
  external getElementsByTagNameNS: t => (string => "media" => HTMLCollection.t) = "" [@@bs.send];
  external getElementsByTagNameNS: t => (string => "option" => HTMLCollection.t) = "" [@@bs.send];
  external getElementsByTagNameNS: t => (string => "p" => HTMLCollection.t) = "" [@@bs.send];
  external getElementsByTagNameNS: t => (string => "script" => HTMLCollection.t) = "" [@@bs.send];
  external getElementsByTagNameNS: t => (string => "select" => HTMLCollection.t) = "" [@@bs.send];
  external getElementsByTagNameNS: t => (string => "source" => HTMLCollection.t) = "" [@@bs.send];
  external getElementsByTagNameNS: t => (string => "span" => HTMLCollection.t) = "" [@@bs.send];
  external getElementsByTagNameNS: t => (string => "style" => HTMLCollection.t) = "" [@@bs.send];
  external getElementsByTagNameNS: t => (string => "textarea" => HTMLCollection.t) = "" [@@bs.send];
  external getElementsByTagNameNS: t => (string => "video" => HTMLCollection.t) = "" [@@bs.send];
  external getElementsByTagNameNS: t => (string => "tr" => HTMLCollection.t) = "" [@@bs.send];
  external getElementsByTagNameNS: t => (string => TODO => HTMLCollection.t) = "" [@@bs.send];
  external getElementsByTagNameNS: t => (string => string => HTMLCollection.t) = "" [@@bs.send];
  external hasAttribute: t => (string => bool) = "" [@@bs.send];
  external hasAttributeNS: t => (string => string => bool) = "" [@@bs.send];
  external insertAdjacentElement: t => (TODO => Element.t => unit) = "" [@@bs.send];
  external insertAdjacentHTML: t => (TODO => string => unit) = "" [@@bs.send];
  external insertAdjacentText: t => (TODO => string => unit) = "" [@@bs.send];
  external matches: t => (string => bool) = "" [@@bs.send];
  external querySelector: t => (string => HTMLElement.t) = "" [@@bs.send];
  external querySelectorAll: t => (string => NodeList.t) = "" [@@bs.send];
  external releasePointerCapture: t => (string => unit) = "" [@@bs.send];
  external remove: t => (unit => unit) = "" [@@bs.send];
  external removeAttribute: t => (name::(option string) => unit) = "" [@@bs.send];
  external removeAttributeNode: t => (Attr.t => Attr.t) = "" [@@bs.send];
  external removeAttributeNS: t => (string => string => unit) = "" [@@bs.send];
  external requestFullscren: t => (unit => unit) = "" [@@bs.send];
  external requestPointerLock: t => (unit => unit) = "" [@@bs.send];
  external scrollIntoView: t => (arg::(option TODO) => unit) = "" [@@bs.send];
  external setAttribute: t => (name::(option string) => value::(option string) => unit) = "" [@@bs.send];
  external setAttributeNS: t => (string => string => string => unit) = "" [@@bs.send];
  external setAttributeNode: t => (Attr.t => Attr.t) = "" [@@bs.send];
  external setAttributeNodeNS: t => (Attr.t => Attr.t) = "" [@@bs.send];
  external setPointerCapture: t => (string => unit) = "" [@@bs.send];
};
let module HTMLElement = {
  type t;
  external create: unit => t = "HTMLElement" [@@bs.new]; 
  external blur: t => (unit => unit) = "" [@@bs.send];
  external click: t => (unit => unit) = "" [@@bs.send];
  external focus: t => (unit => unit) = "" [@@bs.send];
  external getBoundingClientRect: t => (unit => ClientRect.t) = "" [@@bs.send];
  external forceSpellcheck: t => (unit => unit) = "" [@@bs.send];
  external accessKey: t => string = "" [@@bs.get];
  external accessKeyLabel: t => string = "" [@@bs.get];
  external className: t => string = "" [@@bs.get];
  external contentEditable: t => string = "" [@@bs.get];
  external contextMenu: t => TODO = "" [@@bs.get];
  let module Dataset = { 
};
  external dir: t => TODO = "" [@@bs.get];
  external draggable: t => bool = "" [@@bs.get];
  external dropzone: t => 'a = "" [@@bs.get];
  external hidden: t => bool = "" [@@bs.get];
  external id: t => string = "" [@@bs.get];
  external innerHTML: t => string = "" [@@bs.get];
  external isContentEditable: t => bool = "" [@@bs.get];
  external itemProp: t => 'a = "" [@@bs.get];
  external itemScope: t => bool = "" [@@bs.get];
  external itemType: t => 'a = "" [@@bs.get];
  external itemValue: t => Object.t = "" [@@bs.get];
  external lang: t => string = "" [@@bs.get];
  external offsetHeight: t => float = "" [@@bs.get];
  external offsetLeft: t => float = "" [@@bs.get];
  external offsetParent: t => Element.t = "" [@@bs.get];
  external offsetTop: t => float = "" [@@bs.get];
  external offsetWidth: t => float = "" [@@bs.get];
  external onabort: t => TODO = "" [@@bs.get];
  external onblur: t => TODO = "" [@@bs.get];
  external oncancel: t => TODO = "" [@@bs.get];
  external oncanplay: t => TODO = "" [@@bs.get];
  external oncanplaythrough: t => TODO = "" [@@bs.get];
  external onchange: t => TODO = "" [@@bs.get];
  external onclick: t => TODO = "" [@@bs.get];
  external oncuechange: t => TODO = "" [@@bs.get];
  external ondblclick: t => TODO = "" [@@bs.get];
  external ondurationchange: t => TODO = "" [@@bs.get];
  external onemptied: t => TODO = "" [@@bs.get];
  external onended: t => TODO = "" [@@bs.get];
  external onerror: t => TODO = "" [@@bs.get];
  external onfocus: t => TODO = "" [@@bs.get];
  external oninput: t => TODO = "" [@@bs.get];
  external oninvalid: t => TODO = "" [@@bs.get];
  external onkeydown: t => TODO = "" [@@bs.get];
  external onkeypress: t => TODO = "" [@@bs.get];
  external onkeyup: t => TODO = "" [@@bs.get];
  external onload: t => TODO = "" [@@bs.get];
  external onloadeddata: t => TODO = "" [@@bs.get];
  external onloadedmetadata: t => TODO = "" [@@bs.get];
  external onloadstart: t => TODO = "" [@@bs.get];
  external onmousedown: t => TODO = "" [@@bs.get];
  external onmouseenter: t => TODO = "" [@@bs.get];
  external onmouseleave: t => TODO = "" [@@bs.get];
  external onmousemove: t => TODO = "" [@@bs.get];
  external onmouseout: t => TODO = "" [@@bs.get];
  external onmouseover: t => TODO = "" [@@bs.get];
  external onmouseup: t => TODO = "" [@@bs.get];
  external onmousewheel: t => TODO = "" [@@bs.get];
  external onpause: t => TODO = "" [@@bs.get];
  external onplay: t => TODO = "" [@@bs.get];
  external onplaying: t => TODO = "" [@@bs.get];
  external onprogress: t => TODO = "" [@@bs.get];
  external onratechange: t => TODO = "" [@@bs.get];
  external onreadystatechange: t => TODO = "" [@@bs.get];
  external onreset: t => TODO = "" [@@bs.get];
  external onresize: t => TODO = "" [@@bs.get];
  external onscroll: t => TODO = "" [@@bs.get];
  external onseeked: t => TODO = "" [@@bs.get];
  external onseeking: t => TODO = "" [@@bs.get];
  external onselect: t => TODO = "" [@@bs.get];
  external onshow: t => TODO = "" [@@bs.get];
  external onstalled: t => TODO = "" [@@bs.get];
  external onsubmit: t => TODO = "" [@@bs.get];
  external onsuspend: t => TODO = "" [@@bs.get];
  external ontimeupdate: t => TODO = "" [@@bs.get];
  external ontoggle: t => TODO = "" [@@bs.get];
  external onvolumechange: t => TODO = "" [@@bs.get];
  external onwaiting: t => TODO = "" [@@bs.get];
  external properties: t => 'a = "" [@@bs.get];
  external spellcheck: t => bool = "" [@@bs.get];
  external style: t => CSSStyleDeclaration.t = "" [@@bs.get];
  external tabIndex: t => float = "" [@@bs.get];
  external title: t => string = "" [@@bs.get];
  external translate: t => bool = "" [@@bs.get];
};
let module HTMLTableCellElement = {
  type t;
  external create: unit => t = "HTMLTableCellElement" [@@bs.new]; 
  external colSpan: t => float = "" [@@bs.get];
  external rowSpan: t => float = "" [@@bs.get];
  external cellIndex: t => float = "" [@@bs.get];
};
let module HTMLTableRowElement = {
  type t;
  external create: unit => t = "HTMLTableRowElement" [@@bs.new]; 
  external align: t => TODO = "" [@@bs.get];
  external rowIndex: t => float = "" [@@bs.get];
  external deleteCell: t => (float => unit) = "" [@@bs.send];
  external insertCell: t => (float => HTMLTableCellElement.t) = "" [@@bs.send];
};
let module HTMLMenuElement = {
  type t;
  external create: unit => t = "HTMLMenuElement" [@@bs.new]; 
  external getCompact: t => (unit => bool) = "" [@@bs.send];
  external setCompact: t => (bool => unit) = "" [@@bs.send];
};
let module HTMLBaseElement = {
  type t;
  external create: unit => t = "HTMLBaseElement" [@@bs.new]; 
  external href: t => string = "" [@@bs.get];
  external target: t => string = "" [@@bs.get];
};
let module CanvasGradient = {
  type t;
  external create: unit => t = "CanvasGradient" [@@bs.new]; 
  external addColorStop: t => (float => string => unit) = "" [@@bs.send];
};
let module CanvasPattern = {
  type t;
  external create: unit => t = "CanvasPattern" [@@bs.new]; 
  external setTransform: t => (SVGMatrix.t => unit) = "" [@@bs.send];
};
let module ImageBitmap = {
  type t;
  external create: unit => t = "ImageBitmap" [@@bs.new]; 
  external close: t => (unit => unit) = "" [@@bs.send];
  external width: t => float = "" [@@bs.get];
  external height: t => float = "" [@@bs.get];
};
type TODO;
type TODO;
let module HitRegionOptions = {
  type t;
  external create: unit => t = "HitRegionOptions" [@@bs.new]; 
  external path: t => Path2D.t = "" [@@bs.get];
  external fillRule: t => CanvasFillRule.t = "" [@@bs.get];
  external id: t => string = "" [@@bs.get];
  external parentID: t => string = "" [@@bs.get];
  external cursor: t => string = "" [@@bs.get];
  external control: t => Element.t = "" [@@bs.get];
  external label: t => TODO = "" [@@bs.get];
  external role: t => TODO = "" [@@bs.get];
};
let module CanvasDrawingStyles = {
  type t;
  external create: unit => t = "CanvasDrawingStyles" [@@bs.new]; 
  external lineWidth: t => float = "" [@@bs.get];
  external lineCap: t => string = "" [@@bs.get];
  external lineJoin: t => string = "" [@@bs.get];
  external miterLimit: t => float = "" [@@bs.get];
  external setLineDash: t => (array float => unit) = "" [@@bs.send];
  external getLineDash: t => (unit => array float) = "" [@@bs.send];
  external lineDashOffset: t => float = "" [@@bs.get];
  external font: t => string = "" [@@bs.get];
  external textAlign: t => string = "" [@@bs.get];
  external textBaseline: t => string = "" [@@bs.get];
  external direction: t => string = "" [@@bs.get];
};
let module SVGMatrix = {
  type t;
  external create: unit => t = "SVGMatrix" [@@bs.new]; 
  external getComponent: t => (float => float) = "" [@@bs.send];
  external mMultiply: t => (SVGMatrix.t => SVGMatrix.t) = "" [@@bs.send];
  external inverse: t => (unit => SVGMatrix.t) = "" [@@bs.send];
  external mTranslate: t => (float => float => SVGMatrix.t) = "" [@@bs.send];
  external mScale: t => (float => SVGMatrix.t) = "" [@@bs.send];
  external mRotate: t => (float => SVGMatrix.t) = "" [@@bs.send];
};
let module TextMetrics = {
  type t;
  external create: unit => t = "TextMetrics" [@@bs.new]; 
  external width: t => float = "" [@@bs.get];
  external actualBoundingBoxLeft: t => float = "" [@@bs.get];
  external actualBoundingBoxRight: t => float = "" [@@bs.get];
  external fontBoundingBoxAscent: t => float = "" [@@bs.get];
  external fontBoundingBoxDescent: t => float = "" [@@bs.get];
  external actualBoundingBoxAscent: t => float = "" [@@bs.get];
  external actualBoundingBoxDescent: t => float = "" [@@bs.get];
  external emHeightAscent: t => float = "" [@@bs.get];
  external emHeightDescent: t => float = "" [@@bs.get];
  external hangingBaseline: t => float = "" [@@bs.get];
  external alphabeticBaseline: t => float = "" [@@bs.get];
  external ideographicBaseline: t => float = "" [@@bs.get];
};
let module Path2D = {
  type t;
  external create: unit => t = "Path2D" [@@bs.new]; 
  external addPath: t => (Path2D.t => transformation::(option TODO) => unit) = "" [@@bs.send];
  external addPathByStrokingPath: t => (Path2D.t => CanvasDrawingStyles.t => transformation::(option TODO) => unit) = "" [@@bs.send];
  external addText: t => (string => CanvasDrawingStyles.t => TODO => float => float => maxWidth::(option float) => unit) = "" [@@bs.send];
  external addPathByStrokingText: t => (string => CanvasDrawingStyles.t => TODO => float => float => maxWidth::(option float) => unit) = "" [@@bs.send];
  external addText: t => (string => CanvasDrawingStyles.t => TODO => Path2D.t => maxWidth::(option float) => unit) = "" [@@bs.send];
  external addPathByStrokingText: t => (string => CanvasDrawingStyles.t => TODO => Path2D.t => maxWidth::(option float) => unit) = "" [@@bs.send];
  external arc: t => (float => float => float => float => float => anticlockwise::(option bool) => unit) = "" [@@bs.send];
  external arcTo: t => (float => float => float => float => float => unit => unit => unit) = "" [@@bs.send];
  external arcTo: t => (float => float => float => float => float => float => float => unit) = "" [@@bs.send];
  external bezierCurveTo: t => (float => float => float => float => float => float => unit) = "" [@@bs.send];
  external closePath: t => (unit => unit) = "" [@@bs.send];
  external ellipse: t => (float => float => float => float => float => float => float => anticlockwise::(option bool) => unit) = "" [@@bs.send];
  external lineTo: t => (float => float => unit) = "" [@@bs.send];
  external moveTo: t => (float => float => unit) = "" [@@bs.send];
  external quadraticCurveTo: t => (float => float => float => float => unit) = "" [@@bs.send];
  external rect: t => (float => float => float => float => unit) = "" [@@bs.send];
};
let module ImageData = {
  type t;
  external create: unit => t = "ImageData" [@@bs.new]; 
  external width: t => float = "" [@@bs.get];
  external height: t => float = "" [@@bs.get];
  external data: t => Uint8ClampedArray.t = "" [@@bs.get];
};
let module CanvasRenderingContext2D = {
  type t;
  external create: unit => t = "CanvasRenderingContext2D" [@@bs.new]; 
  external canvas: t => HTMLCanvasElement.t = "" [@@bs.get];
  external width: t => float = "" [@@bs.get];
  external height: t => float = "" [@@bs.get];
  external commit: t => (unit => unit) = "" [@@bs.send];
  external save: t => (unit => unit) = "" [@@bs.send];
  external restore: t => (unit => unit) = "" [@@bs.send];
  external currentTransform: t => SVGMatrix.t = "" [@@bs.get];
  external scale: t => (float => float => unit) = "" [@@bs.send];
  external rotate: t => (float => unit) = "" [@@bs.send];
  external translate: t => (float => float => unit) = "" [@@bs.send];
  external transform: t => (float => float => float => float => float => float => unit) = "" [@@bs.send];
  external setTransform: t => (float => float => float => float => float => float => unit) = "" [@@bs.send];
  external resetTransform: t => (unit => unit) = "" [@@bs.send];
  external globalAlpha: t => float = "" [@@bs.get];
  external globalCompositeOperation: t => string = "" [@@bs.get];
  external imageSmoothingEnabled: t => bool = "" [@@bs.get];
  external strokeStyle: t => TODO = "" [@@bs.get];
  external fillStyle: t => TODO = "" [@@bs.get];
  external createLinearGradient: t => (float => float => float => float => CanvasGradient.t) = "" [@@bs.send];
  external createRadialGradient: t => (float => float => float => float => float => float => CanvasGradient.t) = "" [@@bs.send];
  external createPattern: t => (CanvasImageSource.t => TODO => CanvasPattern.t) = "" [@@bs.send];
  external shadowOffsetX: t => float = "" [@@bs.get];
  external shadowOffsetY: t => float = "" [@@bs.get];
  external shadowBlur: t => float = "" [@@bs.get];
  external shadowColor: t => string = "" [@@bs.get];
  external clearRect: t => (float => float => float => float => unit) = "" [@@bs.send];
  external fillRect: t => (float => float => float => float => unit) = "" [@@bs.send];
  external strokeRect: t => (float => float => float => float => unit) = "" [@@bs.send];
  external beginPath: t => (unit => unit) = "" [@@bs.send];
  external fill: t => (fillRule::(option CanvasFillRule.t) => unit) = "" [@@bs.send];
  external fill: t => (Path2D.t => fillRule::(option CanvasFillRule.t) => unit) = "" [@@bs.send];
  external stroke: t => (unit => unit) = "" [@@bs.send];
  external stroke: t => (Path2D.t => unit) = "" [@@bs.send];
  external drawFocusIfNeeded: t => (Element.t => unit) = "" [@@bs.send];
  external drawFocusIfNeeded: t => (Path2D.t => Element.t => unit) = "" [@@bs.send];
  external scrollPathIntoView: t => (unit => unit) = "" [@@bs.send];
  external scrollPathIntoView: t => (Path2D.t => unit) = "" [@@bs.send];
  external clip: t => (fillRule::(option CanvasFillRule.t) => unit) = "" [@@bs.send];
  external clip: t => (Path2D.t => fillRule::(option CanvasFillRule.t) => unit) = "" [@@bs.send];
  external resetClip: t => (unit => unit) = "" [@@bs.send];
  external isPointInPath: t => (float => float => fillRule::(option CanvasFillRule.t) => bool) = "" [@@bs.send];
  external isPointInPath: t => (Path2D.t => float => float => fillRule::(option CanvasFillRule.t) => bool) = "" [@@bs.send];
  external isPointInStroke: t => (float => float => bool) = "" [@@bs.send];
  external isPointInStroke: t => (Path2D.t => float => float => bool) = "" [@@bs.send];
  external fillText: t => (string => float => float => maxWidth::(option float) => unit) = "" [@@bs.send];
  external strokeText: t => (string => float => float => maxWidth::(option float) => unit) = "" [@@bs.send];
  external measureText: t => (string => TextMetrics.t) = "" [@@bs.send];
  external drawImage: t => (CanvasImageSource.t => float => float => unit) = "" [@@bs.send];
  external drawImage: t => (CanvasImageSource.t => float => float => float => float => unit) = "" [@@bs.send];
  external drawImage: t => (CanvasImageSource.t => float => float => float => float => float => float => float => float => unit) = "" [@@bs.send];
  external addHitRegion: t => (options::(option HitRegionOptions.t) => unit) = "" [@@bs.send];
  external removeHitRegion: t => (string => unit) = "" [@@bs.send];
  external clearHitRegions: t => (unit => unit) = "" [@@bs.send];
  external createImageData: t => (float => float => ImageData.t) = "" [@@bs.send];
  external createImageData: t => (ImageData.t => ImageData.t) = "" [@@bs.send];
  external getImageData: t => (float => float => float => float => ImageData.t) = "" [@@bs.send];
  external putImageData: t => (ImageData.t => float => float => unit) = "" [@@bs.send];
  external putImageData: t => (ImageData.t => float => float => float => float => float => float => unit) = "" [@@bs.send];
  external lineWidth: t => float = "" [@@bs.get];
  external lineCap: t => string = "" [@@bs.get];
  external lineJoin: t => string = "" [@@bs.get];
  external miterLimit: t => float = "" [@@bs.get];
  external setLineDash: t => (array float => unit) = "" [@@bs.send];
  external getLineDash: t => (unit => array float) = "" [@@bs.send];
  external lineDashOffset: t => float = "" [@@bs.get];
  external font: t => string = "" [@@bs.get];
  external textAlign: t => string = "" [@@bs.get];
  external textBaseline: t => string = "" [@@bs.get];
  external direction: t => string = "" [@@bs.get];
  external closePath: t => (unit => unit) = "" [@@bs.send];
  external moveTo: t => (float => float => unit) = "" [@@bs.send];
  external lineTo: t => (float => float => unit) = "" [@@bs.send];
  external quadraticCurveTo: t => (float => float => float => float => unit) = "" [@@bs.send];
  external bezierCurveTo: t => (float => float => float => float => float => float => unit) = "" [@@bs.send];
  external arcTo: t => (float => float => float => float => float => unit) = "" [@@bs.send];
  external arcTo: t => (float => float => float => float => float => float => float => unit) = "" [@@bs.send];
  external rect: t => (float => float => float => float => unit) = "" [@@bs.send];
  external arc: t => (float => float => float => float => float => anticlockwise::(option bool) => unit) = "" [@@bs.send];
  external ellipse: t => (float => float => float => float => float => float => float => anticlockwise::(option bool) => unit) = "" [@@bs.send];
};
let module WebGLRenderingContext = {
  type t;
  external create: unit => t = "WebGLRenderingContext" [@@bs.new]; 
};
type TODO;
let module HTMLCanvasElement = {
  type t;
  external create: unit => t = "HTMLCanvasElement" [@@bs.new]; 
  external width: t => float = "" [@@bs.get];
  external height: t => float = "" [@@bs.get];
  external getContext: t => ("2d" => array 'rest => TODO) = "" [@@bs.send] [@@bs.splice];
  external getContext: t => ("webgl" => array 'rest => TODO) = "" [@@bs.send] [@@bs.splice];
  external getContext: t => (string => array 'rest => TODO) = "" [@@bs.send] [@@bs.splice];
  external toDataURL: t => (type::(option string) => array 'rest => string) = "" [@@bs.send] [@@bs.splice];
  external toBlob: t => ((File.t => unit) => type::(option string) => array 'rest => unit) = "" [@@bs.send] [@@bs.splice];
};
let module HTMLFormElement = {
  type t;
  external create: unit => t = "HTMLFormElement" [@@bs.new]; 
  external acceptCharset: t => string = "" [@@bs.get];
  external action: t => string = "" [@@bs.get];
  external elements: t => HTMLCollection.t = "" [@@bs.get];
  external encoding: t => string = "" [@@bs.get];
  external enctype: t => string = "" [@@bs.get];
  external length: t => float = "" [@@bs.get];
  external method: t => string = "" [@@bs.get];
  external name: t => string = "" [@@bs.get];
  external target: t => string = "" [@@bs.get];
  external checkValidity: t => (unit => bool) = "" [@@bs.send];
  external item: t => (name::(option 'a) => index::(option 'a) => 'a) = "" [@@bs.send];
  external namedItem: t => (string => 'a) = "" [@@bs.send];
  external reset: t => (unit => unit) = "" [@@bs.send];
  external submit: t => (unit => unit) = "" [@@bs.send];
};
let module HTMLIFrameElement = {
  type t;
  external create: unit => t = "HTMLIFrameElement" [@@bs.new]; 
  external allowFullScreen: t => bool = "" [@@bs.get];
  external frameBorder: t => string = "" [@@bs.get];
  external height: t => string = "" [@@bs.get];
  external marginHeight: t => string = "" [@@bs.get];
  external marginWidth: t => string = "" [@@bs.get];
  external name: t => string = "" [@@bs.get];
  external scrolling: t => string = "" [@@bs.get];
  external sandbox: t => DOMTokenList.t = "" [@@bs.get];
  external src: t => string = "" [@@bs.get];
  external srcDoc: t => string = "" [@@bs.get];
  external width: t => string = "" [@@bs.get];
};
let module HTMLImageElement = {
  type t;
  external create: unit => t = "HTMLImageElement" [@@bs.new]; 
  external alt: t => string = "" [@@bs.get];
  external complete: t => bool = "" [@@bs.get];
  external crossOrigin: t => TODO = "" [@@bs.get];
  external currentSrc: t => string = "" [@@bs.get];
  external height: t => float = "" [@@bs.get];
  external isMap: t => bool = "" [@@bs.get];
  external naturalHeight: t => float = "" [@@bs.get];
  external naturalWidth: t => float = "" [@@bs.get];
  external sizes: t => string = "" [@@bs.get];
  external src: t => string = "" [@@bs.get];
  external srcset: t => string = "" [@@bs.get];
  external useMap: t => string = "" [@@bs.get];
  external width: t => float = "" [@@bs.get];
};
let module Image = {
  type t;
  external create: unit => t = "Image" [@@bs.new]; 
  external constructor: t => (width::(option float) => height::(option float) => unit) = "" [@@bs.send];
};
let module MediaError = {
  type t;
  external create: unit => t = "MediaError" [@@bs.new]; 
  external _MEDIA_ERR_ABORTED: t => float = "" [@@bs.get];
  external _MEDIA_ERR_NETWORK: t => float = "" [@@bs.get];
  external _MEDIA_ERR_DECODE: t => float = "" [@@bs.get];
  external _MEDIA_ERR_SRC_NOT_SUPPORTED: t => float = "" [@@bs.get];
  external code: t => float = "" [@@bs.get];
};
let module TimeRanges = {
  type t;
  external create: unit => t = "TimeRanges" [@@bs.new]; 
  external length: t => float = "" [@@bs.get];
  external start: t => (float => float) = "" [@@bs.send];
  external _end: t => (float => float) = "" [@@bs.send];
};
let module AudioTrack = {
  type t;
  external create: unit => t = "AudioTrack" [@@bs.new]; 
  external id: t => string = "" [@@bs.get];
  external kind: t => string = "" [@@bs.get];
  external label: t => string = "" [@@bs.get];
  external language: t => string = "" [@@bs.get];
  external enabled: t => bool = "" [@@bs.get];
};
let module AudioTrackList = {
  type t;
  external create: unit => t = "AudioTrackList" [@@bs.new]; 
  external length: t => float = "" [@@bs.get];
  external getTrackById: t => (string => TODO) = "" [@@bs.send];
  external onchange: t => ('a => 'a) = "" [@@bs.get];
  external onaddtrack: t => ('a => 'a) = "" [@@bs.get];
  external onremovetrack: t => ('a => 'a) = "" [@@bs.get];
};
let module VideoTrack = {
  type t;
  external create: unit => t = "VideoTrack" [@@bs.new]; 
  external id: t => string = "" [@@bs.get];
  external kind: t => string = "" [@@bs.get];
  external label: t => string = "" [@@bs.get];
  external language: t => string = "" [@@bs.get];
  external selected: t => bool = "" [@@bs.get];
};
let module VideoTrackList = {
  type t;
  external create: unit => t = "VideoTrackList" [@@bs.new]; 
  external length: t => float = "" [@@bs.get];
  external getTrackById: t => (string => TODO) = "" [@@bs.send];
  external selectedIndex: t => float = "" [@@bs.get];
  external onchange: t => ('a => 'a) = "" [@@bs.get];
  external onaddtrack: t => ('a => 'a) = "" [@@bs.get];
  external onremovetrack: t => ('a => 'a) = "" [@@bs.get];
};
let module TextTrackCue = {
  type t;
  external create: unit => t = "TextTrackCue" [@@bs.new]; 
  external constructor: t => (float => float => string => unit) = "" [@@bs.send];
  external track: t => TextTrack.t = "" [@@bs.get];
  external id: t => string = "" [@@bs.get];
  external startTime: t => float = "" [@@bs.get];
  external endTime: t => float = "" [@@bs.get];
  external pauseOnExit: t => bool = "" [@@bs.get];
  external vertical: t => string = "" [@@bs.get];
  external snapToLines: t => bool = "" [@@bs.get];
  external lines: t => float = "" [@@bs.get];
  external position: t => float = "" [@@bs.get];
  external size: t => float = "" [@@bs.get];
  external align: t => string = "" [@@bs.get];
  external text: t => string = "" [@@bs.get];
  external getCueAsHTML: t => (unit => Node.t) = "" [@@bs.send];
  external onenter: t => ('a => 'a) = "" [@@bs.get];
  external onexit: t => ('a => 'a) = "" [@@bs.get];
};
let module TextTrackCueList = {
  type t;
  external create: unit => t = "TextTrackCueList" [@@bs.new]; 
  external length: t => float = "" [@@bs.get];
  external getCueById: t => (string => TODO) = "" [@@bs.send];
};
let module TextTrack = {
  type t;
  external create: unit => t = "TextTrack" [@@bs.new]; 
  external kind: t => string = "" [@@bs.get];
  external label: t => string = "" [@@bs.get];
  external language: t => string = "" [@@bs.get];
  external mode: t => string = "" [@@bs.get];
  external cues: t => TextTrackCueList.t = "" [@@bs.get];
  external activeCues: t => TextTrackCueList.t = "" [@@bs.get];
  external addCue: t => (TextTrackCue.t => unit) = "" [@@bs.send];
  external removeCue: t => (TextTrackCue.t => unit) = "" [@@bs.send];
  external oncuechange: t => ('a => 'a) = "" [@@bs.get];
};
let module TextTrackList = {
  type t;
  external create: unit => t = "TextTrackList" [@@bs.new]; 
  external length: t => float = "" [@@bs.get];
  external onaddtrack: t => ('a => 'a) = "" [@@bs.get];
  external onremovetrack: t => ('a => 'a) = "" [@@bs.get];
};
let module HTMLMediaElement = {
  type t;
  external create: unit => t = "HTMLMediaElement" [@@bs.new]; 
  external error: t => TODO = "" [@@bs.get];
  external src: t => string = "" [@@bs.get];
  external srcObject: t => TODO = "" [@@bs.get];
  external currentSrc: t => string = "" [@@bs.get];
  external crossOrigin: t => TODO = "" [@@bs.get];
  external _NETWORK_EMPTY: t => float = "" [@@bs.get];
  external _NETWORK_IDLE: t => float = "" [@@bs.get];
  external _NETWORK_LOADING: t => float = "" [@@bs.get];
  external _NETWORK_NO_SOURCE: t => float = "" [@@bs.get];
  external networkState: t => float = "" [@@bs.get];
  external preload: t => string = "" [@@bs.get];
  external buffered: t => TimeRanges.t = "" [@@bs.get];
  external load: t => (unit => unit) = "" [@@bs.send];
  external canPlayType: t => (string => string) = "" [@@bs.send];
  external _HAVE_NOTHING: t => float = "" [@@bs.get];
  external _HAVE_METADATA: t => float = "" [@@bs.get];
  external _HAVE_CURRENT_DATA: t => float = "" [@@bs.get];
  external _HAVE_FUTURE_DATA: t => float = "" [@@bs.get];
  external _HAVE_ENOUGH_DATA: t => float = "" [@@bs.get];
  external readyState: t => float = "" [@@bs.get];
  external seeking: t => bool = "" [@@bs.get];
  external currentTime: t => float = "" [@@bs.get];
  external duration: t => float = "" [@@bs.get];
  external startDate: t => Date.t = "" [@@bs.get];
  external paused: t => bool = "" [@@bs.get];
  external defaultPlaybackRate: t => float = "" [@@bs.get];
  external playbackRate: t => float = "" [@@bs.get];
  external played: t => TimeRanges.t = "" [@@bs.get];
  external seekable: t => TimeRanges.t = "" [@@bs.get];
  external ended: t => bool = "" [@@bs.get];
  external autoplay: t => bool = "" [@@bs.get];
  external loop: t => bool = "" [@@bs.get];
  external play: t => (unit => unit) = "" [@@bs.send];
  external pause: t => (unit => unit) = "" [@@bs.send];
  external fastSeek: t => (unit => unit) = "" [@@bs.send];
  external mediaGroup: t => string = "" [@@bs.get];
  external controller: t => TODO = "" [@@bs.get];
  external controls: t => bool = "" [@@bs.get];
  external volume: t => float = "" [@@bs.get];
  external muted: t => bool = "" [@@bs.get];
  external defaultMuted: t => bool = "" [@@bs.get];
  external audioTracks: t => AudioTrackList.t = "" [@@bs.get];
  external videoTracks: t => VideoTrackList.t = "" [@@bs.get];
  external textTracks: t => TextTrackList.t = "" [@@bs.get];
  external addTextTrack: t => (string => label::(option string) => language::(option string) => TextTrack.t) = "" [@@bs.send];
};
let module HTMLAudioElement = {
  type t;
  external create: unit => t = "HTMLAudioElement" [@@bs.new]; 
};
let module HTMLVideoElement = {
  type t;
  external create: unit => t = "HTMLVideoElement" [@@bs.new]; 
  external width: t => float = "" [@@bs.get];
  external height: t => float = "" [@@bs.get];
  external videoWidth: t => float = "" [@@bs.get];
  external videoHeight: t => float = "" [@@bs.get];
  external poster: t => string = "" [@@bs.get];
};
let module HTMLSourceElement = {
  type t;
  external create: unit => t = "HTMLSourceElement" [@@bs.new]; 
  external src: t => string = "" [@@bs.get];
  external _type: t => string = "" [@@bs.get];
  external srcset: t => string = "" [@@bs.get];
  external sizes: t => string = "" [@@bs.get];
  external media: t => string = "" [@@bs.get];
};
let module ValidityState = {
  type t;
  external create: unit => t = "ValidityState" [@@bs.new]; 
  external badInput: t => bool = "" [@@bs.get];
  external customError: t => bool = "" [@@bs.get];
  external patternMismatch: t => bool = "" [@@bs.get];
  external rangeOverflow: t => bool = "" [@@bs.get];
  external rangeUnderflow: t => bool = "" [@@bs.get];
  external stepMismatch: t => bool = "" [@@bs.get];
  external tooLong: t => bool = "" [@@bs.get];
  external typeMismatch: t => bool = "" [@@bs.get];
  external valueMissing: t => bool = "" [@@bs.get];
};
type TODO;
type TODO;
let module HTMLInputElement = {
  type t;
  external create: unit => t = "HTMLInputElement" [@@bs.new]; 
  external accept: t => string = "" [@@bs.get];
  external align: t => string = "" [@@bs.get];
  external alt: t => string = "" [@@bs.get];
  external autocomplete: t => string = "" [@@bs.get];
  external autofocus: t => bool = "" [@@bs.get];
  external border: t => string = "" [@@bs.get];
  external checked: t => bool = "" [@@bs.get];
  external complete: t => bool = "" [@@bs.get];
  external defaultChecked: t => bool = "" [@@bs.get];
  external defaultValue: t => string = "" [@@bs.get];
  external dirname: t => string = "" [@@bs.get];
  external disabled: t => bool = "" [@@bs.get];
  external dynsrc: t => string = "" [@@bs.get];
  external files: t => FileList.t = "" [@@bs.get];
  external form: t => TODO = "" [@@bs.get];
  external formAction: t => string = "" [@@bs.get];
  external formEncType: t => string = "" [@@bs.get];
  external formMethod: t => string = "" [@@bs.get];
  external formNoValidate: t => bool = "" [@@bs.get];
  external formTarget: t => string = "" [@@bs.get];
  external height: t => string = "" [@@bs.get];
  external hspace: t => float = "" [@@bs.get];
  external indeterminate: t => bool = "" [@@bs.get];
  external labels: t => NodeList.t = "" [@@bs.get];
  external list: t => TODO = "" [@@bs.get];
  external loop: t => float = "" [@@bs.get];
  external lowsrc: t => string = "" [@@bs.get];
  external max: t => string = "" [@@bs.get];
  external maxLength: t => float = "" [@@bs.get];
  external min: t => string = "" [@@bs.get];
  external multiple: t => bool = "" [@@bs.get];
  external name: t => string = "" [@@bs.get];
  external pattern: t => string = "" [@@bs.get];
  external placeholder: t => string = "" [@@bs.get];
  external readOnly: t => bool = "" [@@bs.get];
  external required: t => bool = "" [@@bs.get];
  external selectionDirection: t => SelectionDirection.t = "" [@@bs.get];
  external selectionEnd: t => float = "" [@@bs.get];
  external selectionStart: t => float = "" [@@bs.get];
  external size: t => float = "" [@@bs.get];
  external src: t => string = "" [@@bs.get];
  external start: t => string = "" [@@bs.get];
  external status: t => bool = "" [@@bs.get];
  external step: t => string = "" [@@bs.get];
  external tabIndex: t => float = "" [@@bs.get];
  external _type: t => string = "" [@@bs.get];
  external useMap: t => string = "" [@@bs.get];
  external validationMessage: t => string = "" [@@bs.get];
  external validity: t => ValidityState.t = "" [@@bs.get];
  external value: t => string = "" [@@bs.get];
  external valueAsDate: t => Date.t = "" [@@bs.get];
  external valueAsNumber: t => float = "" [@@bs.get];
  external vrml: t => string = "" [@@bs.get];
  external vspace: t => float = "" [@@bs.get];
  external width: t => string = "" [@@bs.get];
  external willValidate: t => bool = "" [@@bs.get];
  external blur: t => (unit => unit) = "" [@@bs.send];
  external checkValidity: t => (unit => bool) = "" [@@bs.send];
  external setCustomValidity: t => (string => unit) = "" [@@bs.send];
  external click: t => (unit => unit) = "" [@@bs.send];
  external createTextRange: t => (unit => TextRange.t) = "" [@@bs.send];
  external focus: t => (unit => unit) = "" [@@bs.send];
  external select: t => (unit => unit) = "" [@@bs.send];
  external setRangeText: t => (string => start::(option unit) => end::(option unit) => selectMode::(option unit) => unit) = "" [@@bs.send];
  external setRangeText: t => (string => float => float => selectMode::(option SelectionMode.t) => unit) = "" [@@bs.send];
  external setSelectionRange: t => (float => float => direction::(option SelectionDirection.t) => unit) = "" [@@bs.send];
};
let module HTMLButtonElement = {
  type t;
  external create: unit => t = "HTMLButtonElement" [@@bs.new]; 
  external disabled: t => bool = "" [@@bs.get];
  external form: t => TODO = "" [@@bs.get];
  external name: t => string = "" [@@bs.get];
  external _type: t => string = "" [@@bs.get];
  external value: t => string = "" [@@bs.get];
  external checkValidity: t => (unit => bool) = "" [@@bs.send];
};
let module HTMLTextAreaElement = {
  type t;
  external create: unit => t = "HTMLTextAreaElement" [@@bs.new]; 
  external autofocus: t => bool = "" [@@bs.get];
  external cols: t => float = "" [@@bs.get];
  external dirName: t => string = "" [@@bs.get];
  external disabled: t => bool = "" [@@bs.get];
  external form: t => TODO = "" [@@bs.get];
  external maxLength: t => float = "" [@@bs.get];
  external name: t => string = "" [@@bs.get];
  external placeholder: t => string = "" [@@bs.get];
  external readOnly: t => bool = "" [@@bs.get];
  external required: t => bool = "" [@@bs.get];
  external rows: t => float = "" [@@bs.get];
  external wrap: t => string = "" [@@bs.get];
  external _type: t => string = "" [@@bs.get];
  external defaultValue: t => string = "" [@@bs.get];
  external value: t => string = "" [@@bs.get];
  external textLength: t => float = "" [@@bs.get];
  external willValidate: t => bool = "" [@@bs.get];
  external validity: t => ValidityState.t = "" [@@bs.get];
  external validationMessage: t => string = "" [@@bs.get];
  external checkValidity: t => (unit => bool) = "" [@@bs.send];
  external setCustomValidity: t => (string => unit) = "" [@@bs.send];
  external labels: t => NodeList.t = "" [@@bs.get];
  external select: t => (unit => unit) = "" [@@bs.send];
  external selectionStart: t => float = "" [@@bs.get];
  external selectionEnd: t => float = "" [@@bs.get];
  external selectionDirection: t => SelectionDirection.t = "" [@@bs.get];
  external setSelectionRange: t => (float => float => direction::(option SelectionDirection.t) => unit) = "" [@@bs.send];
};
let module HTMLSelectElement = {
  type t;
  external create: unit => t = "HTMLSelectElement" [@@bs.new]; 
  external disabled: t => bool = "" [@@bs.get];
  external form: t => TODO = "" [@@bs.get];
  external length: t => float = "" [@@bs.get];
  external multiple: t => bool = "" [@@bs.get];
  external name: t => string = "" [@@bs.get];
  external options: t => HTMLOptionsCollection.t = "" [@@bs.get];
  external selectedIndex: t => float = "" [@@bs.get];
  external size: t => float = "" [@@bs.get];
  external _type: t => string = "" [@@bs.get];
  external value: t => string = "" [@@bs.get];
  external add: t => (HTMLElement.t => before::(option HTMLElement.t) => unit) = "" [@@bs.send];
  external checkValidity: t => (unit => bool) = "" [@@bs.send];
  external remove: t => (index::(option float) => unit) = "" [@@bs.send];
};
let module HTMLOptionsCollection = {
  type t;
  external create: unit => t = "HTMLOptionsCollection" [@@bs.new]; 
  external length: t => float = "" [@@bs.get];
  external item: t => (float => Node.t) = "" [@@bs.send];
  external namedItem: t => (string => Node.t) = "" [@@bs.send];
};
let module HTMLOptionElement = {
  type t;
  external create: unit => t = "HTMLOptionElement" [@@bs.new]; 
  external defaultSelected: t => bool = "" [@@bs.get];
  external disabled: t => bool = "" [@@bs.get];
  external form: t => TODO = "" [@@bs.get];
  external index: t => float = "" [@@bs.get];
  external label: t => string = "" [@@bs.get];
  external selected: t => bool = "" [@@bs.get];
  external text: t => string = "" [@@bs.get];
  external value: t => string = "" [@@bs.get];
};
let module HTMLAnchorElement = {
  type t;
  external create: unit => t = "HTMLAnchorElement" [@@bs.new]; 
  external charset: t => string = "" [@@bs.get];
  external coords: t => string = "" [@@bs.get];
  external download: t => string = "" [@@bs.get];
  external hash: t => string = "" [@@bs.get];
  external host: t => string = "" [@@bs.get];
  external hostname: t => string = "" [@@bs.get];
  external href: t => string = "" [@@bs.get];
  external hreflang: t => string = "" [@@bs.get];
  external media: t => string = "" [@@bs.get];
  external name: t => string = "" [@@bs.get];
  external origin: t => string = "" [@@bs.get];
  external password: t => string = "" [@@bs.get];
  external pathname: t => string = "" [@@bs.get];
  external port: t => string = "" [@@bs.get];
  external protocol: t => string = "" [@@bs.get];
  external rel: t => string = "" [@@bs.get];
  external rev: t => string = "" [@@bs.get];
  external search: t => string = "" [@@bs.get];
  external shape: t => string = "" [@@bs.get];
  external target: t => string = "" [@@bs.get];
  external text: t => string = "" [@@bs.get];
  external _type: t => string = "" [@@bs.get];
  external username: t => string = "" [@@bs.get];
};
let module HTMLLabelElement = {
  type t;
  external create: unit => t = "HTMLLabelElement" [@@bs.new]; 
  external form: t => TODO = "" [@@bs.get];
  external htmlFor: t => string = "" [@@bs.get];
  external control: t => TODO = "" [@@bs.get];
};
let module HTMLLinkElement = {
  type t;
  external create: unit => t = "HTMLLinkElement" [@@bs.new]; 
  external crossOrigin: t => TODO = "" [@@bs.get];
  external href: t => string = "" [@@bs.get];
  external hreflang: t => string = "" [@@bs.get];
  external media: t => string = "" [@@bs.get];
  external rel: t => string = "" [@@bs.get];
  external sizes: t => DOMTokenList.t = "" [@@bs.get];
  external _type: t => string = "" [@@bs.get];
};
let module HTMLScriptElement = {
  type t;
  external create: unit => t = "HTMLScriptElement" [@@bs.new]; 
  external async: t => bool = "" [@@bs.get];
  external charset: t => string = "" [@@bs.get];
  external crossOrigin: t => string = "" [@@bs.get];
  external defer: t => bool = "" [@@bs.get];
  external src: t => string = "" [@@bs.get];
  external text: t => string = "" [@@bs.get];
  external _type: t => string = "" [@@bs.get];
};
let module HTMLStyleElement = {
  type t;
  external create: unit => t = "HTMLStyleElement" [@@bs.new]; 
  external disabled: t => bool = "" [@@bs.get];
  external media: t => string = "" [@@bs.get];
  external scoped: t => bool = "" [@@bs.get];
  external sheet: t => TODO = "" [@@bs.get];
  external _type: t => string = "" [@@bs.get];
};
let module HTMLParagraphElement = {
  type t;
  external create: unit => t = "HTMLParagraphElement" [@@bs.new]; 
  external align: t => TODO = "" [@@bs.get];
};
let module HTMLDivElement = {
  type t;
  external create: unit => t = "HTMLDivElement" [@@bs.new]; 
};
let module HTMLSpanElement = {
  type t;
  external create: unit => t = "HTMLSpanElement" [@@bs.new]; 
};
let module HTMLAppletElement = {
  type t;
  external create: unit => t = "HTMLAppletElement" [@@bs.new]; 
};
let module HTMLEmbedElement = {
  type t;
  external create: unit => t = "HTMLEmbedElement" [@@bs.new]; 
};
let module TextRange = {
  type t;
  external create: unit => t = "TextRange" [@@bs.new]; 
  external boundingLeft: t => float = "" [@@bs.get];
  external htmlText: t => string = "" [@@bs.get];
  external offsetLeft: t => float = "" [@@bs.get];
  external boundingWidth: t => float = "" [@@bs.get];
  external boundingHeight: t => float = "" [@@bs.get];
  external boundingTop: t => float = "" [@@bs.get];
  external text: t => string = "" [@@bs.get];
  external offsetTop: t => float = "" [@@bs.get];
  external moveToPoint: t => (float => float => unit) = "" [@@bs.send];
  external queryCommandValue: t => (string => 'a) = "" [@@bs.send];
  external getBookmark: t => (unit => string) = "" [@@bs.send];
  external move: t => (string => count::(option float) => float) = "" [@@bs.send];
  external queryCommandIndeterm: t => (string => bool) = "" [@@bs.send];
  external scrollIntoView: t => (fStart::(option bool) => unit) = "" [@@bs.send];
  external findText: t => (string => count::(option float) => flags::(option float) => bool) = "" [@@bs.send];
  external execCommand: t => (string => showUI::(option bool) => value::(option 'a) => bool) = "" [@@bs.send];
  external getBoundingClientRect: t => (unit => ClientRect.t) = "" [@@bs.send];
  external moveToBookmark: t => (string => bool) = "" [@@bs.send];
  external isEqual: t => (TextRange.t => bool) = "" [@@bs.send];
  external duplicate: t => (unit => TextRange.t) = "" [@@bs.send];
  external collapse: t => (start::(option bool) => unit) = "" [@@bs.send];
  external queryCommandText: t => (string => string) = "" [@@bs.send];
  external select: t => (unit => unit) = "" [@@bs.send];
  external pasteHTML: t => (string => unit) = "" [@@bs.send];
  external inRange: t => (TextRange.t => bool) = "" [@@bs.send];
  external moveEnd: t => (string => count::(option float) => float) = "" [@@bs.send];
  external getClientRects: t => (unit => ClientRectList.t) = "" [@@bs.send];
  external moveStart: t => (string => count::(option float) => float) = "" [@@bs.send];
  external parentElement: t => (unit => Element.t) = "" [@@bs.send];
  external queryCommandState: t => (string => bool) = "" [@@bs.send];
  external compareEndPoints: t => (string => TextRange.t => float) = "" [@@bs.send];
  external execCommandShowHelp: t => (string => bool) = "" [@@bs.send];
  external moveToElementText: t => (Element.t => unit) = "" [@@bs.send];
  external expand: t => (string => bool) = "" [@@bs.send];
  external queryCommandSupported: t => (string => bool) = "" [@@bs.send];
  external setEndPoint: t => (string => TextRange.t => unit) = "" [@@bs.send];
  external queryCommandEnabled: t => (string => bool) = "" [@@bs.send];
};
let module ClientRect = {
  type t;
  external create: unit => t = "ClientRect" [@@bs.new]; 
  external left: t => float = "" [@@bs.get];
  external width: t => float = "" [@@bs.get];
  external right: t => float = "" [@@bs.get];
  external top: t => float = "" [@@bs.get];
  external bottom: t => float = "" [@@bs.get];
  external height: t => float = "" [@@bs.get];
};
let module ClientRectList = {
  type t;
  external create: unit => t = "ClientRectList" [@@bs.new]; 
  external _@@iterator: t => (unit => Iterator.t) = "" [@@bs.send];
  external length: t => float = "" [@@bs.get];
  external item: t => (float => ClientRect.t) = "" [@@bs.send];
};
let module DOMImplementation = {
  type t;
  external create: unit => t = "DOMImplementation" [@@bs.new]; 
  external createDocumentType: t => (string => string => string => DocumentType.t) = "" [@@bs.send];
  external createDocument: t => (string => string => DocumentType.t => Document.t) = "" [@@bs.send];
  external hasFeature: t => (string => version::(option string) => bool) = "" [@@bs.send];
  external createHTMLDocument: t => (title::(option string) => Document.t) = "" [@@bs.send];
};
let module DocumentType = {
  type t;
  external create: unit => t = "DocumentType" [@@bs.new]; 
  external name: t => string = "" [@@bs.get];
  external notations: t => NamedNodeMap.t = "" [@@bs.get];
  external systemId: t => string = "" [@@bs.get];
  external internalSubset: t => string = "" [@@bs.get];
  external entities: t => NamedNodeMap.t = "" [@@bs.get];
  external publicId: t => string = "" [@@bs.get];
};
let module CharacterData = {
  type t;
  external create: unit => t = "CharacterData" [@@bs.new]; 
  external length: t => float = "" [@@bs.get];
  external data: t => string = "" [@@bs.get];
  external deleteData: t => (float => float => unit) = "" [@@bs.send];
  external replaceData: t => (float => float => string => unit) = "" [@@bs.send];
  external appendData: t => (string => unit) = "" [@@bs.send];
  external insertData: t => (float => string => unit) = "" [@@bs.send];
  external substringData: t => (float => float => string) = "" [@@bs.send];
};
let module Text = {
  type t;
  external create: unit => t = "Text" [@@bs.new]; 
  external wholeText: t => string = "" [@@bs.get];
  external splitText: t => (float => Text.t) = "" [@@bs.send];
  external replaceWholeText: t => (string => Text.t) = "" [@@bs.send];
};
let module Comment = {
  type t;
  external create: unit => t = "Comment" [@@bs.new]; 
  external text: t => string = "" [@@bs.get];
};
let module URL = {
  type t;
  external create: unit => t = "URL" [@@bs.new]; 
  external createObjectURL: (Blob.t => string) = "" [@@bs.val];
  external createObjectURL: (MediaSource.t => string) = "" [@@bs.val];
  external createFor: (Blob.t => string) = "" [@@bs.val];
  external revokeObjectURL: (string => unit) = "" [@@bs.val];
  external constructor: t => (string => base::(option TODO) => unit) = "" [@@bs.send];
  external hash: t => string = "" [@@bs.get];
  external host: t => string = "" [@@bs.get];
  external hostname: t => string = "" [@@bs.get];
  external href: t => string = "" [@@bs.get];
  external origin: t => string = "" [@@bs.get];
  external password: t => string = "" [@@bs.get];
  external pathname: t => string = "" [@@bs.get];
  external port: t => string = "" [@@bs.get];
  external protocol: t => string = "" [@@bs.get];
  external search: t => string = "" [@@bs.get];
  external searchParams: t => URLSearchParams.t = "" [@@bs.get];
  external username: t => string = "" [@@bs.get];
};
let module MediaSource = {
  type t;
  external create: unit => t = "MediaSource" [@@bs.new]; 
  external sourceBuffers: t => SourceBufferList.t = "" [@@bs.get];
  external activeSourceBuffers: t => SourceBufferList.t = "" [@@bs.get];
  external readyState: t => TODO = "" [@@bs.get];
  external duration: t => float = "" [@@bs.get];
  external addSourceBuffer: t => (string => SourceBuffer.t) = "" [@@bs.send];
  external removeSourceBuffer: t => (SourceBuffer.t => unit) = "" [@@bs.send];
  external endOfStream: t => (error::(option string) => unit) = "" [@@bs.send];
  external isTypeSupported: (string => bool) = "" [@@bs.val];
};
let module SourceBuffer = {
  type t;
  external create: unit => t = "SourceBuffer" [@@bs.new]; 
  external mode: t => TODO = "" [@@bs.get];
  external updating: t => bool = "" [@@bs.get];
  external buffered: t => TimeRanges.t = "" [@@bs.get];
  external timestampOffset: t => float = "" [@@bs.get];
  external audioTracks: t => AudioTrackList.t = "" [@@bs.get];
  external videoTracks: t => VideoTrackList.t = "" [@@bs.get];
  external textTracks: t => TextTrackList.t = "" [@@bs.get];
  external appendWindowStart: t => float = "" [@@bs.get];
  external appendWindowEnd: t => float = "" [@@bs.get];
  external appendBuffer: t => (TODO => unit) = "" [@@bs.send];
  external abort: t => (unit => unit) = "" [@@bs.send];
  external remove: t => (float => float => unit) = "" [@@bs.send];
  external trackDefaults: t => TrackDefaultList.t = "" [@@bs.get];
};
let module SourceBufferList = {
  type t;
  external create: unit => t = "SourceBufferList" [@@bs.new]; 
  external length: t => float = "" [@@bs.get];
};
let module Storage = {
  type t;
  external create: unit => t = "Storage" [@@bs.new]; 
  external length: t => float = "" [@@bs.get];
  external getItem: t => (string => TODO) = "" [@@bs.send];
  external setItem: t => (string => string => unit) = "" [@@bs.send];
  external clear: t => (unit => unit) = "" [@@bs.send];
  external removeItem: t => (string => unit) = "" [@@bs.send];
  external key: t => (float => TODO) = "" [@@bs.send];
};
let module TrackDefaultList = {
  type t;
  external create: unit => t = "TrackDefaultList" [@@bs.new]; 
  external length: t => float = "" [@@bs.get];
};
let module TrackDefault = {
  type t;
  external create: unit => t = "TrackDefault" [@@bs.new]; 
  external _type: t => TODO = "" [@@bs.get];
  external byteStreamTrackID: t => string = "" [@@bs.get];
  external language: t => string = "" [@@bs.get];
  external label: t => string = "" [@@bs.get];
  external kinds: t => array string = "" [@@bs.get];
};
type TODO;
type TODO;
let module NodeFilter = {
  type t;
  external create: unit => t = "NodeFilter" [@@bs.new]; 
  let _SHOW_ALL = -1.;
  let _SHOW_ELEMENT = 1.;
  let _SHOW_ATTRIBUTE = 2.;
  let _SHOW_TEXT = 4.;
  let _SHOW_CDATA_SECTION = 8.;
  let _SHOW_ENTITY_REFERENCE = 16.;
  let _SHOW_ENTITY = 32.;
  let _SHOW_PROCESSING_INSTRUCTION = 64.;
  let _SHOW_COMMENT = 128.;
  let _SHOW_DOCUMENT = 256.;
  let _SHOW_DOCUMENT_TYPE = 512.;
  let _SHOW_DOCUMENT_FRAGMENT = 1024.;
  let _SHOW_NOTATION = 2048.;
  let _FILTER_ACCEPT = 1.;
  let _FILTER_REJECT = 2.;
  let _FILTER_SKIP = 3.;
  external acceptNode: t => NodeFilterCallback.t = "" [@@bs.get];
};
let module NodeIterator = {
  type t;
  external create: unit => t = "NodeIterator" [@@bs.new]; 
  external root: t => RootNodeT.t = "" [@@bs.get];
  external whatToShow: t => float = "" [@@bs.get];
  external filter: t => NodeFilter.t = "" [@@bs.get];
  external expandEntityReferences: t => bool = "" [@@bs.get];
  external referenceNode: t => TODO = "" [@@bs.get];
  external pointerBeforeReferenceNode: t => bool = "" [@@bs.get];
  external detach: t => (unit => unit) = "" [@@bs.send];
  external previousNode: t => (unit => TODO) = "" [@@bs.send];
  external nextNode: t => (unit => TODO) = "" [@@bs.send];
};
let module TreeWalker = {
  type t;
  external create: unit => t = "TreeWalker" [@@bs.new]; 
  external root: t => RootNodeT.t = "" [@@bs.get];
  external whatToShow: t => float = "" [@@bs.get];
  external filter: t => NodeFilter.t = "" [@@bs.get];
  external expandEntityReferences: t => bool = "" [@@bs.get];
  external currentNode: t => TODO = "" [@@bs.get];
  external parentNode: t => (unit => TODO) = "" [@@bs.send];
  external firstChild: t => (unit => TODO) = "" [@@bs.send];
  external lastChild: t => (unit => TODO) = "" [@@bs.send];
  external previousSibling: t => (unit => TODO) = "" [@@bs.send];
  external nextSibling: t => (unit => TODO) = "" [@@bs.send];
  external previousNode: t => (unit => TODO) = "" [@@bs.send];
  external nextNode: t => (unit => TODO) = "" [@@bs.send];
};
type TODO;
external alert: (message::(option 'a) => unit) = "alert" [@@bs.val];
external prompt: (message::(option 'a) => value::(option 'a) => string) = "prompt" [@@bs.val];
external close: (unit => unit) = "close" [@@bs.val];
external confirm: (message::(option string) => bool) = "confirm" [@@bs.val];
let module EventInstance = {
  external constructor: (string => eventInitDict::(option Event$Init.t) => unit) = "event.constructor" [@@bs.send];
  external bubbles: bool = "event.bubbles" [@@bs.val];
  external cancelable: bool = "event.cancelable" [@@bs.val];
  external currentTarget: EventTarget.t = "event.currentTarget" [@@bs.val];
  external defaultPrevented: bool = "event.defaultPrevented" [@@bs.val];
  external eventPhase: float = "event.eventPhase" [@@bs.val];
  external isTrusted: bool = "event.isTrusted" [@@bs.val];
  external srcElement: Element.t = "event.srcElement" [@@bs.val];
  external target: EventTarget.t = "event.target" [@@bs.val];
  external timeStamp: float = "event.timeStamp" [@@bs.val];
  external _type: string = "event.type" [@@bs.val];
  external preventDefault: (unit => unit) = "event.preventDefault" [@@bs.send];
  external stopImmediatePropagation: (unit => unit) = "event.stopImmediatePropagation" [@@bs.send];
  external stopPropagation: (unit => unit) = "event.stopPropagation" [@@bs.send];
  external _AT_TARGET: float = "event.AT_TARGET" [@@bs.val];
  external _BUBBLING_PHASE: float = "event.BUBBLING_PHASE" [@@bs.val];
  external _CAPTURING_PHASE: float = "event.CAPTURING_PHASE" [@@bs.val];
  external initEvent: (string => bool => bool => unit) = "event.initEvent" [@@bs.send];
};
external getComputedStyle: (Element.t => pseudoElt::(option string) => 'a) = "getComputedStyle" [@@bs.val];
external requestAnimationFrame: ((float => unit) => float) = "requestAnimationFrame" [@@bs.val];
external cancelAnimationFrame: (float => unit) = "cancelAnimationFrame" [@@bs.val];
let module LocalStorageInstance = {
  external length: float = "localStorage.length" [@@bs.val];
  external getItem: (string => TODO) = "localStorage.getItem" [@@bs.send];
  external setItem: (string => string => unit) = "localStorage.setItem" [@@bs.send];
  external clear: (unit => unit) = "localStorage.clear" [@@bs.send];
  external removeItem: (string => unit) = "localStorage.removeItem" [@@bs.send];
  external key: (float => TODO) = "localStorage.key" [@@bs.send];
};
external focus: (unit => unit) = "focus" [@@bs.val];
external onfocus: (Event.t => 'a) = "onfocus" [@@bs.val];
external onmessage: (MessageEvent.t => 'a) = "onmessage" [@@bs.val];
external open: (url::(option string) => target::(option string) => features::(option string) => replace::(option bool) => 'a) = "open" [@@bs.val];
external parent: WindowProxy.t = "parent" [@@bs.val];
external print: (unit => unit) = "print" [@@bs.val];
external self: 'a = "self" [@@bs.val];
let module SessionStorageInstance = {
  external length: float = "sessionStorage.length" [@@bs.val];
  external getItem: (string => TODO) = "sessionStorage.getItem" [@@bs.send];
  external setItem: (string => string => unit) = "sessionStorage.setItem" [@@bs.send];
  external clear: (unit => unit) = "sessionStorage.clear" [@@bs.send];
  external removeItem: (string => unit) = "sessionStorage.removeItem" [@@bs.send];
  external key: (float => TODO) = "sessionStorage.key" [@@bs.send];
};
external status: string = "status" [@@bs.val];
external top: WindowProxy.t = "top" [@@bs.val];
external getSelection: (unit => TODO) = "getSelection" [@@bs.val];
