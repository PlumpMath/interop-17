let module Blob = {
  type t;
  external constructor: t => blobParts::(option Array) => options::(option TODO) => unit = "" [@@bs.send];
  external isClosed: bool = "" [@@bs.get];
  external size: float = "" [@@bs.get];
  external _type: string = "" [@@bs.get];
  external close: t => unit => unit = "" [@@bs.send];
  external slice: t => start::(option float) => end::(option float) => contentType::(option string) => Blob = "" [@@bs.send];
};
let module FileReader = {
  type t;
  external abort: t => unit => unit = "" [@@bs.send];
  external _DONE: float = "" [@@bs.get];
  external _EMPTY: float = "" [@@bs.get];
  external error: DOMError = "" [@@bs.get];
  external _LOADING: float = "" [@@bs.get];
  external onabort: 'a => 'a = "" [@@bs.get];
  external onerror: 'a => 'a = "" [@@bs.get];
  external onload: 'a => 'a = "" [@@bs.get];
  external onloadend: 'a => 'a = "" [@@bs.get];
  external onloadstart: 'a => 'a = "" [@@bs.get];
  external onprogress: 'a => 'a = "" [@@bs.get];
  external readAsArrayBuffer: t => Blob => unit = "" [@@bs.send];
  external readAsDataURL: t => Blob => unit = "" [@@bs.send];
  external readAsText: t => Blob => encoding::(option string) => unit = "" [@@bs.send];
  external readyState: TODO = "" [@@bs.get];
  external result: 'a = "" [@@bs.get];
};
let module File = {
  type t;
  external lastModifiedDate: 'a = "" [@@bs.get];
  external name: string = "" [@@bs.get];
};
let module FileList = {
  type t;
  external _@@iterator: t => unit => Iterator = "" [@@bs.send];
  external length: float = "" [@@bs.get];
  external item: t => float => File = "" [@@bs.send];
};
let module DataTransfer = {
  type t;
  external clearData: t => format::(option string) => unit = "" [@@bs.send];
  external getData: t => string => string = "" [@@bs.send];
  external setData: t => string => string => unit = "" [@@bs.send];
  external setDragImage: t => Element => float => float => unit = "" [@@bs.send];
  external dropEffect: string = "" [@@bs.get];
  external effectAllowed: string = "" [@@bs.get];
  external files: FileList = "" [@@bs.get];
  external items: DataTransferItemList = "" [@@bs.get];
  external types: Array = "" [@@bs.get];
};
let module DataTransferItemList = {
  type t;
  external length: float = "" [@@bs.get];
  external add: t => string => string => TODO = "" [@@bs.send];
  external add: t => File => TODO = "" [@@bs.send];
  external remove: t => float => unit = "" [@@bs.send];
  external clear: t => unit => unit = "" [@@bs.send];
};
let module DataTransferItem = {
  type t;
  external kind: string = "" [@@bs.get];
  external _type: string = "" [@@bs.get];
  external getAsString: t => TODO => unit = "" [@@bs.send];
  external getAsFile: t => unit => TODO = "" [@@bs.send];
};
let module DOMError = {
  type t;
  external name: string = "" [@@bs.get];
};
type TODO;
type TODO;
type TODO;
type TODO;
type TODO;
type TODO;
type TODO;
type TODO;
let module EventTarget = {
  type t;
  external addEventListener: t => MouseEventTypes => MouseEventListener => useCapture::(option bool) => unit = "" [@@bs.send];
  external addEventListener: t => KeyboardEventTypes => KeyboardEventListener => useCapture::(option bool) => unit = "" [@@bs.send];
  external addEventListener: t => string => EventListener => useCapture::(option bool) => unit = "" [@@bs.send];
  external removeEventListener: t => MouseEventTypes => MouseEventListener => useCapture::(option bool) => unit = "" [@@bs.send];
  external removeEventListener: t => KeyboardEventTypes => KeyboardEventListener => useCapture::(option bool) => unit = "" [@@bs.send];
  external removeEventListener: t => string => EventListener => useCapture::(option bool) => unit = "" [@@bs.send];
  external attachEvent: MouseEventTypes => MouseEventListener => unit = "" [@@bs.get];
  external attachEvent: KeyboardEventTypes => KeyboardEventListener => unit = "" [@@bs.get];
  external attachEvent: string => EventListener => unit = "" [@@bs.get];
  external detachEvent: MouseEventTypes => MouseEventListener => unit = "" [@@bs.get];
  external detachEvent: KeyboardEventTypes => KeyboardEventListener => unit = "" [@@bs.get];
  external detachEvent: string => EventListener => unit = "" [@@bs.get];
  external dispatchEvent: t => Event => bool = "" [@@bs.send];
  external cancelBubble: bool = "" [@@bs.get];
  external initEvent: t => string => bool => bool => unit = "" [@@bs.send];
};
type TODO;
let module Event = {
  type t;
  external constructor: t => string => eventInitDict::(option Event$Init) => unit = "" [@@bs.send];
  external bubbles: bool = "" [@@bs.get];
  external cancelable: bool = "" [@@bs.get];
  external currentTarget: EventTarget = "" [@@bs.get];
  external defaultPrevented: bool = "" [@@bs.get];
  external eventPhase: float = "" [@@bs.get];
  external isTrusted: bool = "" [@@bs.get];
  external srcElement: Element = "" [@@bs.get];
  external target: EventTarget = "" [@@bs.get];
  external timeStamp: float = "" [@@bs.get];
  external _type: string = "" [@@bs.get];
  external preventDefault: t => unit => unit = "" [@@bs.send];
  external stopImmediatePropagation: t => unit => unit = "" [@@bs.send];
  external stopPropagation: t => unit => unit = "" [@@bs.send];
  external _AT_TARGET: float = "" [@@bs.get];
  external _BUBBLING_PHASE: float = "" [@@bs.get];
  external _CAPTURING_PHASE: float = "" [@@bs.get];
  external initEvent: t => string => bool => bool => unit = "" [@@bs.send];
};
type TODO;
let module CustomEvent = {
  type t;
  external constructor: t => string => eventInitDict::(option CustomEvent$Init) => unit = "" [@@bs.send];
  external detail: 'a = "" [@@bs.get];
  external initCustomEvent: t => string => bool => bool => 'a => CustomEvent = "" [@@bs.send];
};
let module UIEvent = {
  type t;
  external detail: float = "" [@@bs.get];
  external view: 'a = "" [@@bs.get];
};
let module MouseEvent = {
  type t;
  external altKey: bool = "" [@@bs.get];
  external button: float = "" [@@bs.get];
  external buttons: float = "" [@@bs.get];
  external clientX: float = "" [@@bs.get];
  external clientY: float = "" [@@bs.get];
  external ctrlKey: bool = "" [@@bs.get];
  external metaKey: bool = "" [@@bs.get];
  external movementX: float = "" [@@bs.get];
  external movementY: float = "" [@@bs.get];
  external offsetX: float = "" [@@bs.get];
  external offsetY: float = "" [@@bs.get];
  external pageX: float = "" [@@bs.get];
  external pageY: float = "" [@@bs.get];
  external region: TODO = "" [@@bs.get];
  external screenX: float = "" [@@bs.get];
  external screenY: float = "" [@@bs.get];
  external shiftKey: bool = "" [@@bs.get];
  external relatedTarget: TODO = "" [@@bs.get];
  external getModifierState: t => string => bool = "" [@@bs.send];
};
let module WheelEvent = {
  type t;
  external deltaX: float = "" [@@bs.get];
  external deltaY: float = "" [@@bs.get];
  external deltaZ: float = "" [@@bs.get];
  external deltaMode: TODO = "" [@@bs.get];
};
let module DragEvent = {
  type t;
  external dataTransfer: TODO = "" [@@bs.get];
};
let module ProgressEvent = {
  type t;
  external lengthComputable: bool = "" [@@bs.get];
  external loaded: float = "" [@@bs.get];
  external total: float = "" [@@bs.get];
  external initProgressEvent: t => string => bool => bool => bool => float => float => unit = "" [@@bs.send];
};
let module PromiseRejectionEvent = {
  type t;
  external promise: Promise = "" [@@bs.get];
  external reason: 'a = "" [@@bs.get];
};
let module MessageEvent = {
  type t;
  external data: TODO = "" [@@bs.get];
  external origin: string = "" [@@bs.get];
  external lastEventId: string = "" [@@bs.get];
  external source: WindowProxy = "" [@@bs.get];
};
let module KeyboardEvent = {
  type t;
  external altKey: bool = "" [@@bs.get];
  external code: string = "" [@@bs.get];
  external ctrlKey: bool = "" [@@bs.get];
  external isComposing: bool = "" [@@bs.get];
  external key: string = "" [@@bs.get];
  external location: float = "" [@@bs.get];
  external metaKey: bool = "" [@@bs.get];
  external repeat: bool = "" [@@bs.get];
  external shiftKey: bool = "" [@@bs.get];
  external getModifierState: t => keyArg::(option string) => bool = "" [@@bs.send];
  external charCode: float = "" [@@bs.get];
  external keyCode: float = "" [@@bs.get];
  external which: float = "" [@@bs.get];
};
let module Touch = {
  type t;
  external clientX: float = "" [@@bs.get];
  external clientY: float = "" [@@bs.get];
  external identifier: float = "" [@@bs.get];
  external pageX: float = "" [@@bs.get];
  external pageY: float = "" [@@bs.get];
  external screenX: float = "" [@@bs.get];
  external screenY: float = "" [@@bs.get];
  external target: EventTarget = "" [@@bs.get];
};
let module TouchList = {
  type t;
  external length: float = "" [@@bs.get];
  external item: t => float => TODO = "" [@@bs.send];
};
let module TouchEvent = {
  type t;
  external altKey: bool = "" [@@bs.get];
  external changedTouches: TouchList = "" [@@bs.get];
  external ctrlKey: bool = "" [@@bs.get];
  external metaKey: bool = "" [@@bs.get];
  external shiftKey: bool = "" [@@bs.get];
  external targetTouchesRead: TouchList = "" [@@bs.get];
  external touches: TouchList = "" [@@bs.get];
};
let module Node = {
  type t;
  external baseURI: TODO = "" [@@bs.get];
  external childNodes: NodeList = "" [@@bs.get];
  external firstChild: TODO = "" [@@bs.get];
  external lastChild: TODO = "" [@@bs.get];
  external nextSibling: TODO = "" [@@bs.get];
  external nodeName: string = "" [@@bs.get];
  external nodeType: float = "" [@@bs.get];
  external nodeValue: string = "" [@@bs.get];
  external ownerDocument: Document = "" [@@bs.get];
  external parentElement: TODO = "" [@@bs.get];
  external parentNode: TODO = "" [@@bs.get];
  external previousSibling: TODO = "" [@@bs.get];
  external rootNode: Node = "" [@@bs.get];
  external textContent: string = "" [@@bs.get];
  external appendChild: t => Node => Node = "" [@@bs.send];
  external cloneNode: t => deep::(option bool) => this = "" [@@bs.send];
  external compareDocumentPosition: t => Node => float = "" [@@bs.send];
  external contains: t => TODO => bool = "" [@@bs.send];
  external hasChildNodes: t => unit => bool = "" [@@bs.send];
  external insertBefore: t => Node => refChild::(option TODO) => Node = "" [@@bs.send];
  external isDefaultNamespace: t => string => bool = "" [@@bs.send];
  external isEqualNode: t => Node => bool = "" [@@bs.send];
  external isSameNode: t => Node => bool = "" [@@bs.send];
  external lookupNamespaceURI: t => string => string = "" [@@bs.send];
  external lookupPrefix: t => string => string = "" [@@bs.send];
  external normalize: t => unit => unit = "" [@@bs.send];
  external removeChild: t => Node => Node = "" [@@bs.send];
  external replaceChild: t => Node => Node => Node = "" [@@bs.send];
  external _ATTRIBUTE_NODE: float = "" [@@bs.val];
  external _CDATA_SECTION_NODE: float = "" [@@bs.val];
  external _COMMENT_NODE: float = "" [@@bs.val];
  external _DOCUMENT_FRAGMENT_NODE: float = "" [@@bs.val];
  external _DOCUMENT_NODE: float = "" [@@bs.val];
  external _DOCUMENT_POSITION_CONTAINED_BY: float = "" [@@bs.val];
  external _DOCUMENT_POSITION_CONTAINS: float = "" [@@bs.val];
  external _DOCUMENT_POSITION_DISCONNECTED: float = "" [@@bs.val];
  external _DOCUMENT_POSITION_FOLLOWING: float = "" [@@bs.val];
  external _DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: float = "" [@@bs.val];
  external _DOCUMENT_POSITION_PRECEDING: float = "" [@@bs.val];
  external _DOCUMENT_TYPE_NODE: float = "" [@@bs.val];
  external _ELEMENT_NODE: float = "" [@@bs.val];
  external _ENTITY_NODE: float = "" [@@bs.val];
  external _ENTITY_REFERENCE_NODE: float = "" [@@bs.val];
  external _NOTATION_NODE: float = "" [@@bs.val];
  external _PROCESSING_INSTRUCTION_NODE: float = "" [@@bs.val];
  external _TEXT_NODE: float = "" [@@bs.val];
  external innerText: string = "" [@@bs.get];
  external outerText: string = "" [@@bs.get];
};
let module NodeList = {
  type t;
  external _@@iterator: t => unit => Iterator = "" [@@bs.send];
  external length: float = "" [@@bs.get];
  external item: t => float => T = "" [@@bs.send];
};
let module NamedNodeMap = {
  type t;
  external length: float = "" [@@bs.get];
  external removeNamedItemNS: t => string => string => Attr = "" [@@bs.send];
  external item: t => float => Attr = "" [@@bs.send];
  external removeNamedItem: t => string => Attr = "" [@@bs.send];
  external getNamedItem: t => string => Attr = "" [@@bs.send];
  external setNamedItem: t => Attr => Attr = "" [@@bs.send];
  external getNamedItemNS: t => string => string => Attr = "" [@@bs.send];
  external setNamedItemNS: t => Attr => Attr = "" [@@bs.send];
};
let module Attr = {
  type t;
  external isId: bool = "" [@@bs.get];
  external specified: bool = "" [@@bs.get];
  external ownerElement: Element = "" [@@bs.get];
  external value: string = "" [@@bs.get];
  external name: string = "" [@@bs.get];
};
let module HTMLCollection = {
  type t;
  external _@@iterator: t => unit => Iterator = "" [@@bs.send];
  external length: float = "" [@@bs.get];
  external item: t => nameOrIndex::(option 'a) => optionalIndex::(option 'a) => Elem = "" [@@bs.send];
  external namedItem: t => string => Elem = "" [@@bs.send];
};
type TODO;
let module Document = {
  type t;
  external _URL: string = "" [@@bs.get];
  external adoptNode: t => Node => Node = "" [@@bs.send];
  external anchors: HTMLCollection = "" [@@bs.get];
  external applets: HTMLCollection = "" [@@bs.get];
  external body: HTMLElement = "" [@@bs.get];
  external characterSet: string = "" [@@bs.get];
  external close: t => unit => unit = "" [@@bs.send];
  external cookie: string = "" [@@bs.get];
  external createAttribute: t => string => Attr = "" [@@bs.send];
  external createAttributeNS: t => string => string => Attr = "" [@@bs.send];
  external createCDATASection: t => string => Text = "" [@@bs.send];
  external createComment: t => string => Comment = "" [@@bs.send];
  external createDocumentFragment: t => unit => DocumentFragment = "" [@@bs.send];
  external createElement: t => "a" => HTMLAnchorElement = "" [@@bs.send];
  external createElement: t => "audio" => HTMLAudioElement = "" [@@bs.send];
  external createElement: t => "button" => HTMLButtonElement = "" [@@bs.send];
  external createElement: t => "canvas" => HTMLCanvasElement = "" [@@bs.send];
  external createElement: t => "div" => HTMLDivElement = "" [@@bs.send];
  external createElement: t => "form" => HTMLFormElement = "" [@@bs.send];
  external createElement: t => "iframe" => HTMLIFrameElement = "" [@@bs.send];
  external createElement: t => "img" => HTMLImageElement = "" [@@bs.send];
  external createElement: t => "input" => HTMLInputElement = "" [@@bs.send];
  external createElement: t => "label" => HTMLLabelElement = "" [@@bs.send];
  external createElement: t => "link" => HTMLLinkElement = "" [@@bs.send];
  external createElement: t => "media" => HTMLMediaElement = "" [@@bs.send];
  external createElement: t => "option" => HTMLOptionElement = "" [@@bs.send];
  external createElement: t => "p" => HTMLParagraphElement = "" [@@bs.send];
  external createElement: t => "script" => HTMLScriptElement = "" [@@bs.send];
  external createElement: t => "select" => HTMLSelectElement = "" [@@bs.send];
  external createElement: t => "source" => HTMLSourceElement = "" [@@bs.send];
  external createElement: t => "span" => HTMLSpanElement = "" [@@bs.send];
  external createElement: t => "style" => HTMLStyleElement = "" [@@bs.send];
  external createElement: t => "textarea" => HTMLTextAreaElement = "" [@@bs.send];
  external createElement: t => "video" => HTMLVideoElement = "" [@@bs.send];
  external createElement: t => "tr" => HTMLTableRowElement = "" [@@bs.send];
  external createElement: t => TODO => HTMLTableCellElement = "" [@@bs.send];
  external createElement: t => string => HTMLElement = "" [@@bs.send];
  external createElementNS: t => string => string => Element = "" [@@bs.send];
  external createTextNode: t => string => Text = "" [@@bs.send];
  external currentScript: TODO = "" [@@bs.get];
  external doctype: DocumentType = "" [@@bs.get];
  external documentElement: HTMLElement = "" [@@bs.get];
  external documentMode: float = "" [@@bs.get];
  external domain: TODO = "" [@@bs.get];
  external embeds: HTMLCollection = "" [@@bs.get];
  external execCommand: t => string => showUI::(option bool) => value::(option 'a) => bool = "" [@@bs.send];
  external forms: HTMLCollection = "" [@@bs.get];
  external getElementById: t => string => HTMLElement = "" [@@bs.send];
  external getElementsByClassName: t => string => HTMLCollection = "" [@@bs.send];
  external getElementsByName: t => string => HTMLCollection = "" [@@bs.send];
  external getElementsByTagName: t => "a" => HTMLCollection = "" [@@bs.send];
  external getElementsByTagName: t => "audio" => HTMLCollection = "" [@@bs.send];
  external getElementsByTagName: t => "button" => HTMLCollection = "" [@@bs.send];
  external getElementsByTagName: t => "canvas" => HTMLCollection = "" [@@bs.send];
  external getElementsByTagName: t => "div" => HTMLCollection = "" [@@bs.send];
  external getElementsByTagName: t => "form" => HTMLCollection = "" [@@bs.send];
  external getElementsByTagName: t => "iframe" => HTMLCollection = "" [@@bs.send];
  external getElementsByTagName: t => "img" => HTMLCollection = "" [@@bs.send];
  external getElementsByTagName: t => "input" => HTMLCollection = "" [@@bs.send];
  external getElementsByTagName: t => "label" => HTMLCollection = "" [@@bs.send];
  external getElementsByTagName: t => "link" => HTMLCollection = "" [@@bs.send];
  external getElementsByTagName: t => "media" => HTMLCollection = "" [@@bs.send];
  external getElementsByTagName: t => "option" => HTMLCollection = "" [@@bs.send];
  external getElementsByTagName: t => "p" => HTMLCollection = "" [@@bs.send];
  external getElementsByTagName: t => "script" => HTMLCollection = "" [@@bs.send];
  external getElementsByTagName: t => "select" => HTMLCollection = "" [@@bs.send];
  external getElementsByTagName: t => "source" => HTMLCollection = "" [@@bs.send];
  external getElementsByTagName: t => "span" => HTMLCollection = "" [@@bs.send];
  external getElementsByTagName: t => "style" => HTMLCollection = "" [@@bs.send];
  external getElementsByTagName: t => "textarea" => HTMLCollection = "" [@@bs.send];
  external getElementsByTagName: t => "video" => HTMLCollection = "" [@@bs.send];
  external getElementsByTagName: t => "tr" => HTMLCollection = "" [@@bs.send];
  external getElementsByTagName: t => TODO => HTMLCollection = "" [@@bs.send];
  external getElementsByTagName: t => string => HTMLCollection = "" [@@bs.send];
  external getElementsByTagNameNS: t => string => "a" => HTMLCollection = "" [@@bs.send];
  external getElementsByTagNameNS: t => string => "audio" => HTMLCollection = "" [@@bs.send];
  external getElementsByTagNameNS: t => string => "button" => HTMLCollection = "" [@@bs.send];
  external getElementsByTagNameNS: t => string => "canvas" => HTMLCollection = "" [@@bs.send];
  external getElementsByTagNameNS: t => string => "div" => HTMLCollection = "" [@@bs.send];
  external getElementsByTagNameNS: t => string => "form" => HTMLCollection = "" [@@bs.send];
  external getElementsByTagNameNS: t => string => "iframe" => HTMLCollection = "" [@@bs.send];
  external getElementsByTagNameNS: t => string => "img" => HTMLCollection = "" [@@bs.send];
  external getElementsByTagNameNS: t => string => "input" => HTMLCollection = "" [@@bs.send];
  external getElementsByTagNameNS: t => string => "label" => HTMLCollection = "" [@@bs.send];
  external getElementsByTagNameNS: t => string => "link" => HTMLCollection = "" [@@bs.send];
  external getElementsByTagNameNS: t => string => "media" => HTMLCollection = "" [@@bs.send];
  external getElementsByTagNameNS: t => string => "option" => HTMLCollection = "" [@@bs.send];
  external getElementsByTagNameNS: t => string => "p" => HTMLCollection = "" [@@bs.send];
  external getElementsByTagNameNS: t => string => "script" => HTMLCollection = "" [@@bs.send];
  external getElementsByTagNameNS: t => string => "select" => HTMLCollection = "" [@@bs.send];
  external getElementsByTagNameNS: t => string => "source" => HTMLCollection = "" [@@bs.send];
  external getElementsByTagNameNS: t => string => "span" => HTMLCollection = "" [@@bs.send];
  external getElementsByTagNameNS: t => string => "style" => HTMLCollection = "" [@@bs.send];
  external getElementsByTagNameNS: t => string => "textarea" => HTMLCollection = "" [@@bs.send];
  external getElementsByTagNameNS: t => string => "video" => HTMLCollection = "" [@@bs.send];
  external getElementsByTagNameNS: t => string => "tr" => HTMLCollection = "" [@@bs.send];
  external getElementsByTagNameNS: t => string => TODO => HTMLCollection = "" [@@bs.send];
  external getElementsByTagNameNS: t => string => string => HTMLCollection = "" [@@bs.send];
  external head: HTMLElement = "" [@@bs.get];
  external images: HTMLCollection = "" [@@bs.get];
  external implementation: DOMImplementation = "" [@@bs.get];
  external importNode: t => Node => bool => Node = "" [@@bs.send];
  external inputEncoding: string = "" [@@bs.get];
  external lastModified: string = "" [@@bs.get];
  external links: HTMLCollection = "" [@@bs.get];
  external media: string = "" [@@bs.get];
  external open: t => url::(option string) => name::(option string) => features::(option string) => replace::(option bool) => 'a = "" [@@bs.send];
  external readyState: string = "" [@@bs.get];
  external referrer: string = "" [@@bs.get];
  external scripts: HTMLCollection = "" [@@bs.get];
  external styleSheets: StyleSheetList = "" [@@bs.get];
  external title: string = "" [@@bs.get];
  external write: t => array 'rest => unit = "" [@@bs.send] [@@bs.splice];
  external writeln: t => array 'rest => unit = "" [@@bs.send] [@@bs.splice];
  external xmlEncoding: string = "" [@@bs.get];
  external xmlStandalone: bool = "" [@@bs.get];
  external xmlVersion: string = "" [@@bs.get];
  external registerElement: t => string => options::(option ElementRegistrationOptions) => 'a = "" [@@bs.send];
  external getSelection: t => unit => TODO = "" [@@bs.send];
  external activeElement: HTMLElement = "" [@@bs.get];
  external hasFocus: t => unit => bool = "" [@@bs.send];
  external location: Location = "" [@@bs.get];
  external createEvent: t => "CustomEvent" => CustomEvent = "" [@@bs.send];
  external createEvent: t => string => Event = "" [@@bs.send];
  external createRange: t => unit => Range = "" [@@bs.send];
  external elementFromPoint: t => float => float => HTMLElement = "" [@@bs.send];
  external defaultView: 'a = "" [@@bs.get];
  external compatMode: TODO = "" [@@bs.get];
  external hidden: bool = "" [@@bs.get];
  external childElementCount: float = "" [@@bs.get];
  external children: HTMLCollection = "" [@@bs.get];
  external firstElementChild: TODO = "" [@@bs.get];
  external lastElementChild: TODO = "" [@@bs.get];
  external querySelector: t => string => HTMLElement = "" [@@bs.send];
  external querySelectorAll: t => string => NodeList = "" [@@bs.send];
  external createNodeIterator: t => RootNodeT => 2. => filter::(option NodeFilterInterface) => NodeIterator = "" [@@bs.send];
  external createTreeWalker: t => RootNodeT => 2. => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "" [@@bs.send];
  external createNodeIterator: t => RootNodeT => 256. => filter::(option NodeFilterInterface) => NodeIterator = "" [@@bs.send];
  external createNodeIterator: t => RootNodeT => 257. => filter::(option NodeFilterInterface) => NodeIterator = "" [@@bs.send];
  external createNodeIterator: t => RootNodeT => 260. => filter::(option NodeFilterInterface) => NodeIterator = "" [@@bs.send];
  external createNodeIterator: t => RootNodeT => 261. => filter::(option NodeFilterInterface) => NodeIterator = "" [@@bs.send];
  external createNodeIterator: t => RootNodeT => 384. => filter::(option NodeFilterInterface) => NodeIterator = "" [@@bs.send];
  external createNodeIterator: t => RootNodeT => 385. => filter::(option NodeFilterInterface) => NodeIterator = "" [@@bs.send];
  external createNodeIterator: t => RootNodeT => 388. => filter::(option NodeFilterInterface) => NodeIterator = "" [@@bs.send];
  external createNodeIterator: t => RootNodeT => 389. => filter::(option NodeFilterInterface) => NodeIterator = "" [@@bs.send];
  external createNodeIterator: t => RootNodeT => 512. => filter::(option NodeFilterInterface) => NodeIterator = "" [@@bs.send];
  external createNodeIterator: t => RootNodeT => 513. => filter::(option NodeFilterInterface) => NodeIterator = "" [@@bs.send];
  external createNodeIterator: t => RootNodeT => 516. => filter::(option NodeFilterInterface) => NodeIterator = "" [@@bs.send];
  external createNodeIterator: t => RootNodeT => 517. => filter::(option NodeFilterInterface) => NodeIterator = "" [@@bs.send];
  external createNodeIterator: t => RootNodeT => 640. => filter::(option NodeFilterInterface) => NodeIterator = "" [@@bs.send];
  external createNodeIterator: t => RootNodeT => 641. => filter::(option NodeFilterInterface) => NodeIterator = "" [@@bs.send];
  external createNodeIterator: t => RootNodeT => 644. => filter::(option NodeFilterInterface) => NodeIterator = "" [@@bs.send];
  external createNodeIterator: t => RootNodeT => 645. => filter::(option NodeFilterInterface) => NodeIterator = "" [@@bs.send];
  external createNodeIterator: t => RootNodeT => 768. => filter::(option NodeFilterInterface) => NodeIterator = "" [@@bs.send];
  external createNodeIterator: t => RootNodeT => 769. => filter::(option NodeFilterInterface) => NodeIterator = "" [@@bs.send];
  external createNodeIterator: t => RootNodeT => 772. => filter::(option NodeFilterInterface) => NodeIterator = "" [@@bs.send];
  external createNodeIterator: t => RootNodeT => 773. => filter::(option NodeFilterInterface) => NodeIterator = "" [@@bs.send];
  external createNodeIterator: t => RootNodeT => 896. => filter::(option NodeFilterInterface) => NodeIterator = "" [@@bs.send];
  external createNodeIterator: t => RootNodeT => 897. => filter::(option NodeFilterInterface) => NodeIterator = "" [@@bs.send];
  external createNodeIterator: t => RootNodeT => 900. => filter::(option NodeFilterInterface) => NodeIterator = "" [@@bs.send];
  external createNodeIterator: t => RootNodeT => 901. => filter::(option NodeFilterInterface) => NodeIterator = "" [@@bs.send];
  external createTreeWalker: t => RootNodeT => 256. => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "" [@@bs.send];
  external createTreeWalker: t => RootNodeT => 257. => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "" [@@bs.send];
  external createTreeWalker: t => RootNodeT => 260. => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "" [@@bs.send];
  external createTreeWalker: t => RootNodeT => 261. => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "" [@@bs.send];
  external createTreeWalker: t => RootNodeT => 384. => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "" [@@bs.send];
  external createTreeWalker: t => RootNodeT => 385. => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "" [@@bs.send];
  external createTreeWalker: t => RootNodeT => 388. => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "" [@@bs.send];
  external createTreeWalker: t => RootNodeT => 389. => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "" [@@bs.send];
  external createTreeWalker: t => RootNodeT => 512. => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "" [@@bs.send];
  external createTreeWalker: t => RootNodeT => 513. => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "" [@@bs.send];
  external createTreeWalker: t => RootNodeT => 516. => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "" [@@bs.send];
  external createTreeWalker: t => RootNodeT => 517. => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "" [@@bs.send];
  external createTreeWalker: t => RootNodeT => 640. => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "" [@@bs.send];
  external createTreeWalker: t => RootNodeT => 641. => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "" [@@bs.send];
  external createTreeWalker: t => RootNodeT => 644. => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "" [@@bs.send];
  external createTreeWalker: t => RootNodeT => 645. => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "" [@@bs.send];
  external createTreeWalker: t => RootNodeT => 768. => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "" [@@bs.send];
  external createTreeWalker: t => RootNodeT => 769. => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "" [@@bs.send];
  external createTreeWalker: t => RootNodeT => 772. => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "" [@@bs.send];
  external createTreeWalker: t => RootNodeT => 773. => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "" [@@bs.send];
  external createTreeWalker: t => RootNodeT => 896. => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "" [@@bs.send];
  external createTreeWalker: t => RootNodeT => 897. => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "" [@@bs.send];
  external createTreeWalker: t => RootNodeT => 900. => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "" [@@bs.send];
  external createTreeWalker: t => RootNodeT => 901. => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "" [@@bs.send];
  external createNodeIterator: t => RootNodeT => 1024. => filter::(option NodeFilterInterface) => NodeIterator = "" [@@bs.send];
  external createNodeIterator: t => RootNodeT => 1025. => filter::(option NodeFilterInterface) => NodeIterator = "" [@@bs.send];
  external createNodeIterator: t => RootNodeT => 1028. => filter::(option NodeFilterInterface) => NodeIterator = "" [@@bs.send];
  external createNodeIterator: t => RootNodeT => 1029. => filter::(option NodeFilterInterface) => NodeIterator = "" [@@bs.send];
  external createNodeIterator: t => RootNodeT => 1152. => filter::(option NodeFilterInterface) => NodeIterator = "" [@@bs.send];
  external createNodeIterator: t => RootNodeT => 1153. => filter::(option NodeFilterInterface) => NodeIterator = "" [@@bs.send];
  external createNodeIterator: t => RootNodeT => 1156. => filter::(option NodeFilterInterface) => NodeIterator = "" [@@bs.send];
  external createNodeIterator: t => RootNodeT => 1157. => filter::(option NodeFilterInterface) => NodeIterator = "" [@@bs.send];
  external createTreeWalker: t => RootNodeT => 1024. => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "" [@@bs.send];
  external createTreeWalker: t => RootNodeT => 1025. => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "" [@@bs.send];
  external createTreeWalker: t => RootNodeT => 1028. => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "" [@@bs.send];
  external createTreeWalker: t => RootNodeT => 1029. => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "" [@@bs.send];
  external createTreeWalker: t => RootNodeT => 1152. => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "" [@@bs.send];
  external createTreeWalker: t => RootNodeT => 1153. => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "" [@@bs.send];
  external createTreeWalker: t => RootNodeT => 1156. => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "" [@@bs.send];
  external createTreeWalker: t => RootNodeT => 1157. => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "" [@@bs.send];
  external createNodeIterator: t => RootNodeT => 1. => filter::(option NodeFilterInterface) => NodeIterator = "" [@@bs.send];
  external createNodeIterator: t => RootNodeT => 4. => filter::(option NodeFilterInterface) => NodeIterator = "" [@@bs.send];
  external createNodeIterator: t => RootNodeT => 5. => filter::(option NodeFilterInterface) => NodeIterator = "" [@@bs.send];
  external createNodeIterator: t => RootNodeT => 128. => filter::(option NodeFilterInterface) => NodeIterator = "" [@@bs.send];
  external createNodeIterator: t => RootNodeT => 129. => filter::(option NodeFilterInterface) => NodeIterator = "" [@@bs.send];
  external createNodeIterator: t => RootNodeT => 132. => filter::(option NodeFilterInterface) => NodeIterator = "" [@@bs.send];
  external createNodeIterator: t => RootNodeT => 133. => filter::(option NodeFilterInterface) => NodeIterator = "" [@@bs.send];
  external createNodeIterator: t => RootNodeT => -1. => filter::(option NodeFilterInterface) => NodeIterator = "" [@@bs.send];
  external createTreeWalker: t => RootNodeT => 1. => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "" [@@bs.send];
  external createTreeWalker: t => RootNodeT => 4. => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "" [@@bs.send];
  external createTreeWalker: t => RootNodeT => 5. => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "" [@@bs.send];
  external createTreeWalker: t => RootNodeT => 128. => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "" [@@bs.send];
  external createTreeWalker: t => RootNodeT => 129. => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "" [@@bs.send];
  external createTreeWalker: t => RootNodeT => 132. => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "" [@@bs.send];
  external createTreeWalker: t => RootNodeT => 133. => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "" [@@bs.send];
  external createTreeWalker: t => RootNodeT => -1. => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "" [@@bs.send];
  external createNodeIterator: t => RootNodeT => float => filter::(option NodeFilterInterface) => NodeIterator = "" [@@bs.send];
  external createTreeWalker: t => RootNodeT => float => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "" [@@bs.send];
  external createNodeIterator: t => RootNodeT => unit => NodeIterator = "" [@@bs.send];
  external createTreeWalker: t => RootNodeT => unit => TreeWalker = "" [@@bs.send];
};
let module DocumentFragment = {
  type t;
  external childElementCount: float = "" [@@bs.get];
  external children: HTMLCollection = "" [@@bs.get];
  external firstElementChild: TODO = "" [@@bs.get];
  external lastElementChild: TODO = "" [@@bs.get];
  external querySelector: t => string => HTMLElement = "" [@@bs.send];
  external querySelectorAll: t => string => NodeList = "" [@@bs.send];
};
let module Selection = {
  type t;
  external anchorNode: TODO = "" [@@bs.get];
  external anchorOffset: float = "" [@@bs.get];
  external focusNode: TODO = "" [@@bs.get];
  external focusOffset: float = "" [@@bs.get];
  external isCollapsed: bool = "" [@@bs.get];
  external rangeCount: float = "" [@@bs.get];
  external addRange: t => Range => unit = "" [@@bs.send];
  external getRangeAt: t => float => Range = "" [@@bs.send];
  external removeRange: t => Range => unit = "" [@@bs.send];
  external removeAllRanges: t => unit => unit = "" [@@bs.send];
  external collapse: t => TODO => offset::(option float) => unit = "" [@@bs.send];
  external collapseToStart: t => unit => unit = "" [@@bs.send];
  external collapseToEnd: t => unit => unit = "" [@@bs.send];
  external containsNode: t => Node => aPartlyContained::(option bool) => bool = "" [@@bs.send];
  external deleteFromDocument: t => unit => unit = "" [@@bs.send];
  external extend: t => Node => offset::(option float) => unit = "" [@@bs.send];
  external empty: t => unit => unit = "" [@@bs.send];
  external selectAllChildren: t => Node => unit = "" [@@bs.send];
  external setPosition: t => TODO => offset::(option float) => unit = "" [@@bs.send];
  external setBaseAndExtent: t => Node => float => Node => float => unit = "" [@@bs.send];
  external toString: t => unit => string = "" [@@bs.send];
};
let module Range = {
  type t;
  external startOffset: float = "" [@@bs.get];
  external collapsed: bool = "" [@@bs.get];
  external endOffset: float = "" [@@bs.get];
  external startContainer: Node = "" [@@bs.get];
  external endContainer: Node = "" [@@bs.get];
  external commonAncestorContainer: Node = "" [@@bs.get];
  external setStart: t => Node => float => unit = "" [@@bs.send];
  external setEndBefore: t => Node => unit = "" [@@bs.send];
  external setStartBefore: t => Node => unit = "" [@@bs.send];
  external selectNode: t => Node => unit = "" [@@bs.send];
  external detach: t => unit => unit = "" [@@bs.send];
  external getBoundingClientRect: t => unit => ClientRect = "" [@@bs.send];
  external toString: t => unit => string = "" [@@bs.send];
  external compareBoundaryPoints: t => float => Range => float = "" [@@bs.send];
  external insertNode: t => Node => unit = "" [@@bs.send];
  external collapse: t => bool => unit = "" [@@bs.send];
  external selectNodeContents: t => Node => unit = "" [@@bs.send];
  external cloneContents: t => unit => Node = "" [@@bs.send];
  external setEnd: t => Node => float => unit = "" [@@bs.send];
  external cloneRange: t => unit => Range = "" [@@bs.send];
  external getClientRects: t => unit => ClientRectList = "" [@@bs.send];
  external surroundContents: t => Node => unit = "" [@@bs.send];
  external deleteContents: t => unit => unit = "" [@@bs.send];
  external setStartAfter: t => Node => unit = "" [@@bs.send];
  external extractContents: t => unit => DocumentFragment = "" [@@bs.send];
  external setEndAfter: t => Node => unit = "" [@@bs.send];
  external createContextualFragment: t => string => Node = "" [@@bs.send];
  external _END_TO_END: float = "" [@@bs.get];
  external _START_TO_START: float = "" [@@bs.get];
  external _START_TO_END: float = "" [@@bs.get];
  external _END_TO_START: float = "" [@@bs.get];
};
let module DocumentInstance = {
  external _URL: string = "document.URL" [@@bs.val];
  external adoptNode: Node => Node = "document.adoptNode" [@@bs.val];
  external anchors: HTMLCollection = "document.anchors" [@@bs.val];
  external applets: HTMLCollection = "document.applets" [@@bs.val];
  external body: HTMLElement = "document.body" [@@bs.val];
  external characterSet: string = "document.characterSet" [@@bs.val];
  external close: unit => unit = "document.close" [@@bs.val];
  external cookie: string = "document.cookie" [@@bs.val];
  external createAttribute: string => Attr = "document.createAttribute" [@@bs.val];
  external createAttributeNS: string => string => Attr = "document.createAttributeNS" [@@bs.val];
  external createCDATASection: string => Text = "document.createCDATASection" [@@bs.val];
  external createComment: string => Comment = "document.createComment" [@@bs.val];
  external createDocumentFragment: unit => DocumentFragment = "document.createDocumentFragment" [@@bs.val];
  external createElement: "a" => HTMLAnchorElement = "document.createElement" [@@bs.val];
  external createElement: "audio" => HTMLAudioElement = "document.createElement" [@@bs.val];
  external createElement: "button" => HTMLButtonElement = "document.createElement" [@@bs.val];
  external createElement: "canvas" => HTMLCanvasElement = "document.createElement" [@@bs.val];
  external createElement: "div" => HTMLDivElement = "document.createElement" [@@bs.val];
  external createElement: "form" => HTMLFormElement = "document.createElement" [@@bs.val];
  external createElement: "iframe" => HTMLIFrameElement = "document.createElement" [@@bs.val];
  external createElement: "img" => HTMLImageElement = "document.createElement" [@@bs.val];
  external createElement: "input" => HTMLInputElement = "document.createElement" [@@bs.val];
  external createElement: "label" => HTMLLabelElement = "document.createElement" [@@bs.val];
  external createElement: "link" => HTMLLinkElement = "document.createElement" [@@bs.val];
  external createElement: "media" => HTMLMediaElement = "document.createElement" [@@bs.val];
  external createElement: "option" => HTMLOptionElement = "document.createElement" [@@bs.val];
  external createElement: "p" => HTMLParagraphElement = "document.createElement" [@@bs.val];
  external createElement: "script" => HTMLScriptElement = "document.createElement" [@@bs.val];
  external createElement: "select" => HTMLSelectElement = "document.createElement" [@@bs.val];
  external createElement: "source" => HTMLSourceElement = "document.createElement" [@@bs.val];
  external createElement: "span" => HTMLSpanElement = "document.createElement" [@@bs.val];
  external createElement: "style" => HTMLStyleElement = "document.createElement" [@@bs.val];
  external createElement: "textarea" => HTMLTextAreaElement = "document.createElement" [@@bs.val];
  external createElement: "video" => HTMLVideoElement = "document.createElement" [@@bs.val];
  external createElement: "tr" => HTMLTableRowElement = "document.createElement" [@@bs.val];
  external createElement: TODO => HTMLTableCellElement = "document.createElement" [@@bs.val];
  external createElement: string => HTMLElement = "document.createElement" [@@bs.val];
  external createElementNS: string => string => Element = "document.createElementNS" [@@bs.val];
  external createTextNode: string => Text = "document.createTextNode" [@@bs.val];
  external currentScript: TODO = "document.currentScript" [@@bs.val];
  external doctype: DocumentType = "document.doctype" [@@bs.val];
  external documentElement: HTMLElement = "document.documentElement" [@@bs.val];
  external documentMode: float = "document.documentMode" [@@bs.val];
  external domain: TODO = "document.domain" [@@bs.val];
  external embeds: HTMLCollection = "document.embeds" [@@bs.val];
  external execCommand: string => showUI::(option bool) => value::(option 'a) => bool = "document.execCommand" [@@bs.val];
  external forms: HTMLCollection = "document.forms" [@@bs.val];
  external getElementById: string => HTMLElement = "document.getElementById" [@@bs.val];
  external getElementsByClassName: string => HTMLCollection = "document.getElementsByClassName" [@@bs.val];
  external getElementsByName: string => HTMLCollection = "document.getElementsByName" [@@bs.val];
  external getElementsByTagName: "a" => HTMLCollection = "document.getElementsByTagName" [@@bs.val];
  external getElementsByTagName: "audio" => HTMLCollection = "document.getElementsByTagName" [@@bs.val];
  external getElementsByTagName: "button" => HTMLCollection = "document.getElementsByTagName" [@@bs.val];
  external getElementsByTagName: "canvas" => HTMLCollection = "document.getElementsByTagName" [@@bs.val];
  external getElementsByTagName: "div" => HTMLCollection = "document.getElementsByTagName" [@@bs.val];
  external getElementsByTagName: "form" => HTMLCollection = "document.getElementsByTagName" [@@bs.val];
  external getElementsByTagName: "iframe" => HTMLCollection = "document.getElementsByTagName" [@@bs.val];
  external getElementsByTagName: "img" => HTMLCollection = "document.getElementsByTagName" [@@bs.val];
  external getElementsByTagName: "input" => HTMLCollection = "document.getElementsByTagName" [@@bs.val];
  external getElementsByTagName: "label" => HTMLCollection = "document.getElementsByTagName" [@@bs.val];
  external getElementsByTagName: "link" => HTMLCollection = "document.getElementsByTagName" [@@bs.val];
  external getElementsByTagName: "media" => HTMLCollection = "document.getElementsByTagName" [@@bs.val];
  external getElementsByTagName: "option" => HTMLCollection = "document.getElementsByTagName" [@@bs.val];
  external getElementsByTagName: "p" => HTMLCollection = "document.getElementsByTagName" [@@bs.val];
  external getElementsByTagName: "script" => HTMLCollection = "document.getElementsByTagName" [@@bs.val];
  external getElementsByTagName: "select" => HTMLCollection = "document.getElementsByTagName" [@@bs.val];
  external getElementsByTagName: "source" => HTMLCollection = "document.getElementsByTagName" [@@bs.val];
  external getElementsByTagName: "span" => HTMLCollection = "document.getElementsByTagName" [@@bs.val];
  external getElementsByTagName: "style" => HTMLCollection = "document.getElementsByTagName" [@@bs.val];
  external getElementsByTagName: "textarea" => HTMLCollection = "document.getElementsByTagName" [@@bs.val];
  external getElementsByTagName: "video" => HTMLCollection = "document.getElementsByTagName" [@@bs.val];
  external getElementsByTagName: "tr" => HTMLCollection = "document.getElementsByTagName" [@@bs.val];
  external getElementsByTagName: TODO => HTMLCollection = "document.getElementsByTagName" [@@bs.val];
  external getElementsByTagName: string => HTMLCollection = "document.getElementsByTagName" [@@bs.val];
  external getElementsByTagNameNS: string => "a" => HTMLCollection = "document.getElementsByTagNameNS" [@@bs.val];
  external getElementsByTagNameNS: string => "audio" => HTMLCollection = "document.getElementsByTagNameNS" [@@bs.val];
  external getElementsByTagNameNS: string => "button" => HTMLCollection = "document.getElementsByTagNameNS" [@@bs.val];
  external getElementsByTagNameNS: string => "canvas" => HTMLCollection = "document.getElementsByTagNameNS" [@@bs.val];
  external getElementsByTagNameNS: string => "div" => HTMLCollection = "document.getElementsByTagNameNS" [@@bs.val];
  external getElementsByTagNameNS: string => "form" => HTMLCollection = "document.getElementsByTagNameNS" [@@bs.val];
  external getElementsByTagNameNS: string => "iframe" => HTMLCollection = "document.getElementsByTagNameNS" [@@bs.val];
  external getElementsByTagNameNS: string => "img" => HTMLCollection = "document.getElementsByTagNameNS" [@@bs.val];
  external getElementsByTagNameNS: string => "input" => HTMLCollection = "document.getElementsByTagNameNS" [@@bs.val];
  external getElementsByTagNameNS: string => "label" => HTMLCollection = "document.getElementsByTagNameNS" [@@bs.val];
  external getElementsByTagNameNS: string => "link" => HTMLCollection = "document.getElementsByTagNameNS" [@@bs.val];
  external getElementsByTagNameNS: string => "media" => HTMLCollection = "document.getElementsByTagNameNS" [@@bs.val];
  external getElementsByTagNameNS: string => "option" => HTMLCollection = "document.getElementsByTagNameNS" [@@bs.val];
  external getElementsByTagNameNS: string => "p" => HTMLCollection = "document.getElementsByTagNameNS" [@@bs.val];
  external getElementsByTagNameNS: string => "script" => HTMLCollection = "document.getElementsByTagNameNS" [@@bs.val];
  external getElementsByTagNameNS: string => "select" => HTMLCollection = "document.getElementsByTagNameNS" [@@bs.val];
  external getElementsByTagNameNS: string => "source" => HTMLCollection = "document.getElementsByTagNameNS" [@@bs.val];
  external getElementsByTagNameNS: string => "span" => HTMLCollection = "document.getElementsByTagNameNS" [@@bs.val];
  external getElementsByTagNameNS: string => "style" => HTMLCollection = "document.getElementsByTagNameNS" [@@bs.val];
  external getElementsByTagNameNS: string => "textarea" => HTMLCollection = "document.getElementsByTagNameNS" [@@bs.val];
  external getElementsByTagNameNS: string => "video" => HTMLCollection = "document.getElementsByTagNameNS" [@@bs.val];
  external getElementsByTagNameNS: string => "tr" => HTMLCollection = "document.getElementsByTagNameNS" [@@bs.val];
  external getElementsByTagNameNS: string => TODO => HTMLCollection = "document.getElementsByTagNameNS" [@@bs.val];
  external getElementsByTagNameNS: string => string => HTMLCollection = "document.getElementsByTagNameNS" [@@bs.val];
  external head: HTMLElement = "document.head" [@@bs.val];
  external images: HTMLCollection = "document.images" [@@bs.val];
  external implementation: DOMImplementation = "document.implementation" [@@bs.val];
  external importNode: Node => bool => Node = "document.importNode" [@@bs.val];
  external inputEncoding: string = "document.inputEncoding" [@@bs.val];
  external lastModified: string = "document.lastModified" [@@bs.val];
  external links: HTMLCollection = "document.links" [@@bs.val];
  external media: string = "document.media" [@@bs.val];
  external open: url::(option string) => name::(option string) => features::(option string) => replace::(option bool) => 'a = "document.open" [@@bs.val];
  external readyState: string = "document.readyState" [@@bs.val];
  external referrer: string = "document.referrer" [@@bs.val];
  external scripts: HTMLCollection = "document.scripts" [@@bs.val];
  external styleSheets: StyleSheetList = "document.styleSheets" [@@bs.val];
  external title: string = "document.title" [@@bs.val];
  external write: array 'rest => unit = "document.write" [@@bs.val] [@@bs.splice];
  external writeln: array 'rest => unit = "document.writeln" [@@bs.val] [@@bs.splice];
  external xmlEncoding: string = "document.xmlEncoding" [@@bs.val];
  external xmlStandalone: bool = "document.xmlStandalone" [@@bs.val];
  external xmlVersion: string = "document.xmlVersion" [@@bs.val];
  external registerElement: string => options::(option ElementRegistrationOptions) => 'a = "document.registerElement" [@@bs.val];
  external getSelection: unit => TODO = "document.getSelection" [@@bs.val];
  external activeElement: HTMLElement = "document.activeElement" [@@bs.val];
  external hasFocus: unit => bool = "document.hasFocus" [@@bs.val];
  external location: Location = "document.location" [@@bs.val];
  external createEvent: "CustomEvent" => CustomEvent = "document.createEvent" [@@bs.val];
  external createEvent: string => Event = "document.createEvent" [@@bs.val];
  external createRange: unit => Range = "document.createRange" [@@bs.val];
  external elementFromPoint: float => float => HTMLElement = "document.elementFromPoint" [@@bs.val];
  external defaultView: 'a = "document.defaultView" [@@bs.val];
  external compatMode: TODO = "document.compatMode" [@@bs.val];
  external hidden: bool = "document.hidden" [@@bs.val];
  external childElementCount: float = "document.childElementCount" [@@bs.val];
  external children: HTMLCollection = "document.children" [@@bs.val];
  external firstElementChild: TODO = "document.firstElementChild" [@@bs.val];
  external lastElementChild: TODO = "document.lastElementChild" [@@bs.val];
  external querySelector: string => HTMLElement = "document.querySelector" [@@bs.val];
  external querySelectorAll: string => NodeList = "document.querySelectorAll" [@@bs.val];
  external createNodeIterator: RootNodeT => 2. => filter::(option NodeFilterInterface) => NodeIterator = "document.createNodeIterator" [@@bs.val];
  external createTreeWalker: RootNodeT => 2. => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "document.createTreeWalker" [@@bs.val];
  external createNodeIterator: RootNodeT => 256. => filter::(option NodeFilterInterface) => NodeIterator = "document.createNodeIterator" [@@bs.val];
  external createNodeIterator: RootNodeT => 257. => filter::(option NodeFilterInterface) => NodeIterator = "document.createNodeIterator" [@@bs.val];
  external createNodeIterator: RootNodeT => 260. => filter::(option NodeFilterInterface) => NodeIterator = "document.createNodeIterator" [@@bs.val];
  external createNodeIterator: RootNodeT => 261. => filter::(option NodeFilterInterface) => NodeIterator = "document.createNodeIterator" [@@bs.val];
  external createNodeIterator: RootNodeT => 384. => filter::(option NodeFilterInterface) => NodeIterator = "document.createNodeIterator" [@@bs.val];
  external createNodeIterator: RootNodeT => 385. => filter::(option NodeFilterInterface) => NodeIterator = "document.createNodeIterator" [@@bs.val];
  external createNodeIterator: RootNodeT => 388. => filter::(option NodeFilterInterface) => NodeIterator = "document.createNodeIterator" [@@bs.val];
  external createNodeIterator: RootNodeT => 389. => filter::(option NodeFilterInterface) => NodeIterator = "document.createNodeIterator" [@@bs.val];
  external createNodeIterator: RootNodeT => 512. => filter::(option NodeFilterInterface) => NodeIterator = "document.createNodeIterator" [@@bs.val];
  external createNodeIterator: RootNodeT => 513. => filter::(option NodeFilterInterface) => NodeIterator = "document.createNodeIterator" [@@bs.val];
  external createNodeIterator: RootNodeT => 516. => filter::(option NodeFilterInterface) => NodeIterator = "document.createNodeIterator" [@@bs.val];
  external createNodeIterator: RootNodeT => 517. => filter::(option NodeFilterInterface) => NodeIterator = "document.createNodeIterator" [@@bs.val];
  external createNodeIterator: RootNodeT => 640. => filter::(option NodeFilterInterface) => NodeIterator = "document.createNodeIterator" [@@bs.val];
  external createNodeIterator: RootNodeT => 641. => filter::(option NodeFilterInterface) => NodeIterator = "document.createNodeIterator" [@@bs.val];
  external createNodeIterator: RootNodeT => 644. => filter::(option NodeFilterInterface) => NodeIterator = "document.createNodeIterator" [@@bs.val];
  external createNodeIterator: RootNodeT => 645. => filter::(option NodeFilterInterface) => NodeIterator = "document.createNodeIterator" [@@bs.val];
  external createNodeIterator: RootNodeT => 768. => filter::(option NodeFilterInterface) => NodeIterator = "document.createNodeIterator" [@@bs.val];
  external createNodeIterator: RootNodeT => 769. => filter::(option NodeFilterInterface) => NodeIterator = "document.createNodeIterator" [@@bs.val];
  external createNodeIterator: RootNodeT => 772. => filter::(option NodeFilterInterface) => NodeIterator = "document.createNodeIterator" [@@bs.val];
  external createNodeIterator: RootNodeT => 773. => filter::(option NodeFilterInterface) => NodeIterator = "document.createNodeIterator" [@@bs.val];
  external createNodeIterator: RootNodeT => 896. => filter::(option NodeFilterInterface) => NodeIterator = "document.createNodeIterator" [@@bs.val];
  external createNodeIterator: RootNodeT => 897. => filter::(option NodeFilterInterface) => NodeIterator = "document.createNodeIterator" [@@bs.val];
  external createNodeIterator: RootNodeT => 900. => filter::(option NodeFilterInterface) => NodeIterator = "document.createNodeIterator" [@@bs.val];
  external createNodeIterator: RootNodeT => 901. => filter::(option NodeFilterInterface) => NodeIterator = "document.createNodeIterator" [@@bs.val];
  external createTreeWalker: RootNodeT => 256. => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "document.createTreeWalker" [@@bs.val];
  external createTreeWalker: RootNodeT => 257. => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "document.createTreeWalker" [@@bs.val];
  external createTreeWalker: RootNodeT => 260. => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "document.createTreeWalker" [@@bs.val];
  external createTreeWalker: RootNodeT => 261. => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "document.createTreeWalker" [@@bs.val];
  external createTreeWalker: RootNodeT => 384. => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "document.createTreeWalker" [@@bs.val];
  external createTreeWalker: RootNodeT => 385. => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "document.createTreeWalker" [@@bs.val];
  external createTreeWalker: RootNodeT => 388. => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "document.createTreeWalker" [@@bs.val];
  external createTreeWalker: RootNodeT => 389. => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "document.createTreeWalker" [@@bs.val];
  external createTreeWalker: RootNodeT => 512. => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "document.createTreeWalker" [@@bs.val];
  external createTreeWalker: RootNodeT => 513. => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "document.createTreeWalker" [@@bs.val];
  external createTreeWalker: RootNodeT => 516. => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "document.createTreeWalker" [@@bs.val];
  external createTreeWalker: RootNodeT => 517. => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "document.createTreeWalker" [@@bs.val];
  external createTreeWalker: RootNodeT => 640. => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "document.createTreeWalker" [@@bs.val];
  external createTreeWalker: RootNodeT => 641. => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "document.createTreeWalker" [@@bs.val];
  external createTreeWalker: RootNodeT => 644. => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "document.createTreeWalker" [@@bs.val];
  external createTreeWalker: RootNodeT => 645. => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "document.createTreeWalker" [@@bs.val];
  external createTreeWalker: RootNodeT => 768. => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "document.createTreeWalker" [@@bs.val];
  external createTreeWalker: RootNodeT => 769. => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "document.createTreeWalker" [@@bs.val];
  external createTreeWalker: RootNodeT => 772. => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "document.createTreeWalker" [@@bs.val];
  external createTreeWalker: RootNodeT => 773. => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "document.createTreeWalker" [@@bs.val];
  external createTreeWalker: RootNodeT => 896. => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "document.createTreeWalker" [@@bs.val];
  external createTreeWalker: RootNodeT => 897. => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "document.createTreeWalker" [@@bs.val];
  external createTreeWalker: RootNodeT => 900. => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "document.createTreeWalker" [@@bs.val];
  external createTreeWalker: RootNodeT => 901. => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "document.createTreeWalker" [@@bs.val];
  external createNodeIterator: RootNodeT => 1024. => filter::(option NodeFilterInterface) => NodeIterator = "document.createNodeIterator" [@@bs.val];
  external createNodeIterator: RootNodeT => 1025. => filter::(option NodeFilterInterface) => NodeIterator = "document.createNodeIterator" [@@bs.val];
  external createNodeIterator: RootNodeT => 1028. => filter::(option NodeFilterInterface) => NodeIterator = "document.createNodeIterator" [@@bs.val];
  external createNodeIterator: RootNodeT => 1029. => filter::(option NodeFilterInterface) => NodeIterator = "document.createNodeIterator" [@@bs.val];
  external createNodeIterator: RootNodeT => 1152. => filter::(option NodeFilterInterface) => NodeIterator = "document.createNodeIterator" [@@bs.val];
  external createNodeIterator: RootNodeT => 1153. => filter::(option NodeFilterInterface) => NodeIterator = "document.createNodeIterator" [@@bs.val];
  external createNodeIterator: RootNodeT => 1156. => filter::(option NodeFilterInterface) => NodeIterator = "document.createNodeIterator" [@@bs.val];
  external createNodeIterator: RootNodeT => 1157. => filter::(option NodeFilterInterface) => NodeIterator = "document.createNodeIterator" [@@bs.val];
  external createTreeWalker: RootNodeT => 1024. => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "document.createTreeWalker" [@@bs.val];
  external createTreeWalker: RootNodeT => 1025. => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "document.createTreeWalker" [@@bs.val];
  external createTreeWalker: RootNodeT => 1028. => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "document.createTreeWalker" [@@bs.val];
  external createTreeWalker: RootNodeT => 1029. => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "document.createTreeWalker" [@@bs.val];
  external createTreeWalker: RootNodeT => 1152. => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "document.createTreeWalker" [@@bs.val];
  external createTreeWalker: RootNodeT => 1153. => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "document.createTreeWalker" [@@bs.val];
  external createTreeWalker: RootNodeT => 1156. => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "document.createTreeWalker" [@@bs.val];
  external createTreeWalker: RootNodeT => 1157. => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "document.createTreeWalker" [@@bs.val];
  external createNodeIterator: RootNodeT => 1. => filter::(option NodeFilterInterface) => NodeIterator = "document.createNodeIterator" [@@bs.val];
  external createNodeIterator: RootNodeT => 4. => filter::(option NodeFilterInterface) => NodeIterator = "document.createNodeIterator" [@@bs.val];
  external createNodeIterator: RootNodeT => 5. => filter::(option NodeFilterInterface) => NodeIterator = "document.createNodeIterator" [@@bs.val];
  external createNodeIterator: RootNodeT => 128. => filter::(option NodeFilterInterface) => NodeIterator = "document.createNodeIterator" [@@bs.val];
  external createNodeIterator: RootNodeT => 129. => filter::(option NodeFilterInterface) => NodeIterator = "document.createNodeIterator" [@@bs.val];
  external createNodeIterator: RootNodeT => 132. => filter::(option NodeFilterInterface) => NodeIterator = "document.createNodeIterator" [@@bs.val];
  external createNodeIterator: RootNodeT => 133. => filter::(option NodeFilterInterface) => NodeIterator = "document.createNodeIterator" [@@bs.val];
  external createNodeIterator: RootNodeT => -1. => filter::(option NodeFilterInterface) => NodeIterator = "document.createNodeIterator" [@@bs.val];
  external createTreeWalker: RootNodeT => 1. => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "document.createTreeWalker" [@@bs.val];
  external createTreeWalker: RootNodeT => 4. => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "document.createTreeWalker" [@@bs.val];
  external createTreeWalker: RootNodeT => 5. => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "document.createTreeWalker" [@@bs.val];
  external createTreeWalker: RootNodeT => 128. => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "document.createTreeWalker" [@@bs.val];
  external createTreeWalker: RootNodeT => 129. => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "document.createTreeWalker" [@@bs.val];
  external createTreeWalker: RootNodeT => 132. => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "document.createTreeWalker" [@@bs.val];
  external createTreeWalker: RootNodeT => 133. => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "document.createTreeWalker" [@@bs.val];
  external createTreeWalker: RootNodeT => -1. => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "document.createTreeWalker" [@@bs.val];
  external createNodeIterator: RootNodeT => float => filter::(option NodeFilterInterface) => NodeIterator = "document.createNodeIterator" [@@bs.val];
  external createTreeWalker: RootNodeT => float => filter::(option NodeFilterInterface) => entityReferenceExpansion::(option bool) => TreeWalker = "document.createTreeWalker" [@@bs.val];
  external createNodeIterator: RootNodeT => unit => NodeIterator = "document.createNodeIterator" [@@bs.val];
  external createTreeWalker: RootNodeT => unit => TreeWalker = "document.createTreeWalker" [@@bs.val];
};
let module DOMTokenList = {
  type t;
  external length: float = "" [@@bs.get];
  external item: t => float => string = "" [@@bs.send];
  external contains: t => string => bool = "" [@@bs.send];
  external add: t => string => unit = "" [@@bs.send];
  external remove: t => string => unit = "" [@@bs.send];
  external toggle: t => string => bool = "" [@@bs.send];
};
let module Element = {
  type t;
  external attributes: NamedNodeMap = "" [@@bs.get];
  external childElementCount: float = "" [@@bs.get];
  external children: HTMLCollection = "" [@@bs.get];
  external classList: DOMTokenList = "" [@@bs.get];
  external className: string = "" [@@bs.get];
  external clientHeight: float = "" [@@bs.get];
  external clientLeft: float = "" [@@bs.get];
  external clientTop: float = "" [@@bs.get];
  external clientWidth: float = "" [@@bs.get];
  external firstElementChild: TODO = "" [@@bs.get];
  external id: string = "" [@@bs.get];
  external innerHTML: string = "" [@@bs.get];
  external lastElementChild: TODO = "" [@@bs.get];
  external localName: string = "" [@@bs.get];
  external namespaceURI: TODO = "" [@@bs.get];
  external nextElementSibling: TODO = "" [@@bs.get];
  external outerHTML: string = "" [@@bs.get];
  external prefix: string = "" [@@bs.get];
  external previousElementSibling: TODO = "" [@@bs.get];
  external scrollHeight: float = "" [@@bs.get];
  external scrollLeft: float = "" [@@bs.get];
  external scrollTop: float = "" [@@bs.get];
  external scrollWidth: float = "" [@@bs.get];
  external tagName: string = "" [@@bs.get];
  external closest: t => string => TODO = "" [@@bs.send];
  external dispatchEvent: t => Event => bool = "" [@@bs.send];
  external getAttribute: t => name::(option string) => string = "" [@@bs.send];
  external getAttributeNS: t => string => string => string = "" [@@bs.send];
  external getAttributeNode: t => string => Attr = "" [@@bs.send];
  external getAttributeNodeNS: t => string => string => Attr = "" [@@bs.send];
  external getBoundingClientRect: t => unit => ClientRect = "" [@@bs.send];
  external getClientRects: t => unit => TODO = "" [@@bs.send];
  external getElementsByClassName: t => string => HTMLCollection = "" [@@bs.send];
  external getElementsByTagName: t => "a" => HTMLCollection = "" [@@bs.send];
  external getElementsByTagName: t => "audio" => HTMLCollection = "" [@@bs.send];
  external getElementsByTagName: t => "button" => HTMLCollection = "" [@@bs.send];
  external getElementsByTagName: t => "canvas" => HTMLCollection = "" [@@bs.send];
  external getElementsByTagName: t => "div" => HTMLCollection = "" [@@bs.send];
  external getElementsByTagName: t => "form" => HTMLCollection = "" [@@bs.send];
  external getElementsByTagName: t => "iframe" => HTMLCollection = "" [@@bs.send];
  external getElementsByTagName: t => "img" => HTMLCollection = "" [@@bs.send];
  external getElementsByTagName: t => "input" => HTMLCollection = "" [@@bs.send];
  external getElementsByTagName: t => "label" => HTMLCollection = "" [@@bs.send];
  external getElementsByTagName: t => "link" => HTMLCollection = "" [@@bs.send];
  external getElementsByTagName: t => "media" => HTMLCollection = "" [@@bs.send];
  external getElementsByTagName: t => "option" => HTMLCollection = "" [@@bs.send];
  external getElementsByTagName: t => "p" => HTMLCollection = "" [@@bs.send];
  external getElementsByTagName: t => "script" => HTMLCollection = "" [@@bs.send];
  external getElementsByTagName: t => "select" => HTMLCollection = "" [@@bs.send];
  external getElementsByTagName: t => "source" => HTMLCollection = "" [@@bs.send];
  external getElementsByTagName: t => "span" => HTMLCollection = "" [@@bs.send];
  external getElementsByTagName: t => "style" => HTMLCollection = "" [@@bs.send];
  external getElementsByTagName: t => "textarea" => HTMLCollection = "" [@@bs.send];
  external getElementsByTagName: t => "video" => HTMLCollection = "" [@@bs.send];
  external getElementsByTagName: t => "tr" => HTMLCollection = "" [@@bs.send];
  external getElementsByTagName: t => TODO => HTMLCollection = "" [@@bs.send];
  external getElementsByTagName: t => string => HTMLCollection = "" [@@bs.send];
  external getElementsByTagNameNS: t => string => "a" => HTMLCollection = "" [@@bs.send];
  external getElementsByTagNameNS: t => string => "audio" => HTMLCollection = "" [@@bs.send];
  external getElementsByTagNameNS: t => string => "button" => HTMLCollection = "" [@@bs.send];
  external getElementsByTagNameNS: t => string => "canvas" => HTMLCollection = "" [@@bs.send];
  external getElementsByTagNameNS: t => string => "div" => HTMLCollection = "" [@@bs.send];
  external getElementsByTagNameNS: t => string => "form" => HTMLCollection = "" [@@bs.send];
  external getElementsByTagNameNS: t => string => "iframe" => HTMLCollection = "" [@@bs.send];
  external getElementsByTagNameNS: t => string => "img" => HTMLCollection = "" [@@bs.send];
  external getElementsByTagNameNS: t => string => "input" => HTMLCollection = "" [@@bs.send];
  external getElementsByTagNameNS: t => string => "label" => HTMLCollection = "" [@@bs.send];
  external getElementsByTagNameNS: t => string => "link" => HTMLCollection = "" [@@bs.send];
  external getElementsByTagNameNS: t => string => "media" => HTMLCollection = "" [@@bs.send];
  external getElementsByTagNameNS: t => string => "option" => HTMLCollection = "" [@@bs.send];
  external getElementsByTagNameNS: t => string => "p" => HTMLCollection = "" [@@bs.send];
  external getElementsByTagNameNS: t => string => "script" => HTMLCollection = "" [@@bs.send];
  external getElementsByTagNameNS: t => string => "select" => HTMLCollection = "" [@@bs.send];
  external getElementsByTagNameNS: t => string => "source" => HTMLCollection = "" [@@bs.send];
  external getElementsByTagNameNS: t => string => "span" => HTMLCollection = "" [@@bs.send];
  external getElementsByTagNameNS: t => string => "style" => HTMLCollection = "" [@@bs.send];
  external getElementsByTagNameNS: t => string => "textarea" => HTMLCollection = "" [@@bs.send];
  external getElementsByTagNameNS: t => string => "video" => HTMLCollection = "" [@@bs.send];
  external getElementsByTagNameNS: t => string => "tr" => HTMLCollection = "" [@@bs.send];
  external getElementsByTagNameNS: t => string => TODO => HTMLCollection = "" [@@bs.send];
  external getElementsByTagNameNS: t => string => string => HTMLCollection = "" [@@bs.send];
  external hasAttribute: t => string => bool = "" [@@bs.send];
  external hasAttributeNS: t => string => string => bool = "" [@@bs.send];
  external insertAdjacentElement: t => TODO => Element => unit = "" [@@bs.send];
  external insertAdjacentHTML: t => TODO => string => unit = "" [@@bs.send];
  external insertAdjacentText: t => TODO => string => unit = "" [@@bs.send];
  external matches: t => string => bool = "" [@@bs.send];
  external querySelector: t => string => HTMLElement = "" [@@bs.send];
  external querySelectorAll: t => string => NodeList = "" [@@bs.send];
  external releasePointerCapture: t => string => unit = "" [@@bs.send];
  external remove: t => unit => unit = "" [@@bs.send];
  external removeAttribute: t => name::(option string) => unit = "" [@@bs.send];
  external removeAttributeNode: t => Attr => Attr = "" [@@bs.send];
  external removeAttributeNS: t => string => string => unit = "" [@@bs.send];
  external requestFullscren: t => unit => unit = "" [@@bs.send];
  external requestPointerLock: t => unit => unit = "" [@@bs.send];
  external scrollIntoView: t => arg::(option TODO) => unit = "" [@@bs.send];
  external setAttribute: t => name::(option string) => value::(option string) => unit = "" [@@bs.send];
  external setAttributeNS: t => string => string => string => unit = "" [@@bs.send];
  external setAttributeNode: t => Attr => Attr = "" [@@bs.send];
  external setAttributeNodeNS: t => Attr => Attr = "" [@@bs.send];
  external setPointerCapture: t => string => unit = "" [@@bs.send];
};
let module HTMLElement = {
  type t;
  external blur: t => unit => unit = "" [@@bs.send];
  external click: t => unit => unit = "" [@@bs.send];
  external focus: t => unit => unit = "" [@@bs.send];
  external getBoundingClientRect: t => unit => ClientRect = "" [@@bs.send];
  external forceSpellcheck: t => unit => unit = "" [@@bs.send];
  external accessKey: string = "" [@@bs.get];
  external accessKeyLabel: string = "" [@@bs.get];
  external className: string = "" [@@bs.get];
  external contentEditable: string = "" [@@bs.get];
  external contextMenu: TODO = "" [@@bs.get];
  external dataset: TODO = "" [@@bs.get];
  external dir: TODO = "" [@@bs.get];
  external draggable: bool = "" [@@bs.get];
  external dropzone: 'a = "" [@@bs.get];
  external hidden: bool = "" [@@bs.get];
  external id: string = "" [@@bs.get];
  external innerHTML: string = "" [@@bs.get];
  external isContentEditable: bool = "" [@@bs.get];
  external itemProp: 'a = "" [@@bs.get];
  external itemScope: bool = "" [@@bs.get];
  external itemType: 'a = "" [@@bs.get];
  external itemValue: Object = "" [@@bs.get];
  external lang: string = "" [@@bs.get];
  external offsetHeight: float = "" [@@bs.get];
  external offsetLeft: float = "" [@@bs.get];
  external offsetParent: Element = "" [@@bs.get];
  external offsetTop: float = "" [@@bs.get];
  external offsetWidth: float = "" [@@bs.get];
  external onabort: TODO = "" [@@bs.get];
  external onblur: TODO = "" [@@bs.get];
  external oncancel: TODO = "" [@@bs.get];
  external oncanplay: TODO = "" [@@bs.get];
  external oncanplaythrough: TODO = "" [@@bs.get];
  external onchange: TODO = "" [@@bs.get];
  external onclick: TODO = "" [@@bs.get];
  external oncuechange: TODO = "" [@@bs.get];
  external ondblclick: TODO = "" [@@bs.get];
  external ondurationchange: TODO = "" [@@bs.get];
  external onemptied: TODO = "" [@@bs.get];
  external onended: TODO = "" [@@bs.get];
  external onerror: TODO = "" [@@bs.get];
  external onfocus: TODO = "" [@@bs.get];
  external oninput: TODO = "" [@@bs.get];
  external oninvalid: TODO = "" [@@bs.get];
  external onkeydown: TODO = "" [@@bs.get];
  external onkeypress: TODO = "" [@@bs.get];
  external onkeyup: TODO = "" [@@bs.get];
  external onload: TODO = "" [@@bs.get];
  external onloadeddata: TODO = "" [@@bs.get];
  external onloadedmetadata: TODO = "" [@@bs.get];
  external onloadstart: TODO = "" [@@bs.get];
  external onmousedown: TODO = "" [@@bs.get];
  external onmouseenter: TODO = "" [@@bs.get];
  external onmouseleave: TODO = "" [@@bs.get];
  external onmousemove: TODO = "" [@@bs.get];
  external onmouseout: TODO = "" [@@bs.get];
  external onmouseover: TODO = "" [@@bs.get];
  external onmouseup: TODO = "" [@@bs.get];
  external onmousewheel: TODO = "" [@@bs.get];
  external onpause: TODO = "" [@@bs.get];
  external onplay: TODO = "" [@@bs.get];
  external onplaying: TODO = "" [@@bs.get];
  external onprogress: TODO = "" [@@bs.get];
  external onratechange: TODO = "" [@@bs.get];
  external onreadystatechange: TODO = "" [@@bs.get];
  external onreset: TODO = "" [@@bs.get];
  external onresize: TODO = "" [@@bs.get];
  external onscroll: TODO = "" [@@bs.get];
  external onseeked: TODO = "" [@@bs.get];
  external onseeking: TODO = "" [@@bs.get];
  external onselect: TODO = "" [@@bs.get];
  external onshow: TODO = "" [@@bs.get];
  external onstalled: TODO = "" [@@bs.get];
  external onsubmit: TODO = "" [@@bs.get];
  external onsuspend: TODO = "" [@@bs.get];
  external ontimeupdate: TODO = "" [@@bs.get];
  external ontoggle: TODO = "" [@@bs.get];
  external onvolumechange: TODO = "" [@@bs.get];
  external onwaiting: TODO = "" [@@bs.get];
  external properties: 'a = "" [@@bs.get];
  external spellcheck: bool = "" [@@bs.get];
  external style: CSSStyleDeclaration = "" [@@bs.get];
  external tabIndex: float = "" [@@bs.get];
  external title: string = "" [@@bs.get];
  external translate: bool = "" [@@bs.get];
};
let module HTMLTableCellElement = {
  type t;
  external colSpan: float = "" [@@bs.get];
  external rowSpan: float = "" [@@bs.get];
  external cellIndex: float = "" [@@bs.get];
};
let module HTMLTableRowElement = {
  type t;
  external align: TODO = "" [@@bs.get];
  external rowIndex: float = "" [@@bs.get];
  external deleteCell: t => float => unit = "" [@@bs.send];
  external insertCell: t => float => HTMLTableCellElement = "" [@@bs.send];
};
let module HTMLMenuElement = {
  type t;
  external getCompact: t => unit => bool = "" [@@bs.send];
  external setCompact: t => bool => unit = "" [@@bs.send];
};
let module HTMLBaseElement = {
  type t;
  external href: string = "" [@@bs.get];
  external target: string = "" [@@bs.get];
};
let module CanvasGradient = {
  type t;
  external addColorStop: t => float => string => unit = "" [@@bs.send];
};
let module CanvasPattern = {
  type t;
  external setTransform: t => SVGMatrix => unit = "" [@@bs.send];
};
let module ImageBitmap = {
  type t;
  external close: t => unit => unit = "" [@@bs.send];
  external width: float = "" [@@bs.get];
  external height: float = "" [@@bs.get];
};
type TODO;
type TODO;
let module HitRegionOptions = {
  type t;
  external path: Path2D = "" [@@bs.get];
  external fillRule: CanvasFillRule = "" [@@bs.get];
  external id: string = "" [@@bs.get];
  external parentID: string = "" [@@bs.get];
  external cursor: string = "" [@@bs.get];
  external control: Element = "" [@@bs.get];
  external label: TODO = "" [@@bs.get];
  external role: TODO = "" [@@bs.get];
};
let module CanvasDrawingStyles = {
  type t;
  external lineWidth: float = "" [@@bs.get];
  external lineCap: string = "" [@@bs.get];
  external lineJoin: string = "" [@@bs.get];
  external miterLimit: float = "" [@@bs.get];
  external setLineDash: t => Array => unit = "" [@@bs.send];
  external getLineDash: t => unit => Array = "" [@@bs.send];
  external lineDashOffset: float = "" [@@bs.get];
  external font: string = "" [@@bs.get];
  external textAlign: string = "" [@@bs.get];
  external textBaseline: string = "" [@@bs.get];
  external direction: string = "" [@@bs.get];
};
let module SVGMatrix = {
  type t;
  external getComponent: t => float => float = "" [@@bs.send];
  external mMultiply: t => SVGMatrix => SVGMatrix = "" [@@bs.send];
  external inverse: t => unit => SVGMatrix = "" [@@bs.send];
  external mTranslate: t => float => float => SVGMatrix = "" [@@bs.send];
  external mScale: t => float => SVGMatrix = "" [@@bs.send];
  external mRotate: t => float => SVGMatrix = "" [@@bs.send];
};
let module TextMetrics = {
  type t;
  external width: float = "" [@@bs.get];
  external actualBoundingBoxLeft: float = "" [@@bs.get];
  external actualBoundingBoxRight: float = "" [@@bs.get];
  external fontBoundingBoxAscent: float = "" [@@bs.get];
  external fontBoundingBoxDescent: float = "" [@@bs.get];
  external actualBoundingBoxAscent: float = "" [@@bs.get];
  external actualBoundingBoxDescent: float = "" [@@bs.get];
  external emHeightAscent: float = "" [@@bs.get];
  external emHeightDescent: float = "" [@@bs.get];
  external hangingBaseline: float = "" [@@bs.get];
  external alphabeticBaseline: float = "" [@@bs.get];
  external ideographicBaseline: float = "" [@@bs.get];
};
let module Path2D = {
  type t;
  external addPath: t => Path2D => transformation::(option TODO) => unit = "" [@@bs.send];
  external addPathByStrokingPath: t => Path2D => CanvasDrawingStyles => transformation::(option TODO) => unit = "" [@@bs.send];
  external addText: t => string => CanvasDrawingStyles => TODO => float => float => maxWidth::(option float) => unit = "" [@@bs.send];
  external addPathByStrokingText: t => string => CanvasDrawingStyles => TODO => float => float => maxWidth::(option float) => unit = "" [@@bs.send];
  external addText: t => string => CanvasDrawingStyles => TODO => Path2D => maxWidth::(option float) => unit = "" [@@bs.send];
  external addPathByStrokingText: t => string => CanvasDrawingStyles => TODO => Path2D => maxWidth::(option float) => unit = "" [@@bs.send];
  external arc: t => float => float => float => float => float => anticlockwise::(option bool) => unit = "" [@@bs.send];
  external arcTo: t => float => float => float => float => float => unit => unit => unit = "" [@@bs.send];
  external arcTo: t => float => float => float => float => float => float => float => unit = "" [@@bs.send];
  external bezierCurveTo: t => float => float => float => float => float => float => unit = "" [@@bs.send];
  external closePath: t => unit => unit = "" [@@bs.send];
  external ellipse: t => float => float => float => float => float => float => float => anticlockwise::(option bool) => unit = "" [@@bs.send];
  external lineTo: t => float => float => unit = "" [@@bs.send];
  external moveTo: t => float => float => unit = "" [@@bs.send];
  external quadraticCurveTo: t => float => float => float => float => unit = "" [@@bs.send];
  external rect: t => float => float => float => float => unit = "" [@@bs.send];
};
let module ImageData = {
  type t;
  external width: float = "" [@@bs.get];
  external height: float = "" [@@bs.get];
  external data: Uint8ClampedArray = "" [@@bs.get];
};
let module CanvasRenderingContext2D = {
  type t;
  external canvas: HTMLCanvasElement = "" [@@bs.get];
  external width: float = "" [@@bs.get];
  external height: float = "" [@@bs.get];
  external commit: t => unit => unit = "" [@@bs.send];
  external save: t => unit => unit = "" [@@bs.send];
  external restore: t => unit => unit = "" [@@bs.send];
  external currentTransform: SVGMatrix = "" [@@bs.get];
  external scale: t => float => float => unit = "" [@@bs.send];
  external rotate: t => float => unit = "" [@@bs.send];
  external translate: t => float => float => unit = "" [@@bs.send];
  external transform: t => float => float => float => float => float => float => unit = "" [@@bs.send];
  external setTransform: t => float => float => float => float => float => float => unit = "" [@@bs.send];
  external resetTransform: t => unit => unit = "" [@@bs.send];
  external globalAlpha: float = "" [@@bs.get];
  external globalCompositeOperation: string = "" [@@bs.get];
  external imageSmoothingEnabled: bool = "" [@@bs.get];
  external strokeStyle: TODO = "" [@@bs.get];
  external fillStyle: TODO = "" [@@bs.get];
  external createLinearGradient: t => float => float => float => float => CanvasGradient = "" [@@bs.send];
  external createRadialGradient: t => float => float => float => float => float => float => CanvasGradient = "" [@@bs.send];
  external createPattern: t => CanvasImageSource => TODO => CanvasPattern = "" [@@bs.send];
  external shadowOffsetX: float = "" [@@bs.get];
  external shadowOffsetY: float = "" [@@bs.get];
  external shadowBlur: float = "" [@@bs.get];
  external shadowColor: string = "" [@@bs.get];
  external clearRect: t => float => float => float => float => unit = "" [@@bs.send];
  external fillRect: t => float => float => float => float => unit = "" [@@bs.send];
  external strokeRect: t => float => float => float => float => unit = "" [@@bs.send];
  external beginPath: t => unit => unit = "" [@@bs.send];
  external fill: t => fillRule::(option CanvasFillRule) => unit = "" [@@bs.send];
  external fill: t => Path2D => fillRule::(option CanvasFillRule) => unit = "" [@@bs.send];
  external stroke: t => unit => unit = "" [@@bs.send];
  external stroke: t => Path2D => unit = "" [@@bs.send];
  external drawFocusIfNeeded: t => Element => unit = "" [@@bs.send];
  external drawFocusIfNeeded: t => Path2D => Element => unit = "" [@@bs.send];
  external scrollPathIntoView: t => unit => unit = "" [@@bs.send];
  external scrollPathIntoView: t => Path2D => unit = "" [@@bs.send];
  external clip: t => fillRule::(option CanvasFillRule) => unit = "" [@@bs.send];
  external clip: t => Path2D => fillRule::(option CanvasFillRule) => unit = "" [@@bs.send];
  external resetClip: t => unit => unit = "" [@@bs.send];
  external isPointInPath: t => float => float => fillRule::(option CanvasFillRule) => bool = "" [@@bs.send];
  external isPointInPath: t => Path2D => float => float => fillRule::(option CanvasFillRule) => bool = "" [@@bs.send];
  external isPointInStroke: t => float => float => bool = "" [@@bs.send];
  external isPointInStroke: t => Path2D => float => float => bool = "" [@@bs.send];
  external fillText: t => string => float => float => maxWidth::(option float) => unit = "" [@@bs.send];
  external strokeText: t => string => float => float => maxWidth::(option float) => unit = "" [@@bs.send];
  external measureText: t => string => TextMetrics = "" [@@bs.send];
  external drawImage: t => CanvasImageSource => float => float => unit = "" [@@bs.send];
  external drawImage: t => CanvasImageSource => float => float => float => float => unit = "" [@@bs.send];
  external drawImage: t => CanvasImageSource => float => float => float => float => float => float => float => float => unit = "" [@@bs.send];
  external addHitRegion: t => options::(option HitRegionOptions) => unit = "" [@@bs.send];
  external removeHitRegion: t => string => unit = "" [@@bs.send];
  external clearHitRegions: t => unit => unit = "" [@@bs.send];
  external createImageData: t => float => float => ImageData = "" [@@bs.send];
  external createImageData: t => ImageData => ImageData = "" [@@bs.send];
  external getImageData: t => float => float => float => float => ImageData = "" [@@bs.send];
  external putImageData: t => ImageData => float => float => unit = "" [@@bs.send];
  external putImageData: t => ImageData => float => float => float => float => float => float => unit = "" [@@bs.send];
  external lineWidth: float = "" [@@bs.get];
  external lineCap: string = "" [@@bs.get];
  external lineJoin: string = "" [@@bs.get];
  external miterLimit: float = "" [@@bs.get];
  external setLineDash: t => Array => unit = "" [@@bs.send];
  external getLineDash: t => unit => Array = "" [@@bs.send];
  external lineDashOffset: float = "" [@@bs.get];
  external font: string = "" [@@bs.get];
  external textAlign: string = "" [@@bs.get];
  external textBaseline: string = "" [@@bs.get];
  external direction: string = "" [@@bs.get];
  external closePath: t => unit => unit = "" [@@bs.send];
  external moveTo: t => float => float => unit = "" [@@bs.send];
  external lineTo: t => float => float => unit = "" [@@bs.send];
  external quadraticCurveTo: t => float => float => float => float => unit = "" [@@bs.send];
  external bezierCurveTo: t => float => float => float => float => float => float => unit = "" [@@bs.send];
  external arcTo: t => float => float => float => float => float => unit = "" [@@bs.send];
  external arcTo: t => float => float => float => float => float => float => float => unit = "" [@@bs.send];
  external rect: t => float => float => float => float => unit = "" [@@bs.send];
  external arc: t => float => float => float => float => float => anticlockwise::(option bool) => unit = "" [@@bs.send];
  external ellipse: t => float => float => float => float => float => float => float => anticlockwise::(option bool) => unit = "" [@@bs.send];
};
let module WebGLRenderingContext = {
  type t;
};
type TODO;
let module HTMLCanvasElement = {
  type t;
  external width: float = "" [@@bs.get];
  external height: float = "" [@@bs.get];
  external getContext: t => "2d" => array 'rest => TODO = "" [@@bs.send] [@@bs.splice];
  external getContext: t => "webgl" => array 'rest => TODO = "" [@@bs.send] [@@bs.splice];
  external getContext: t => string => array 'rest => TODO = "" [@@bs.send] [@@bs.splice];
  external toDataURL: t => type::(option string) => array 'rest => string = "" [@@bs.send] [@@bs.splice];
  external toBlob: t => File => unit => type::(option string) => array 'rest => unit = "" [@@bs.send] [@@bs.splice];
};
let module HTMLFormElement = {
  type t;
  external acceptCharset: string = "" [@@bs.get];
  external action: string = "" [@@bs.get];
  external elements: HTMLCollection = "" [@@bs.get];
  external encoding: string = "" [@@bs.get];
  external enctype: string = "" [@@bs.get];
  external length: float = "" [@@bs.get];
  external method: string = "" [@@bs.get];
  external name: string = "" [@@bs.get];
  external target: string = "" [@@bs.get];
  external checkValidity: t => unit => bool = "" [@@bs.send];
  external item: t => name::(option 'a) => index::(option 'a) => 'a = "" [@@bs.send];
  external namedItem: t => string => 'a = "" [@@bs.send];
  external reset: t => unit => unit = "" [@@bs.send];
  external submit: t => unit => unit = "" [@@bs.send];
};
let module HTMLIFrameElement = {
  type t;
  external allowFullScreen: bool = "" [@@bs.get];
  external frameBorder: string = "" [@@bs.get];
  external height: string = "" [@@bs.get];
  external marginHeight: string = "" [@@bs.get];
  external marginWidth: string = "" [@@bs.get];
  external name: string = "" [@@bs.get];
  external scrolling: string = "" [@@bs.get];
  external sandbox: DOMTokenList = "" [@@bs.get];
  external src: string = "" [@@bs.get];
  external srcDoc: string = "" [@@bs.get];
  external width: string = "" [@@bs.get];
};
let module HTMLImageElement = {
  type t;
  external alt: string = "" [@@bs.get];
  external complete: bool = "" [@@bs.get];
  external crossOrigin: TODO = "" [@@bs.get];
  external currentSrc: string = "" [@@bs.get];
  external height: float = "" [@@bs.get];
  external isMap: bool = "" [@@bs.get];
  external naturalHeight: float = "" [@@bs.get];
  external naturalWidth: float = "" [@@bs.get];
  external sizes: string = "" [@@bs.get];
  external src: string = "" [@@bs.get];
  external srcset: string = "" [@@bs.get];
  external useMap: string = "" [@@bs.get];
  external width: float = "" [@@bs.get];
};
let module Image = {
  type t;
  external constructor: t => width::(option float) => height::(option float) => unit = "" [@@bs.send];
};
let module MediaError = {
  type t;
  external _MEDIA_ERR_ABORTED: float = "" [@@bs.get];
  external _MEDIA_ERR_NETWORK: float = "" [@@bs.get];
  external _MEDIA_ERR_DECODE: float = "" [@@bs.get];
  external _MEDIA_ERR_SRC_NOT_SUPPORTED: float = "" [@@bs.get];
  external code: float = "" [@@bs.get];
};
let module TimeRanges = {
  type t;
  external length: float = "" [@@bs.get];
  external start: t => float => float = "" [@@bs.send];
  external end: t => float => float = "" [@@bs.send];
};
let module AudioTrack = {
  type t;
  external id: string = "" [@@bs.get];
  external kind: string = "" [@@bs.get];
  external label: string = "" [@@bs.get];
  external language: string = "" [@@bs.get];
  external enabled: bool = "" [@@bs.get];
};
let module AudioTrackList = {
  type t;
  external length: float = "" [@@bs.get];
  external getTrackById: t => string => TODO = "" [@@bs.send];
  external onchange: 'a => 'a = "" [@@bs.get];
  external onaddtrack: 'a => 'a = "" [@@bs.get];
  external onremovetrack: 'a => 'a = "" [@@bs.get];
};
let module VideoTrack = {
  type t;
  external id: string = "" [@@bs.get];
  external kind: string = "" [@@bs.get];
  external label: string = "" [@@bs.get];
  external language: string = "" [@@bs.get];
  external selected: bool = "" [@@bs.get];
};
let module VideoTrackList = {
  type t;
  external length: float = "" [@@bs.get];
  external getTrackById: t => string => TODO = "" [@@bs.send];
  external selectedIndex: float = "" [@@bs.get];
  external onchange: 'a => 'a = "" [@@bs.get];
  external onaddtrack: 'a => 'a = "" [@@bs.get];
  external onremovetrack: 'a => 'a = "" [@@bs.get];
};
let module TextTrackCue = {
  type t;
  external constructor: t => float => float => string => unit = "" [@@bs.send];
  external track: TextTrack = "" [@@bs.get];
  external id: string = "" [@@bs.get];
  external startTime: float = "" [@@bs.get];
  external endTime: float = "" [@@bs.get];
  external pauseOnExit: bool = "" [@@bs.get];
  external vertical: string = "" [@@bs.get];
  external snapToLines: bool = "" [@@bs.get];
  external lines: float = "" [@@bs.get];
  external position: float = "" [@@bs.get];
  external size: float = "" [@@bs.get];
  external align: string = "" [@@bs.get];
  external text: string = "" [@@bs.get];
  external getCueAsHTML: t => unit => Node = "" [@@bs.send];
  external onenter: 'a => 'a = "" [@@bs.get];
  external onexit: 'a => 'a = "" [@@bs.get];
};
let module TextTrackCueList = {
  type t;
  external length: float = "" [@@bs.get];
  external getCueById: t => string => TODO = "" [@@bs.send];
};
let module TextTrack = {
  type t;
  external kind: string = "" [@@bs.get];
  external label: string = "" [@@bs.get];
  external language: string = "" [@@bs.get];
  external mode: string = "" [@@bs.get];
  external cues: TextTrackCueList = "" [@@bs.get];
  external activeCues: TextTrackCueList = "" [@@bs.get];
  external addCue: t => TextTrackCue => unit = "" [@@bs.send];
  external removeCue: t => TextTrackCue => unit = "" [@@bs.send];
  external oncuechange: 'a => 'a = "" [@@bs.get];
};
let module TextTrackList = {
  type t;
  external length: float = "" [@@bs.get];
  external onaddtrack: 'a => 'a = "" [@@bs.get];
  external onremovetrack: 'a => 'a = "" [@@bs.get];
};
let module HTMLMediaElement = {
  type t;
  external error: TODO = "" [@@bs.get];
  external src: string = "" [@@bs.get];
  external srcObject: TODO = "" [@@bs.get];
  external currentSrc: string = "" [@@bs.get];
  external crossOrigin: TODO = "" [@@bs.get];
  external _NETWORK_EMPTY: float = "" [@@bs.get];
  external _NETWORK_IDLE: float = "" [@@bs.get];
  external _NETWORK_LOADING: float = "" [@@bs.get];
  external _NETWORK_NO_SOURCE: float = "" [@@bs.get];
  external networkState: float = "" [@@bs.get];
  external preload: string = "" [@@bs.get];
  external buffered: TimeRanges = "" [@@bs.get];
  external load: t => unit => unit = "" [@@bs.send];
  external canPlayType: t => string => string = "" [@@bs.send];
  external _HAVE_NOTHING: float = "" [@@bs.get];
  external _HAVE_METADATA: float = "" [@@bs.get];
  external _HAVE_CURRENT_DATA: float = "" [@@bs.get];
  external _HAVE_FUTURE_DATA: float = "" [@@bs.get];
  external _HAVE_ENOUGH_DATA: float = "" [@@bs.get];
  external readyState: float = "" [@@bs.get];
  external seeking: bool = "" [@@bs.get];
  external currentTime: float = "" [@@bs.get];
  external duration: float = "" [@@bs.get];
  external startDate: Date = "" [@@bs.get];
  external paused: bool = "" [@@bs.get];
  external defaultPlaybackRate: float = "" [@@bs.get];
  external playbackRate: float = "" [@@bs.get];
  external played: TimeRanges = "" [@@bs.get];
  external seekable: TimeRanges = "" [@@bs.get];
  external ended: bool = "" [@@bs.get];
  external autoplay: bool = "" [@@bs.get];
  external loop: bool = "" [@@bs.get];
  external play: t => unit => unit = "" [@@bs.send];
  external pause: t => unit => unit = "" [@@bs.send];
  external fastSeek: t => unit => unit = "" [@@bs.send];
  external mediaGroup: string = "" [@@bs.get];
  external controller: TODO = "" [@@bs.get];
  external controls: bool = "" [@@bs.get];
  external volume: float = "" [@@bs.get];
  external muted: bool = "" [@@bs.get];
  external defaultMuted: bool = "" [@@bs.get];
  external audioTracks: AudioTrackList = "" [@@bs.get];
  external videoTracks: VideoTrackList = "" [@@bs.get];
  external textTracks: TextTrackList = "" [@@bs.get];
  external addTextTrack: t => string => label::(option string) => language::(option string) => TextTrack = "" [@@bs.send];
};
let module HTMLAudioElement = {
  type t;
};
let module HTMLVideoElement = {
  type t;
  external width: float = "" [@@bs.get];
  external height: float = "" [@@bs.get];
  external videoWidth: float = "" [@@bs.get];
  external videoHeight: float = "" [@@bs.get];
  external poster: string = "" [@@bs.get];
};
let module HTMLSourceElement = {
  type t;
  external src: string = "" [@@bs.get];
  external _type: string = "" [@@bs.get];
  external srcset: string = "" [@@bs.get];
  external sizes: string = "" [@@bs.get];
  external media: string = "" [@@bs.get];
};
let module ValidityState = {
  type t;
  external badInput: bool = "" [@@bs.get];
  external customError: bool = "" [@@bs.get];
  external patternMismatch: bool = "" [@@bs.get];
  external rangeOverflow: bool = "" [@@bs.get];
  external rangeUnderflow: bool = "" [@@bs.get];
  external stepMismatch: bool = "" [@@bs.get];
  external tooLong: bool = "" [@@bs.get];
  external typeMismatch: bool = "" [@@bs.get];
  external valueMissing: bool = "" [@@bs.get];
};
type TODO;
type TODO;
let module HTMLInputElement = {
  type t;
  external accept: string = "" [@@bs.get];
  external align: string = "" [@@bs.get];
  external alt: string = "" [@@bs.get];
  external autocomplete: string = "" [@@bs.get];
  external autofocus: bool = "" [@@bs.get];
  external border: string = "" [@@bs.get];
  external checked: bool = "" [@@bs.get];
  external complete: bool = "" [@@bs.get];
  external defaultChecked: bool = "" [@@bs.get];
  external defaultValue: string = "" [@@bs.get];
  external dirname: string = "" [@@bs.get];
  external disabled: bool = "" [@@bs.get];
  external dynsrc: string = "" [@@bs.get];
  external files: FileList = "" [@@bs.get];
  external form: TODO = "" [@@bs.get];
  external formAction: string = "" [@@bs.get];
  external formEncType: string = "" [@@bs.get];
  external formMethod: string = "" [@@bs.get];
  external formNoValidate: bool = "" [@@bs.get];
  external formTarget: string = "" [@@bs.get];
  external height: string = "" [@@bs.get];
  external hspace: float = "" [@@bs.get];
  external indeterminate: bool = "" [@@bs.get];
  external labels: NodeList = "" [@@bs.get];
  external list: TODO = "" [@@bs.get];
  external loop: float = "" [@@bs.get];
  external lowsrc: string = "" [@@bs.get];
  external max: string = "" [@@bs.get];
  external maxLength: float = "" [@@bs.get];
  external min: string = "" [@@bs.get];
  external multiple: bool = "" [@@bs.get];
  external name: string = "" [@@bs.get];
  external pattern: string = "" [@@bs.get];
  external placeholder: string = "" [@@bs.get];
  external readOnly: bool = "" [@@bs.get];
  external required: bool = "" [@@bs.get];
  external selectionDirection: SelectionDirection = "" [@@bs.get];
  external selectionEnd: float = "" [@@bs.get];
  external selectionStart: float = "" [@@bs.get];
  external size: float = "" [@@bs.get];
  external src: string = "" [@@bs.get];
  external start: string = "" [@@bs.get];
  external status: bool = "" [@@bs.get];
  external step: string = "" [@@bs.get];
  external tabIndex: float = "" [@@bs.get];
  external _type: string = "" [@@bs.get];
  external useMap: string = "" [@@bs.get];
  external validationMessage: string = "" [@@bs.get];
  external validity: ValidityState = "" [@@bs.get];
  external value: string = "" [@@bs.get];
  external valueAsDate: Date = "" [@@bs.get];
  external valueAsNumber: float = "" [@@bs.get];
  external vrml: string = "" [@@bs.get];
  external vspace: float = "" [@@bs.get];
  external width: string = "" [@@bs.get];
  external willValidate: bool = "" [@@bs.get];
  external blur: t => unit => unit = "" [@@bs.send];
  external checkValidity: t => unit => bool = "" [@@bs.send];
  external setCustomValidity: t => string => unit = "" [@@bs.send];
  external click: t => unit => unit = "" [@@bs.send];
  external createTextRange: t => unit => TextRange = "" [@@bs.send];
  external focus: t => unit => unit = "" [@@bs.send];
  external select: t => unit => unit = "" [@@bs.send];
  external setRangeText: t => string => start::(option unit) => end::(option unit) => selectMode::(option unit) => unit = "" [@@bs.send];
  external setRangeText: t => string => float => float => selectMode::(option SelectionMode) => unit = "" [@@bs.send];
  external setSelectionRange: t => float => float => direction::(option SelectionDirection) => unit = "" [@@bs.send];
};
let module HTMLButtonElement = {
  type t;
  external disabled: bool = "" [@@bs.get];
  external form: TODO = "" [@@bs.get];
  external name: string = "" [@@bs.get];
  external _type: string = "" [@@bs.get];
  external value: string = "" [@@bs.get];
  external checkValidity: t => unit => bool = "" [@@bs.send];
};
let module HTMLTextAreaElement = {
  type t;
  external autofocus: bool = "" [@@bs.get];
  external cols: float = "" [@@bs.get];
  external dirName: string = "" [@@bs.get];
  external disabled: bool = "" [@@bs.get];
  external form: TODO = "" [@@bs.get];
  external maxLength: float = "" [@@bs.get];
  external name: string = "" [@@bs.get];
  external placeholder: string = "" [@@bs.get];
  external readOnly: bool = "" [@@bs.get];
  external required: bool = "" [@@bs.get];
  external rows: float = "" [@@bs.get];
  external wrap: string = "" [@@bs.get];
  external _type: string = "" [@@bs.get];
  external defaultValue: string = "" [@@bs.get];
  external value: string = "" [@@bs.get];
  external textLength: float = "" [@@bs.get];
  external willValidate: bool = "" [@@bs.get];
  external validity: ValidityState = "" [@@bs.get];
  external validationMessage: string = "" [@@bs.get];
  external checkValidity: t => unit => bool = "" [@@bs.send];
  external setCustomValidity: t => string => unit = "" [@@bs.send];
  external labels: NodeList = "" [@@bs.get];
  external select: t => unit => unit = "" [@@bs.send];
  external selectionStart: float = "" [@@bs.get];
  external selectionEnd: float = "" [@@bs.get];
  external selectionDirection: SelectionDirection = "" [@@bs.get];
  external setSelectionRange: t => float => float => direction::(option SelectionDirection) => unit = "" [@@bs.send];
};
let module HTMLSelectElement = {
  type t;
  external disabled: bool = "" [@@bs.get];
  external form: TODO = "" [@@bs.get];
  external length: float = "" [@@bs.get];
  external multiple: bool = "" [@@bs.get];
  external name: string = "" [@@bs.get];
  external options: HTMLOptionsCollection = "" [@@bs.get];
  external selectedIndex: float = "" [@@bs.get];
  external size: float = "" [@@bs.get];
  external _type: string = "" [@@bs.get];
  external value: string = "" [@@bs.get];
  external add: t => HTMLElement => before::(option HTMLElement) => unit = "" [@@bs.send];
  external checkValidity: t => unit => bool = "" [@@bs.send];
  external remove: t => index::(option float) => unit = "" [@@bs.send];
};
let module HTMLOptionsCollection = {
  type t;
  external length: float = "" [@@bs.get];
  external item: t => float => Node = "" [@@bs.send];
  external namedItem: t => string => Node = "" [@@bs.send];
};
let module HTMLOptionElement = {
  type t;
  external defaultSelected: bool = "" [@@bs.get];
  external disabled: bool = "" [@@bs.get];
  external form: TODO = "" [@@bs.get];
  external index: float = "" [@@bs.get];
  external label: string = "" [@@bs.get];
  external selected: bool = "" [@@bs.get];
  external text: string = "" [@@bs.get];
  external value: string = "" [@@bs.get];
};
let module HTMLAnchorElement = {
  type t;
  external charset: string = "" [@@bs.get];
  external coords: string = "" [@@bs.get];
  external download: string = "" [@@bs.get];
  external hash: string = "" [@@bs.get];
  external host: string = "" [@@bs.get];
  external hostname: string = "" [@@bs.get];
  external href: string = "" [@@bs.get];
  external hreflang: string = "" [@@bs.get];
  external media: string = "" [@@bs.get];
  external name: string = "" [@@bs.get];
  external origin: string = "" [@@bs.get];
  external password: string = "" [@@bs.get];
  external pathname: string = "" [@@bs.get];
  external port: string = "" [@@bs.get];
  external protocol: string = "" [@@bs.get];
  external rel: string = "" [@@bs.get];
  external rev: string = "" [@@bs.get];
  external search: string = "" [@@bs.get];
  external shape: string = "" [@@bs.get];
  external target: string = "" [@@bs.get];
  external text: string = "" [@@bs.get];
  external _type: string = "" [@@bs.get];
  external username: string = "" [@@bs.get];
};
let module HTMLLabelElement = {
  type t;
  external form: TODO = "" [@@bs.get];
  external htmlFor: string = "" [@@bs.get];
  external control: TODO = "" [@@bs.get];
};
let module HTMLLinkElement = {
  type t;
  external crossOrigin: TODO = "" [@@bs.get];
  external href: string = "" [@@bs.get];
  external hreflang: string = "" [@@bs.get];
  external media: string = "" [@@bs.get];
  external rel: string = "" [@@bs.get];
  external sizes: DOMTokenList = "" [@@bs.get];
  external _type: string = "" [@@bs.get];
};
let module HTMLScriptElement = {
  type t;
  external async: bool = "" [@@bs.get];
  external charset: string = "" [@@bs.get];
  external crossOrigin: string = "" [@@bs.get];
  external defer: bool = "" [@@bs.get];
  external src: string = "" [@@bs.get];
  external text: string = "" [@@bs.get];
  external _type: string = "" [@@bs.get];
};
let module HTMLStyleElement = {
  type t;
  external disabled: bool = "" [@@bs.get];
  external media: string = "" [@@bs.get];
  external scoped: bool = "" [@@bs.get];
  external sheet: TODO = "" [@@bs.get];
  external _type: string = "" [@@bs.get];
};
let module HTMLParagraphElement = {
  type t;
  external align: TODO = "" [@@bs.get];
};
let module HTMLDivElement = {
  type t;
};
let module HTMLSpanElement = {
  type t;
};
let module HTMLAppletElement = {
  type t;
};
let module HTMLEmbedElement = {
  type t;
};
let module TextRange = {
  type t;
  external boundingLeft: float = "" [@@bs.get];
  external htmlText: string = "" [@@bs.get];
  external offsetLeft: float = "" [@@bs.get];
  external boundingWidth: float = "" [@@bs.get];
  external boundingHeight: float = "" [@@bs.get];
  external boundingTop: float = "" [@@bs.get];
  external text: string = "" [@@bs.get];
  external offsetTop: float = "" [@@bs.get];
  external moveToPoint: t => float => float => unit = "" [@@bs.send];
  external queryCommandValue: t => string => 'a = "" [@@bs.send];
  external getBookmark: t => unit => string = "" [@@bs.send];
  external move: t => string => count::(option float) => float = "" [@@bs.send];
  external queryCommandIndeterm: t => string => bool = "" [@@bs.send];
  external scrollIntoView: t => fStart::(option bool) => unit = "" [@@bs.send];
  external findText: t => string => count::(option float) => flags::(option float) => bool = "" [@@bs.send];
  external execCommand: t => string => showUI::(option bool) => value::(option 'a) => bool = "" [@@bs.send];
  external getBoundingClientRect: t => unit => ClientRect = "" [@@bs.send];
  external moveToBookmark: t => string => bool = "" [@@bs.send];
  external isEqual: t => TextRange => bool = "" [@@bs.send];
  external duplicate: t => unit => TextRange = "" [@@bs.send];
  external collapse: t => start::(option bool) => unit = "" [@@bs.send];
  external queryCommandText: t => string => string = "" [@@bs.send];
  external select: t => unit => unit = "" [@@bs.send];
  external pasteHTML: t => string => unit = "" [@@bs.send];
  external inRange: t => TextRange => bool = "" [@@bs.send];
  external moveEnd: t => string => count::(option float) => float = "" [@@bs.send];
  external getClientRects: t => unit => ClientRectList = "" [@@bs.send];
  external moveStart: t => string => count::(option float) => float = "" [@@bs.send];
  external parentElement: t => unit => Element = "" [@@bs.send];
  external queryCommandState: t => string => bool = "" [@@bs.send];
  external compareEndPoints: t => string => TextRange => float = "" [@@bs.send];
  external execCommandShowHelp: t => string => bool = "" [@@bs.send];
  external moveToElementText: t => Element => unit = "" [@@bs.send];
  external expand: t => string => bool = "" [@@bs.send];
  external queryCommandSupported: t => string => bool = "" [@@bs.send];
  external setEndPoint: t => string => TextRange => unit = "" [@@bs.send];
  external queryCommandEnabled: t => string => bool = "" [@@bs.send];
};
let module ClientRect = {
  type t;
  external left: float = "" [@@bs.get];
  external width: float = "" [@@bs.get];
  external right: float = "" [@@bs.get];
  external top: float = "" [@@bs.get];
  external bottom: float = "" [@@bs.get];
  external height: float = "" [@@bs.get];
};
let module ClientRectList = {
  type t;
  external _@@iterator: t => unit => Iterator = "" [@@bs.send];
  external length: float = "" [@@bs.get];
  external item: t => float => ClientRect = "" [@@bs.send];
};
let module DOMImplementation = {
  type t;
  external createDocumentType: t => string => string => string => DocumentType = "" [@@bs.send];
  external createDocument: t => string => string => DocumentType => Document = "" [@@bs.send];
  external hasFeature: t => string => version::(option string) => bool = "" [@@bs.send];
  external createHTMLDocument: t => title::(option string) => Document = "" [@@bs.send];
};
let module DocumentType = {
  type t;
  external name: string = "" [@@bs.get];
  external notations: NamedNodeMap = "" [@@bs.get];
  external systemId: string = "" [@@bs.get];
  external internalSubset: string = "" [@@bs.get];
  external entities: NamedNodeMap = "" [@@bs.get];
  external publicId: string = "" [@@bs.get];
};
let module CharacterData = {
  type t;
  external length: float = "" [@@bs.get];
  external data: string = "" [@@bs.get];
  external deleteData: t => float => float => unit = "" [@@bs.send];
  external replaceData: t => float => float => string => unit = "" [@@bs.send];
  external appendData: t => string => unit = "" [@@bs.send];
  external insertData: t => float => string => unit = "" [@@bs.send];
  external substringData: t => float => float => string = "" [@@bs.send];
};
let module Text = {
  type t;
  external wholeText: string = "" [@@bs.get];
  external splitText: t => float => Text = "" [@@bs.send];
  external replaceWholeText: t => string => Text = "" [@@bs.send];
};
let module Comment = {
  type t;
  external text: string = "" [@@bs.get];
};
let module URL = {
  type t;
  external createObjectURL: Blob => string = "" [@@bs.val];
  external createObjectURL: MediaSource => string = "" [@@bs.val];
  external createFor: Blob => string = "" [@@bs.val];
  external revokeObjectURL: string => unit = "" [@@bs.val];
  external constructor: t => string => base::(option TODO) => unit = "" [@@bs.send];
  external hash: string = "" [@@bs.get];
  external host: string = "" [@@bs.get];
  external hostname: string = "" [@@bs.get];
  external href: string = "" [@@bs.get];
  external origin: string = "" [@@bs.get];
  external password: string = "" [@@bs.get];
  external pathname: string = "" [@@bs.get];
  external port: string = "" [@@bs.get];
  external protocol: string = "" [@@bs.get];
  external search: string = "" [@@bs.get];
  external searchParams: URLSearchParams = "" [@@bs.get];
  external username: string = "" [@@bs.get];
};
let module MediaSource = {
  type t;
  external sourceBuffers: SourceBufferList = "" [@@bs.get];
  external activeSourceBuffers: SourceBufferList = "" [@@bs.get];
  external readyState: TODO = "" [@@bs.get];
  external duration: float = "" [@@bs.get];
  external addSourceBuffer: t => string => SourceBuffer = "" [@@bs.send];
  external removeSourceBuffer: t => SourceBuffer => unit = "" [@@bs.send];
  external endOfStream: t => error::(option string) => unit = "" [@@bs.send];
  external isTypeSupported: string => bool = "" [@@bs.val];
};
let module SourceBuffer = {
  type t;
  external mode: TODO = "" [@@bs.get];
  external updating: bool = "" [@@bs.get];
  external buffered: TimeRanges = "" [@@bs.get];
  external timestampOffset: float = "" [@@bs.get];
  external audioTracks: AudioTrackList = "" [@@bs.get];
  external videoTracks: VideoTrackList = "" [@@bs.get];
  external textTracks: TextTrackList = "" [@@bs.get];
  external appendWindowStart: float = "" [@@bs.get];
  external appendWindowEnd: float = "" [@@bs.get];
  external appendBuffer: t => TODO => unit = "" [@@bs.send];
  external abort: t => unit => unit = "" [@@bs.send];
  external remove: t => float => float => unit = "" [@@bs.send];
  external trackDefaults: TrackDefaultList = "" [@@bs.get];
};
let module SourceBufferList = {
  type t;
  external length: float = "" [@@bs.get];
};
let module Storage = {
  type t;
  external length: float = "" [@@bs.get];
  external getItem: t => string => TODO = "" [@@bs.send];
  external setItem: t => string => string => unit = "" [@@bs.send];
  external clear: t => unit => unit = "" [@@bs.send];
  external removeItem: t => string => unit = "" [@@bs.send];
  external key: t => float => TODO = "" [@@bs.send];
};
let module TrackDefaultList = {
  type t;
  external length: float = "" [@@bs.get];
};
let module TrackDefault = {
  type t;
  external _type: TODO = "" [@@bs.get];
  external byteStreamTrackID: string = "" [@@bs.get];
  external language: string = "" [@@bs.get];
  external label: string = "" [@@bs.get];
  external kinds: Array = "" [@@bs.get];
};
type TODO;
type TODO;
let module NodeFilter = {
  type t;
  let _SHOW_ALL = -1.;
  let _SHOW_ELEMENT = 1.;
  let _SHOW_ATTRIBUTE = 2.;
  let _SHOW_TEXT = 4.;
  let _SHOW_CDATA_SECTION = 8.;
  let _SHOW_ENTITY_REFERENCE = 16.;
  let _SHOW_ENTITY = 32.;
  let _SHOW_PROCESSING_INSTRUCTION = 64.;
  let _SHOW_COMMENT = 128.;
  let _SHOW_DOCUMENT = 256.;
  let _SHOW_DOCUMENT_TYPE = 512.;
  let _SHOW_DOCUMENT_FRAGMENT = 1024.;
  let _SHOW_NOTATION = 2048.;
  let _FILTER_ACCEPT = 1.;
  let _FILTER_REJECT = 2.;
  let _FILTER_SKIP = 3.;
  external acceptNode: NodeFilterCallback = "" [@@bs.get];
};
let module NodeIterator = {
  type t;
  external root: RootNodeT = "" [@@bs.get];
  external whatToShow: float = "" [@@bs.get];
  external filter: NodeFilter = "" [@@bs.get];
  external expandEntityReferences: bool = "" [@@bs.get];
  external referenceNode: TODO = "" [@@bs.get];
  external pointerBeforeReferenceNode: bool = "" [@@bs.get];
  external detach: t => unit => unit = "" [@@bs.send];
  external previousNode: t => unit => TODO = "" [@@bs.send];
  external nextNode: t => unit => TODO = "" [@@bs.send];
};
let module TreeWalker = {
  type t;
  external root: RootNodeT = "" [@@bs.get];
  external whatToShow: float = "" [@@bs.get];
  external filter: NodeFilter = "" [@@bs.get];
  external expandEntityReferences: bool = "" [@@bs.get];
  external currentNode: TODO = "" [@@bs.get];
  external parentNode: t => unit => TODO = "" [@@bs.send];
  external firstChild: t => unit => TODO = "" [@@bs.send];
  external lastChild: t => unit => TODO = "" [@@bs.send];
  external previousSibling: t => unit => TODO = "" [@@bs.send];
  external nextSibling: t => unit => TODO = "" [@@bs.send];
  external previousNode: t => unit => TODO = "" [@@bs.send];
  external nextNode: t => unit => TODO = "" [@@bs.send];
};
type TODO;
external alert: message::(option 'a) => unit = "alert" [@@bs.val];
external prompt: message::(option 'a) => value::(option 'a) => string = "prompt" [@@bs.val];
external close: unit => unit = "close" [@@bs.val];
external confirm: message::(option string) => bool = "confirm" [@@bs.val];
let module EventInstance = {
  external constructor: string => eventInitDict::(option Event$Init) => unit = "event.constructor" [@@bs.val];
  external bubbles: bool = "event.bubbles" [@@bs.val];
  external cancelable: bool = "event.cancelable" [@@bs.val];
  external currentTarget: EventTarget = "event.currentTarget" [@@bs.val];
  external defaultPrevented: bool = "event.defaultPrevented" [@@bs.val];
  external eventPhase: float = "event.eventPhase" [@@bs.val];
  external isTrusted: bool = "event.isTrusted" [@@bs.val];
  external srcElement: Element = "event.srcElement" [@@bs.val];
  external target: EventTarget = "event.target" [@@bs.val];
  external timeStamp: float = "event.timeStamp" [@@bs.val];
  external _type: string = "event.type" [@@bs.val];
  external preventDefault: unit => unit = "event.preventDefault" [@@bs.val];
  external stopImmediatePropagation: unit => unit = "event.stopImmediatePropagation" [@@bs.val];
  external stopPropagation: unit => unit = "event.stopPropagation" [@@bs.val];
  external _AT_TARGET: float = "event.AT_TARGET" [@@bs.val];
  external _BUBBLING_PHASE: float = "event.BUBBLING_PHASE" [@@bs.val];
  external _CAPTURING_PHASE: float = "event.CAPTURING_PHASE" [@@bs.val];
  external initEvent: string => bool => bool => unit = "event.initEvent" [@@bs.val];
};
external getComputedStyle: Element => pseudoElt::(option string) => 'a = "getComputedStyle" [@@bs.val];
external requestAnimationFrame: float => unit => float = "requestAnimationFrame" [@@bs.val];
external cancelAnimationFrame: float => unit = "cancelAnimationFrame" [@@bs.val];
let module LocalStorageInstance = {
  external length: float = "localStorage.length" [@@bs.val];
  external getItem: string => TODO = "localStorage.getItem" [@@bs.val];
  external setItem: string => string => unit = "localStorage.setItem" [@@bs.val];
  external clear: unit => unit = "localStorage.clear" [@@bs.val];
  external removeItem: string => unit = "localStorage.removeItem" [@@bs.val];
  external key: float => TODO = "localStorage.key" [@@bs.val];
};
external focus: unit => unit = "focus" [@@bs.val];
external onfocus: Event => 'a = "onfocus" [@@bs.val];
external onmessage: MessageEvent => 'a = "onmessage" [@@bs.val];
external open: url::(option string) => target::(option string) => features::(option string) => replace::(option bool) => 'a = "open" [@@bs.val];
external parent: WindowProxy = "parent" [@@bs.val];
external print: unit => unit = "print" [@@bs.val];
external self: 'a = "self" [@@bs.val];
let module SessionStorageInstance = {
  external length: float = "sessionStorage.length" [@@bs.val];
  external getItem: string => TODO = "sessionStorage.getItem" [@@bs.val];
  external setItem: string => string => unit = "sessionStorage.setItem" [@@bs.val];
  external clear: unit => unit = "sessionStorage.clear" [@@bs.val];
  external removeItem: string => unit = "sessionStorage.removeItem" [@@bs.val];
  external key: float => TODO = "sessionStorage.key" [@@bs.val];
};
external status: string = "status" [@@bs.val];
external top: WindowProxy = "top" [@@bs.val];
external getSelection: unit => TODO = "getSelection" [@@bs.val];
