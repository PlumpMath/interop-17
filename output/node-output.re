type TODO;
type TODO;
type TODO;
let module Buffer = {
  type t;
  external constructor: t => TODO => encoding::(option buffer$Encoding) => unit = "" [@@bs.send];
  external length: t => float = "" [@@bs.send];
  external compare: t => Buffer => float = "" [@@bs.send];
  external copy: t => Buffer => targetStart::(option float) => sourceStart::(option float) => sourceEnd::(option float) => float = "" [@@bs.send];
  external entries: t => unit => Iterator = "" [@@bs.send];
  external equals: t => Buffer => bool = "" [@@bs.send];
  external fill: t => TODO => offset::(option float) => end::(option float) => unit = "" [@@bs.send];
  external includes: t => TODO => offsetOrEncoding::(option TODO) => encoding::(option buffer$Encoding) => bool = "" [@@bs.send];
  external indexOf: t => TODO => offsetOrEncoding::(option TODO) => encoding::(option buffer$Encoding) => float = "" [@@bs.send];
  external inspect: t => unit => string = "" [@@bs.send];
  external keys: t => unit => Iterator = "" [@@bs.send];
  external lastIndexOf: t => TODO => offsetOrEncoding::(option TODO) => encoding::(option buffer$Encoding) => float = "" [@@bs.send];
  external readDoubleBE: t => float => noAssert::(option bool) => float = "" [@@bs.send];
  external readDoubleLE: t => float => noAssert::(option bool) => float = "" [@@bs.send];
  external readFloatBE: t => float => noAssert::(option bool) => float = "" [@@bs.send];
  external readFloatLE: t => float => noAssert::(option bool) => float = "" [@@bs.send];
  external readInt16BE: t => float => noAssert::(option bool) => float = "" [@@bs.send];
  external readInt16LE: t => float => noAssert::(option bool) => float = "" [@@bs.send];
  external readInt32BE: t => float => noAssert::(option bool) => float = "" [@@bs.send];
  external readInt32LE: t => float => noAssert::(option bool) => float = "" [@@bs.send];
  external readInt8: t => float => noAssert::(option bool) => float = "" [@@bs.send];
  external readIntBE: t => float => float => noAssert::(option bool) => float = "" [@@bs.send];
  external readIntLE: t => float => float => noAssert::(option bool) => float = "" [@@bs.send];
  external readUInt16BE: t => float => noAssert::(option bool) => float = "" [@@bs.send];
  external readUInt16LE: t => float => noAssert::(option bool) => float = "" [@@bs.send];
  external readUInt32BE: t => float => noAssert::(option bool) => float = "" [@@bs.send];
  external readUInt32LE: t => float => noAssert::(option bool) => float = "" [@@bs.send];
  external readUInt8: t => float => noAssert::(option bool) => float = "" [@@bs.send];
  external readUIntBE: t => float => float => noAssert::(option bool) => float = "" [@@bs.send];
  external readUIntLE: t => float => float => noAssert::(option bool) => float = "" [@@bs.send];
  external slice: t => start::(option float) => end::(option float) => Buffer = "" [@@bs.send];
  external swap16: t => unit => Buffer = "" [@@bs.send];
  external swap32: t => unit => Buffer = "" [@@bs.send];
  external toJSON: t => unit => buffer$ToJSONRet = "" [@@bs.send];
  external toString: t => encoding::(option buffer$Encoding) => start::(option float) => end::(option float) => string = "" [@@bs.send];
  external values: t => unit => Iterator = "" [@@bs.send];
  external write: t => string => offset::(option float) => length::(option float) => encoding::(option buffer$Encoding) => unit = "" [@@bs.send];
  external writeDoubleBE: t => float => float => noAssert::(option bool) => float = "" [@@bs.send];
  external writeDoubleLE: t => float => float => noAssert::(option bool) => float = "" [@@bs.send];
  external writeFloatBE: t => float => float => noAssert::(option bool) => float = "" [@@bs.send];
  external writeFloatLE: t => float => float => noAssert::(option bool) => float = "" [@@bs.send];
  external writeInt16BE: t => float => float => noAssert::(option bool) => float = "" [@@bs.send];
  external writeInt16LE: t => float => float => noAssert::(option bool) => float = "" [@@bs.send];
  external writeInt32BE: t => float => float => noAssert::(option bool) => float = "" [@@bs.send];
  external writeInt32LE: t => float => float => noAssert::(option bool) => float = "" [@@bs.send];
  external writeInt8: t => float => float => noAssert::(option bool) => float = "" [@@bs.send];
  external writeIntBE: t => float => float => float => noAssert::(option bool) => float = "" [@@bs.send];
  external writeIntLE: t => float => float => float => noAssert::(option bool) => float = "" [@@bs.send];
  external writeUInt16BE: t => float => float => noAssert::(option bool) => float = "" [@@bs.send];
  external writeUInt16LE: t => float => float => noAssert::(option bool) => float = "" [@@bs.send];
  external writeUInt32BE: t => float => float => noAssert::(option bool) => float = "" [@@bs.send];
  external writeUInt32LE: t => float => float => noAssert::(option bool) => float = "" [@@bs.send];
  external writeUInt8: t => float => float => noAssert::(option bool) => float = "" [@@bs.send];
  external writeUIntBE: t => float => float => float => noAssert::(option bool) => float = "" [@@bs.send];
  external writeUIntLE: t => float => float => float => noAssert::(option bool) => float = "" [@@bs.send];
  external alloc: float => fill::(option TODO) => encoding::(option buffer$Encoding) => Buffer = "" [@@bs.val];
  external allocUnsafe: float => Buffer = "" [@@bs.val];
  external allocUnsafeSlow: float => Buffer = "" [@@bs.val];
  external byteLength: TODO => encoding::(option buffer$Encoding) => float = "" [@@bs.val];
  external compare: Buffer => Buffer => float = "" [@@bs.val];
  external concat: Array => totalLength::(option float) => Buffer = "" [@@bs.val];
  external from: Array => unit => Buffer = "" [@@bs.val];
  external from: Buffer => unit => Buffer = "" [@@bs.val];
  external from: string => encoding::(option buffer$Encoding) => Buffer = "" [@@bs.val];
  external from: ArrayBuffer => byteOffset::(option float) => length::(option float) => Buffer = "" [@@bs.val];
  external isBuffer: 'a => bool = "" [@@bs.val];
  external isEncoding: string => bool = "" [@@bs.val];
};
type TODO;
let module Child_process$Error = {
  type t;
  external code: t => float = "" [@@bs.send];
  external signal: t => TODO = "" [@@bs.send];
};
type TODO;
type TODO;
type TODO;
type TODO;
type TODO;
type TODO;
type TODO;
type TODO;
let module Child_process$ChildProcess = {
  type t;
  external stdin: t => stream$Writable = "" [@@bs.send];
  external stdout: t => stream$Readable = "" [@@bs.send];
  external stderr: t => stream$Readable = "" [@@bs.send];
  external pid: t => float = "" [@@bs.send];
  external connected: t => bool = "" [@@bs.send];
  external disconnect: t => unit => unit = "" [@@bs.send];
  external kill: t => signal::(option string) => unit = "" [@@bs.send];
  external send: t => Object => sendHandle::(option child_process$Handle) => bool = "" [@@bs.send];
};
type TODO;
type TODO;
let module Crypto$Cipher = {
  type t;
  external final: t => TODO => string = "" [@@bs.send];
  external final: t => unit => Buffer = "" [@@bs.send];
  external getAuthTag: t => unit => Buffer = "" [@@bs.send];
  external setAAD: t => Buffer => unit = "" [@@bs.send];
  external setAuthTag: t => Buffer => unit = "" [@@bs.send];
  external setAutoPadding: t => auto_padding::(option bool) => crypto$Cipher = "" [@@bs.send];
  external update: t => string => TODO => TODO => string = "" [@@bs.send];
  external update: t => string => TODO => unit => Buffer = "" [@@bs.send];
  external update: t => Buffer => unit => TODO => string = "" [@@bs.send];
  external update: t => Buffer => unit => unit => Buffer = "" [@@bs.send];
};
type TODO;
type TODO;
let module Crypto$Decipher = {
  type t;
  external final: t => TODO => string = "" [@@bs.send];
  external final: t => unit => Buffer = "" [@@bs.send];
  external getAuthTag: t => unit => Buffer = "" [@@bs.send];
  external setAAD: t => Buffer => unit = "" [@@bs.send];
  external setAuthTag: t => Buffer => unit = "" [@@bs.send];
  external setAutoPadding: t => auto_padding::(option bool) => crypto$Cipher = "" [@@bs.send];
  external update: t => string => TODO => TODO => string = "" [@@bs.send];
  external update: t => string => TODO => unit => Buffer = "" [@@bs.send];
  external update: t => Buffer => unit => TODO => string = "" [@@bs.send];
  external update: t => Buffer => unit => unit => Buffer = "" [@@bs.send];
};
let module Crypto$Hash = {
  type t;
  external digest: t => TODO => string = "" [@@bs.send];
  external digest: t => unit => Buffer = "" [@@bs.send];
  external update: t => Buffer => input_encoding::(option unit) => crypto$Hash = "" [@@bs.send];
  external update: t => string => input_encoding::(option TODO) => crypto$Hash = "" [@@bs.send];
};
let module Crypto$Hmac = {
  type t;
  external digest: t => TODO => string = "" [@@bs.send];
  external digest: t => unit => Buffer = "" [@@bs.send];
  external update: t => Buffer => input_encoding::(option unit) => crypto$Hmac = "" [@@bs.send];
  external update: t => string => input_encoding::(option TODO) => crypto$Hmac = "" [@@bs.send];
};
type TODO;
let module Crypto$Sign = {
  type t;
  external sign: t => crypto$Sign$private_key => TODO => string = "" [@@bs.send];
  external sign: t => crypto$Sign$private_key => unit => Buffer = "" [@@bs.send];
  external update: t => Buffer => input_encoding::(option unit) => crypto$Sign = "" [@@bs.send];
  external update: t => string => input_encoding::(option TODO) => crypto$Sign = "" [@@bs.send];
};
let module Crypto$Verify = {
  type t;
  external update: t => Buffer => input_encoding::(option unit) => crypto$Verify = "" [@@bs.send];
  external update: t => string => input_encoding::(option TODO) => crypto$Verify = "" [@@bs.send];
  external verify: t => string => string => TODO => bool = "" [@@bs.send];
  external verify: t => string => Buffer => unit => bool = "" [@@bs.send];
};
type TODO;
type TODO;
let module Events$EventEmitter = {
  type t;
  external listenerCount: events$EventEmitter => string => float = "" [@@bs.val];
  external addListener: t => string => Function => events$EventEmitter = "" [@@bs.send];
  external emit: t => string => array 'rest => bool = "" [@@bs.send] [@@bs.splice];
  external listeners: t => string => Array = "" [@@bs.send];
  external listenerCount: t => string => float = "" [@@bs.send];
  external on: t => string => Function => events$EventEmitter = "" [@@bs.send];
  external once: t => string => Function => events$EventEmitter = "" [@@bs.send];
  external removeAllListeners: t => event::(option string) => events$EventEmitter = "" [@@bs.send];
  external removeListener: t => string => Function => events$EventEmitter = "" [@@bs.send];
  external setMaxListeners: t => float => unit = "" [@@bs.send];
  external getMaxListeners: t => unit => float = "" [@@bs.send];
};
let module Domain$Domain = {
  type t;
  external members: t => Array = "" [@@bs.send];
  external add: t => events$EventEmitter => unit = "" [@@bs.send];
  external bind: t => Function => Function = "" [@@bs.send];
  external dispose: t => unit => unit = "" [@@bs.send];
  external enter: t => unit => unit = "" [@@bs.send];
  external exit: t => unit => unit = "" [@@bs.send];
  external intercept: t => Function => Function = "" [@@bs.send];
  external remove: t => events$EventEmitter => unit = "" [@@bs.send];
  external run: t => Function => unit = "" [@@bs.send];
};
let module Http$IncomingMessage = {
  type t;
  external headers: t => Object = "" [@@bs.send];
  external httpVersion: t => string = "" [@@bs.send];
  external method: t => string = "" [@@bs.send];
  external trailers: t => Object = "" [@@bs.send];
  external setTimeout: t => float => Function => unit = "" [@@bs.send];
  external socket: t => net$Socket = "" [@@bs.send];
  external statusCode: t => float = "" [@@bs.send];
  external url: t => string = "" [@@bs.send];
};
let module Http$ClientRequest = {
  type t;
  external flushHeaders: t => unit => unit = "" [@@bs.send];
  external abort: t => unit => unit = "" [@@bs.send];
  external setTimeout: t => float => callback::(option Function) => unit = "" [@@bs.send];
  external setNoDelay: t => noDelay::(option bool) => unit = "" [@@bs.send];
  external setSocketKeepAlive: t => enable::(option bool) => initialDelay::(option float) => unit = "" [@@bs.send];
};
let module Http$ServerResponse = {
  type t;
  external addTrailers: t => TODO => unit = "" [@@bs.send];
  external finished: t => bool = "" [@@bs.send];
  external getHeader: t => string => unit = "" [@@bs.send];
  external headersSent: t => bool = "" [@@bs.send];
  external removeHeader: t => string => unit = "" [@@bs.send];
  external sendDate: t => bool = "" [@@bs.send];
  external setHeader: t => string => TODO => unit = "" [@@bs.send];
  external setTimeout: t => float => callback::(option Function) => http$ServerResponse = "" [@@bs.send];
  external statusCode: t => float = "" [@@bs.send];
  external statusMessage: t => string = "" [@@bs.send];
  external writeContinue: t => unit => unit = "" [@@bs.send];
  external writeHead: t => float => statusMessage::(option string) => headers::(option TODO) => unit = "" [@@bs.send];
  external writeHead: t => float => headers::(option TODO) => unit = "" [@@bs.send];
};
let module Net$Socket = {
  type t;
  external constructor: t => options::(option Object) => unit = "" [@@bs.send];
  external address: t => unit => net$Socket$address = "" [@@bs.send];
  external bufferSize: t => float = "" [@@bs.send];
  external bytesRead: t => float = "" [@@bs.send];
  external bytesWritten: t => float = "" [@@bs.send];
  external connect: t => Object => connectListener::(option function) => unit = "" [@@bs.send];
  external destroy: t => unit => unit = "" [@@bs.send];
  external end: t => chunk::(option TODO) => encodingOrCallback::(option TODO) => callback::(option 'a => unit) => unit = "" [@@bs.send];
  external localAddress: t => string = "" [@@bs.send];
  external localPort: t => float = "" [@@bs.send];
  external pause: t => unit => stream$Readable = "" [@@bs.send];
  external ref: t => unit => net$Socket = "" [@@bs.send];
  external remoteAddress: t => TODO = "" [@@bs.send];
  external remoteFamily: t => string = "" [@@bs.send];
  external remotePort: t => float = "" [@@bs.send];
  external resume: t => unit => stream$Readable = "" [@@bs.send];
  external setEncoding: t => encoding::(option string) => stream$Readable = "" [@@bs.send];
  external setKeepAlive: t => enable::(option bool) => initialDelay::(option float) => net$Socket = "" [@@bs.send];
  external setNoDelay: t => noDelay::(option bool) => net$Socket = "" [@@bs.send];
  external setTimeout: t => float => callback::(option function) => net$Socket = "" [@@bs.send];
  external unref: t => unit => net$Socket = "" [@@bs.send];
  external write: t => chunk::(option TODO) => encodingOrCallback::(option TODO) => callback::(option 'a => unit) => bool = "" [@@bs.send];
};
let module Net$Server = {
  type t;
  external listen: t => float => hostname::(option string) => backlog::(option float) => callback::(option Function) => net$Server = "" [@@bs.send];
  external listen: t => string => callback::(option Function) => net$Server = "" [@@bs.send];
  external listen: t => Object => callback::(option Function) => net$Server = "" [@@bs.send];
  external close: t => callback::(option Function) => net$Server = "" [@@bs.send];
  external address: t => unit => net$Socket$address = "" [@@bs.send];
  external connections: t => float = "" [@@bs.send];
  external maxConnections: t => float = "" [@@bs.send];
  external getConnections: t => Function => unit = "" [@@bs.send];
  external ref: t => unit => net$Server = "" [@@bs.send];
  external unref: t => unit => net$Server = "" [@@bs.send];
};
type TODO;
type TODO;
type TODO;
let module Readline$Interface = {
  type t;
  external close: t => unit => unit = "" [@@bs.send];
  external pause: t => unit => unit = "" [@@bs.send];
  external prompt: t => preserveCursor::(option bool) => unit = "" [@@bs.send];
  external question: t => string => string => unit => unit = "" [@@bs.send];
  external resume: t => unit => unit = "" [@@bs.send];
  external setPrompt: t => string => unit = "" [@@bs.send];
  external write: t => TODO => key::(option TODO) => unit = "" [@@bs.send];
};
let module Stream$Stream = {
  type t;
};
type TODO;
let module Stream$Readable = {
  type t;
  external constructor: t => options::(option readableStreamOptions) => unit = "" [@@bs.send];
  external setEncoding: t => string => stream$Readable = "" [@@bs.send];
  external isPaused: t => unit => bool = "" [@@bs.send];
  external pause: t => unit => stream$Readable = "" [@@bs.send];
  external pipe: t => stream$Duplex => options::(option TODO) => stream$Duplex = "" [@@bs.send];
  external pipe: t => stream$Writable => options::(option TODO) => stream$Writable = "" [@@bs.send];
  external read: t => size::(option float) => TODO = "" [@@bs.send];
  external resume: t => unit => stream$Readable = "" [@@bs.send];
  external unpipe: t => dest::(option TODO) => unit = "" [@@bs.send];
  external unshift: t => TODO => unit = "" [@@bs.send];
  external push: t => TODO => encoding::(option string) => bool = "" [@@bs.send];
  external wrap: t => 'a => stream$Readable = "" [@@bs.send];
};
type TODO;
let module Stream$Writable = {
  type t;
  external constructor: t => options::(option writableStreamOptions) => unit = "" [@@bs.send];
  external cork: t => unit => unit = "" [@@bs.send];
  external end: t => chunkOrEncodingOrCallback::(option TODO) => encodingOrCallback::(option TODO) => callback::(option Function) => unit = "" [@@bs.send];
  external setDefaultEncoding: t => string => bool = "" [@@bs.send];
  external uncork: t => unit => unit = "" [@@bs.send];
  external write: t => TODO => encodingOrCallback::(option TODO) => callback::(option Function) => bool = "" [@@bs.send];
  external __write: t => TODO => string => TODO => data::(option TODO) => unit => bool = "" [@@bs.send];
};
type TODO;
let module Stream$Duplex = {
  type t;
  external constructor: t => options::(option duplexStreamOptions) => unit = "" [@@bs.send];
  external cork: t => unit => unit = "" [@@bs.send];
  external end: t => chunkOrEncodingOrCallback::(option TODO) => encodingOrCallback::(option TODO) => callback::(option Function) => unit = "" [@@bs.send];
  external setDefaultEncoding: t => string => bool = "" [@@bs.send];
  external uncork: t => unit => unit = "" [@@bs.send];
  external write: t => TODO => encodingOrCallback::(option TODO) => callback::(option Function) => bool = "" [@@bs.send];
  external __write: t => TODO => string => TODO => data::(option TODO) => unit => bool = "" [@@bs.send];
};
let module Stream$Transform = {
  type t;
  external __transform: t => TODO => string => TODO => data::(option TODO) => unit => unit = "" [@@bs.send];
  external __flush: t => TODO => unit => unit = "" [@@bs.send];
};
let module Stream$PassThrough = {
  type t;
};
let module Tty$ReadStream = {
  type t;
  external isRaw: t => bool = "" [@@bs.send];
  external setRawMode: t => bool => unit = "" [@@bs.send];
  external isTTY: t => TODO = "" [@@bs.send];
};
let module Tty$WriteStream = {
  type t;
  external columns: t => float = "" [@@bs.send];
  external rows: t => float = "" [@@bs.send];
  external isTTY: t => TODO = "" [@@bs.send];
};
let module String_decoder$StringDecoder = {
  type t;
  external constructor: t => encoding::(option TODO) => unit = "" [@@bs.send];
  external end: t => unit => unit = "" [@@bs.send];
  external write: t => Buffer => string = "" [@@bs.send];
};
let module Tls$TLSSocket = {
  type t;
  external constructor: t => net$Socket => options::(option Object) => unit = "" [@@bs.send];
  external authorized: t => bool = "" [@@bs.send];
  external authorizationError: t => TODO = "" [@@bs.send];
  external encrypted: t => TODO = "" [@@bs.send];
  external getCipher: t => unit => TODO = "" [@@bs.send];
  external getEphemeralKeyInfo: t => unit => TODO = "" [@@bs.send];
  external getPeerCertificate: t => detailed::(option bool) => TODO = "" [@@bs.send];
  external getSession: t => unit => TODO = "" [@@bs.send];
  external getTLSTicket: t => unit => TODO = "" [@@bs.send];
  external renegotiate: t => Object => Function => TODO = "" [@@bs.send];
  external setMaxSendFragment: t => float => bool = "" [@@bs.send];
};
let module Tls$Server = {
  type t;
  external listen: t => float => hostname::(option string) => backlog::(option float) => callback::(option Function) => tls$Server = "" [@@bs.send];
  external listen: t => string => callback::(option Function) => tls$Server = "" [@@bs.send];
  external listen: t => Object => callback::(option Function) => tls$Server = "" [@@bs.send];
  external close: t => callback::(option Function) => tls$Server = "" [@@bs.send];
  external addContext: t => string => Object => unit = "" [@@bs.send];
  external getTicketKeys: t => unit => Buffer = "" [@@bs.send];
  external setTicketKeys: t => Buffer => unit = "" [@@bs.send];
};
type TODO;
let module Vm$Script = {
  type t;
  external constructor: t => string => Object => unit = "" [@@bs.send];
  external cachedData: t => TODO = "" [@@bs.send];
  external cachedDataRejected: t => TODO = "" [@@bs.send];
  external cachedDataProduced: t => TODO = "" [@@bs.send];
  external runInContext: t => vm$Context => options::(option vm$ScriptOptions) => 'a = "" [@@bs.send];
  external runInNewContext: t => sandbox::(option Object) => options::(option vm$ScriptOptions) => 'a = "" [@@bs.send];
  external runInThisContext: t => options::(option vm$ScriptOptions) => 'a = "" [@@bs.send];
};
let module Vm$Context = {
  type t;
};
type TODO;
type TODO;
type TODO;
let module Process = {
  type t;
  external abort: t => unit => unit = "" [@@bs.send];
  external arch: t => string = "" [@@bs.send];
  external argv: t => Array = "" [@@bs.send];
  external chdir: t => string => unit = "" [@@bs.send];
  external config: t => Object = "" [@@bs.send];
  external connected: t => bool = "" [@@bs.send];
  external cwd: t => unit => string = "" [@@bs.send];
  external disconnect: t => unit => unit = "" [@@bs.send];
  external env: t => TODO = "" [@@bs.send];
  external execArgv: t => Array = "" [@@bs.send];
  external execPath: t => string = "" [@@bs.send];
  external exit: t => code::(option float) => unit = "" [@@bs.send];
  external exitCode: t => float = "" [@@bs.send];
  external getegid: t => unit => float = "" [@@bs.send];
  external geteuid: t => unit => float = "" [@@bs.send];
  external getgid: t => unit => float = "" [@@bs.send];
  external getgroups: t => unit => Array = "" [@@bs.send];
  external getuid: t => unit => float = "" [@@bs.send];
  external hrtime: t => unit => TODO = "" [@@bs.send];
  external initgroups: t => TODO => TODO => unit = "" [@@bs.send];
  external kill: t => float => signal::(option TODO) => unit = "" [@@bs.send];
  external mainModule: t => Object = "" [@@bs.send];
  external memoryUsage: t => unit => TODO = "" [@@bs.send];
  external nextTick: t => Function => unit = "" [@@bs.send];
  external pid: t => float = "" [@@bs.send];
  external platform: t => string = "" [@@bs.send];
  external release: t => TODO = "" [@@bs.send];
  external send: t => 'a => sendHandleOrCallback::(option TODO) => callback::(option Function) => unit = "" [@@bs.send];
  external setegid: t => TODO => unit = "" [@@bs.send];
  external seteuid: t => TODO => unit = "" [@@bs.send];
  external setgid: t => TODO => unit = "" [@@bs.send];
  external setgroups: t => Array => unit = "" [@@bs.send];
  external setuid: t => TODO => unit = "" [@@bs.send];
  external stderr: t => TODO = "" [@@bs.send];
  external stdin: t => TODO = "" [@@bs.send];
  external stdout: t => TODO = "" [@@bs.send];
  external title: t => string = "" [@@bs.send];
  external umask: t => float => float = "" [@@bs.send];
  external uptime: t => unit => float = "" [@@bs.send];
  external version: t => string = "" [@@bs.send];
  external versions: t => TODO = "" [@@bs.send];
};
let module ProcessInstance = {
  external abort: unit => unit = "process.abort" [@@bs.val];
  external arch: string = "process.arch" [@@bs.val];
  external argv: Array = "process.argv" [@@bs.val];
  external chdir: string => unit = "process.chdir" [@@bs.val];
  external config: Object = "process.config" [@@bs.val];
  external connected: bool = "process.connected" [@@bs.val];
  external cwd: unit => string = "process.cwd" [@@bs.val];
  external disconnect: unit => unit = "process.disconnect" [@@bs.val];
  external env: TODO = "process.env" [@@bs.val];
  external execArgv: Array = "process.execArgv" [@@bs.val];
  external execPath: string = "process.execPath" [@@bs.val];
  external exit: code::(option float) => unit = "process.exit" [@@bs.val];
  external exitCode: float = "process.exitCode" [@@bs.val];
  external getegid: unit => float = "process.getegid" [@@bs.val];
  external geteuid: unit => float = "process.geteuid" [@@bs.val];
  external getgid: unit => float = "process.getgid" [@@bs.val];
  external getgroups: unit => Array = "process.getgroups" [@@bs.val];
  external getuid: unit => float = "process.getuid" [@@bs.val];
  external hrtime: unit => TODO = "process.hrtime" [@@bs.val];
  external initgroups: TODO => TODO => unit = "process.initgroups" [@@bs.val];
  external kill: float => signal::(option TODO) => unit = "process.kill" [@@bs.val];
  external mainModule: Object = "process.mainModule" [@@bs.val];
  external memoryUsage: unit => TODO = "process.memoryUsage" [@@bs.val];
  external nextTick: Function => unit = "process.nextTick" [@@bs.val];
  external pid: float = "process.pid" [@@bs.val];
  external platform: string = "process.platform" [@@bs.val];
  external release: TODO = "process.release" [@@bs.val];
  external send: 'a => sendHandleOrCallback::(option TODO) => callback::(option Function) => unit = "process.send" [@@bs.val];
  external setegid: TODO => unit = "process.setegid" [@@bs.val];
  external seteuid: TODO => unit = "process.seteuid" [@@bs.val];
  external setgid: TODO => unit = "process.setgid" [@@bs.val];
  external setgroups: Array => unit = "process.setgroups" [@@bs.val];
  external setuid: TODO => unit = "process.setuid" [@@bs.val];
  external stderr: TODO = "process.stderr" [@@bs.val];
  external stdin: TODO = "process.stdin" [@@bs.val];
  external stdout: TODO = "process.stdout" [@@bs.val];
  external title: string = "process.title" [@@bs.val];
  external umask: float => float = "process.umask" [@@bs.val];
  external uptime: unit => float = "process.uptime" [@@bs.val];
  external version: string = "process.version" [@@bs.val];
  external versions: TODO = "process.versions" [@@bs.val];
};
external ___filename: string = "__filename" [@@bs.val];
external ___dirname: string = "__dirname" [@@bs.val];
external setImmediate: array 'rest => 'a => array 'rest => Object = "setImmediate" [@@bs.val];
external clearImmediate: 'a => Object = "clearImmediate" [@@bs.val];
