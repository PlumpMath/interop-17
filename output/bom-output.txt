let module Screen = {
  type t;
  external availHeight: t => float = "" [@@bs.send];
  external availLeft: t => float = "" [@@bs.send];
  external availTop: t => float = "" [@@bs.send];
  external availWidth: t => float = "" [@@bs.send];
  external colorDepth: t => float = "" [@@bs.send];
  external height: t => float = "" [@@bs.send];
  external left: t => float = "" [@@bs.send];
  external mozOrientation: t => string = "" [@@bs.send];
  external onmozorientationchange: t => 'a = "" [@@bs.send];
  external orientation: t => TODO = "" [@@bs.send];
  external pixelDepth: t => float = "" [@@bs.send];
  external top: t => float = "" [@@bs.send];
  external width: t => float = "" [@@bs.send];
  external mozLockOrientation: t => Function = "" [@@bs.send];
  external mozUnlockOrientation: t => Function = "" [@@bs.send];
  external mozOrientation: t => string = "" [@@bs.send];
  external onmozorientationchange: t => Function = "" [@@bs.send];
};
external screen: Screen = "screen" [@@bs.val];
external window: 'a = "window" [@@bs.val];
type TODO;
type TODO;
let module NavigatorCommon = {
  type t;
  external appName: t => TODO = "" [@@bs.send];
  external appVersion: t => string = "" [@@bs.send];
  external platform: t => string = "" [@@bs.send];
  external userAgent: t => string = "" [@@bs.send];
  external language: t => string = "" [@@bs.send];
  external languages: t => Array = "" [@@bs.send];
  external onLine: t => bool = "" [@@bs.send];
  external hardwareConcurrency: t => float = "" [@@bs.send];
};
let module Navigator = {
  type t;
  external appCodeName: t => TODO = "" [@@bs.send];
  external buildID: t => string = "" [@@bs.send];
  external cookieEnabled: t => bool = "" [@@bs.send];
  external doNotTrack: t => 'a = "" [@@bs.send];
  external geolocation: t => Geolocation = "" [@@bs.send];
  external mediaDevices: t => Object = "" [@@bs.send];
  external javaEnabled: t => Function = "" [@@bs.send];
  external maxTouchPoints: t => float = "" [@@bs.send];
  external mimeTypes: t => MimeTypeArray = "" [@@bs.send];
  external oscpu: t => string = "" [@@bs.send];
  external permissions: t => 'a = "" [@@bs.send];
  external plugins: t => PluginArray = "" [@@bs.send];
  external product: t => TODO = "" [@@bs.send];
  external productSub: t => TODO = "" [@@bs.send];
  external serviceWorker: t => Object = "" [@@bs.send];
  external vendor: t => TODO = "" [@@bs.send];
  external vendorSub: t => TODO = "" [@@bs.send];
  external getBattery: t => unit => Promise = "" [@@bs.send];
  external getGamepads: t => unit => TODO = "" [@@bs.send];
  external webkitGetGamepads: t => Function = "" [@@bs.send];
  external mozGetGamepads: t => Function = "" [@@bs.send];
  external mozGamepads: t => 'a = "" [@@bs.send];
  external gamepads: t => 'a = "" [@@bs.send];
  external webkitGamepads: t => 'a = "" [@@bs.send];
  external requestMIDIAccess: t => Function = "" [@@bs.send];
  external registerContentHandler: t => string => string => string => unit = "" [@@bs.send];
  external registerProtocolHandler: t => string => string => string => unit = "" [@@bs.send];
  external requestMediaKeySystemAccess: t => string => TODO => Promise = "" [@@bs.send];
  external sendBeacon: t => Function = "" [@@bs.send];
  external getUserMedia: t => Function = "" [@@bs.send];
  external webkitGetUserMedia: t => Function = "" [@@bs.send];
  external mozGetUserMedia: t => Function = "" [@@bs.send];
  external msGetUserMedia: t => Function = "" [@@bs.send];
  external taintEnabled: t => Function = "" [@@bs.send];
  external vibrate: t => TODO => bool = "" [@@bs.send];
};
external navigator: Navigator = "navigator" [@@bs.val];
let module MimeType = {
  type t;
  external type: t => string = "" [@@bs.send];
  external description: t => string = "" [@@bs.send];
  external suffixes: t => string = "" [@@bs.send];
  external enabledPlugin: t => Plugin = "" [@@bs.send];
};
let module MimeTypeArray = {
  type t;
  external length: t => float = "" [@@bs.send];
  external item: t => float => MimeType = "" [@@bs.send];
  external namedItem: t => string => MimeType = "" [@@bs.send];
};
let module Plugin = {
  type t;
  external description: t => string = "" [@@bs.send];
  external filename: t => string = "" [@@bs.send];
  external name: t => string = "" [@@bs.send];
  external version: t => string = "" [@@bs.send];
  external length: t => float = "" [@@bs.send];
  external item: t => float => MimeType = "" [@@bs.send];
  external namedItem: t => string => MimeType = "" [@@bs.send];
};
let module PluginArray = {
  type t;
  external length: t => float = "" [@@bs.send];
  external item: t => float => Plugin = "" [@@bs.send];
  external namedItem: t => string => Plugin = "" [@@bs.send];
  external refresh: t => unit => unit = "" [@@bs.send];
};
let module PerformanceTiming = {
  type t;
  external connectEnd: t => float = "" [@@bs.send];
  external connectStart: t => float = "" [@@bs.send];
  external domainLookupEnd: t => float = "" [@@bs.send];
  external domainLookupStart: t => float = "" [@@bs.send];
  external domComplete: t => float = "" [@@bs.send];
  external domContentLoadedEventEnd: t => float = "" [@@bs.send];
  external domContentLoadedEventStart: t => float = "" [@@bs.send];
  external domInteractive: t => float = "" [@@bs.send];
  external domLoading: t => float = "" [@@bs.send];
  external fetchStart: t => float = "" [@@bs.send];
  external loadEventEnd: t => float = "" [@@bs.send];
  external loadEventStart: t => float = "" [@@bs.send];
  external navigationStart: t => float = "" [@@bs.send];
  external redirectEnd: t => float = "" [@@bs.send];
  external redirectStart: t => float = "" [@@bs.send];
  external requestStart: t => float = "" [@@bs.send];
  external responseEnd: t => float = "" [@@bs.send];
  external responseStart: t => float = "" [@@bs.send];
  external secureConnectionStart: t => float = "" [@@bs.send];
  external unloadEventEnd: t => float = "" [@@bs.send];
  external unloadEventStart: t => float = "" [@@bs.send];
};
let module PerformanceNavigation = {
  type t;
  external _TYPE_NAVIGATE: t => TODO = "" [@@bs.send];
  external _TYPE_RELOAD: t => TODO = "" [@@bs.send];
  external _TYPE_BACK_FORWARD: t => TODO = "" [@@bs.send];
  external _TYPE_RESERVED: t => TODO = "" [@@bs.send];
  external type: t => TODO = "" [@@bs.send];
  external redirectCount: t => float = "" [@@bs.send];
};
type TODO;
let module PerformanceEntry = {
  type t;
  external name: t => string = "" [@@bs.send];
  external entryType: t => string = "" [@@bs.send];
  external startTime: t => float = "" [@@bs.send];
  external duration: t => float = "" [@@bs.send];
  external toJSON: t => unit => string = "" [@@bs.send];
};
let module Performance = {
  type t;
  external navigation: t => PerformanceNavigation = "" [@@bs.send];
  external onresourcetimingbufferfull: t => Event => 'a = "" [@@bs.send];
  external timing: t => PerformanceTiming = "" [@@bs.send];
  external clearMarks: t => name::(option string) => unit = "" [@@bs.send];
  external clearMeasures: t => name::(option string) => unit = "" [@@bs.send];
  external clearResourceTimings: t => unit => unit = "" [@@bs.send];
  external getEntries: t => options::(option PerformanceEntryFilterOptions) => Array = "" [@@bs.send];
  external getEntriesByName: t => string => type::(option string) => Array = "" [@@bs.send];
  external getEntriesByType: t => string => Array = "" [@@bs.send];
  external mark: t => string => unit = "" [@@bs.send];
  external measure: t => string => startMark::(option string) => endMark::(option string) => unit = "" [@@bs.send];
  external now: t => unit => float = "" [@@bs.send];
  external setResourceTimingBufferSize: t => float => unit = "" [@@bs.send];
  external toJSON: t => unit => string = "" [@@bs.send];
};
external performance: Performance = "performance" [@@bs.val];
let module History = {
  type t;
  external length: t => float = "" [@@bs.send];
  external scrollRestoration: t => TODO = "" [@@bs.send];
  external state: t => 'a = "" [@@bs.send];
  external back: t => unit => unit = "" [@@bs.send];
  external forward: t => unit => unit = "" [@@bs.send];
  external go: t => delta::(option 'a) => unit = "" [@@bs.send];
  external pushState: t => 'a => string => url::(option string) => unit = "" [@@bs.send];
  external replaceState: t => 'a => string => url::(option string) => unit = "" [@@bs.send];
};
external history: History = "history" [@@bs.val];
let module Location = {
  type t;
  external ancestorOrigins: t => TODO = "" [@@bs.send];
  external hash: t => string = "" [@@bs.send];
  external host: t => string = "" [@@bs.send];
  external hostname: t => string = "" [@@bs.send];
  external href: t => string = "" [@@bs.send];
  external origin: t => string = "" [@@bs.send];
  external pathname: t => string = "" [@@bs.send];
  external port: t => string = "" [@@bs.send];
  external protocol: t => string = "" [@@bs.send];
  external search: t => string = "" [@@bs.send];
  external assign: t => string => unit = "" [@@bs.send];
  external reload: t => flag::(option bool) => unit = "" [@@bs.send];
  external replace: t => string => unit = "" [@@bs.send];
  external toString: t => unit => string = "" [@@bs.send];
};
external location: Location = "location" [@@bs.val];
let module DOMParser = {
  type t;
  external parseFromString: t => string => string => Document = "" [@@bs.send];
};
let module FormData = {
  type t;
  external append: t => 'a => 'a => blobName::(option string) => unit = "" [@@bs.send];
};
let module MutationRecord = {
  type t;
  external type: t => TODO = "" [@@bs.send];
  external target: t => Node = "" [@@bs.send];
  external addedNodes: t => NodeList = "" [@@bs.send];
  external removedNodes: t => NodeList = "" [@@bs.send];
  external previousSibling: t => TODO = "" [@@bs.send];
  external nextSibling: t => TODO = "" [@@bs.send];
  external attributeName: t => TODO = "" [@@bs.send];
  external attributeNamespace: t => TODO = "" [@@bs.send];
  external oldValue: t => TODO = "" [@@bs.send];
};
let module MutationObserver = {
  type t;
  external constructor: t => Array => MutationObserver => 'a => unit = "" [@@bs.send];
  external observe: t => Node => TODO => unit = "" [@@bs.send];
  external takeRecords: t => unit => Array = "" [@@bs.send];
  external disconnect: t => unit => unit = "" [@@bs.send];
};
let module NodeFilter = {
  external acceptNode: Node => float = "NodeFilter.acceptNode" [@@bs.val];
  external _SHOW_ENTITY_REFERENCE: float = "NodeFilter.SHOW_ENTITY_REFERENCE" [@@bs.val];
  external _SHOW_NOTATION: float = "NodeFilter.SHOW_NOTATION" [@@bs.val];
  external _SHOW_ENTITY: float = "NodeFilter.SHOW_ENTITY" [@@bs.val];
  external _SHOW_DOCUMENT: float = "NodeFilter.SHOW_DOCUMENT" [@@bs.val];
  external _SHOW_PROCESSING_INSTRUCTION: float = "NodeFilter.SHOW_PROCESSING_INSTRUCTION" [@@bs.val];
  external _FILTER_REJECT: float = "NodeFilter.FILTER_REJECT" [@@bs.val];
  external _SHOW_CDATA_SECTION: float = "NodeFilter.SHOW_CDATA_SECTION" [@@bs.val];
  external _FILTER_ACCEPT: float = "NodeFilter.FILTER_ACCEPT" [@@bs.val];
  external _SHOW_ALL: float = "NodeFilter.SHOW_ALL" [@@bs.val];
  external _SHOW_DOCUMENT_TYPE: float = "NodeFilter.SHOW_DOCUMENT_TYPE" [@@bs.val];
  external _SHOW_TEXT: float = "NodeFilter.SHOW_TEXT" [@@bs.val];
  external _SHOW_ELEMENT: float = "NodeFilter.SHOW_ELEMENT" [@@bs.val];
  external _SHOW_COMMENT: float = "NodeFilter.SHOW_COMMENT" [@@bs.val];
  external _FILTER_SKIP: float = "NodeFilter.FILTER_SKIP" [@@bs.val];
  external _SHOW_ATTRIBUTE: float = "NodeFilter.SHOW_ATTRIBUTE" [@@bs.val];
  external _SHOW_DOCUMENT_FRAGMENT: float = "NodeFilter.SHOW_DOCUMENT_FRAGMENT" [@@bs.val];
};
let module CloseEvent = {
  type t;
  external code: t => float = "" [@@bs.send];
  external reason: t => string = "" [@@bs.send];
  external wasClean: t => bool = "" [@@bs.send];
};
let module WebSocket = {
  type t;
  external _CONNECTING: TODO = "" [@@bs.val];
  external _OPEN: TODO = "" [@@bs.val];
  external _CLOSING: TODO = "" [@@bs.val];
  external _CLOSED: TODO = "" [@@bs.val];
  external constructor: t => string => protocols::(option TODO) => unit = "" [@@bs.send];
  external protocol: t => string = "" [@@bs.send];
  external readyState: t => float = "" [@@bs.send];
  external bufferedAmount: t => float = "" [@@bs.send];
  external onopen: t => Event => 'a = "" [@@bs.send];
  external extensions: t => string = "" [@@bs.send];
  external onmessage: t => MessageEvent => 'a = "" [@@bs.send];
  external onclose: t => CloseEvent => 'a = "" [@@bs.send];
  external onerror: t => Event => 'a = "" [@@bs.send];
  external binaryType: t => string = "" [@@bs.send];
  external url: t => string = "" [@@bs.send];
  external close: t => code::(option float) => reason::(option string) => unit = "" [@@bs.send];
  external send: t => 'a => unit = "" [@@bs.send];
  external _CONNECTING: t => TODO = "" [@@bs.send];
  external _OPEN: t => TODO = "" [@@bs.send];
  external _CLOSING: t => TODO = "" [@@bs.send];
  external _CLOSED: t => TODO = "" [@@bs.send];
};
let module Worker = {
  type t;
  external constructor: t => string => unit = "" [@@bs.send];
  external onerror: t => Event => 'a = "" [@@bs.send];
  external onmessage: t => MessageEvent => 'a = "" [@@bs.send];
  external postMessage: t => 'a => ports::(option 'a) => unit = "" [@@bs.send];
  external terminate: t => unit => unit = "" [@@bs.send];
};
let module SharedWorker = {
  type t;
  external constructor: t => string => unit = "" [@@bs.send];
  external port: t => MessagePort = "" [@@bs.send];
  external onerror: t => Event => 'a = "" [@@bs.send];
};
external importScripts: array 'rest => unit = "importScripts" [@@bs.val];
let module WorkerGlobalScope = {
  type t;
  external self: t => WorkerGlobalScope = "" [@@bs.send];
  external location: t => WorkerLocation = "" [@@bs.send];
  external navigator: t => WorkerNavigator = "" [@@bs.send];
  external close: t => unit => unit = "" [@@bs.send];
  external importScripts: t => array 'rest => unit = "" [@@bs.send] [@@bs.splice];
  external onerror: t => Event => 'a = "" [@@bs.send];
  external onlanguagechange: t => Event => 'a = "" [@@bs.send];
  external onoffline: t => Event => 'a = "" [@@bs.send];
  external ononline: t => Event => 'a = "" [@@bs.send];
  external onrejectionhandled: t => PromiseRejectionEvent => 'a = "" [@@bs.send];
  external onunhandledrejection: t => PromiseRejectionEvent => 'a = "" [@@bs.send];
};
let module DedicatedWorkerGlobalScope = {
  type t;
  external onmessage: t => unit => MessageEvent => 'a = "" [@@bs.send];
  external postMessage: t => 'a => transfer::(option Iterable) => unit = "" [@@bs.send];
};
let module SharedWorkerGlobalScope = {
  type t;
  external name: t => string = "" [@@bs.send];
  external onconnect: t => MessageEvent => 'a = "" [@@bs.send];
};
let module WorkerLocation = {
  type t;
  external origin: t => string = "" [@@bs.send];
  external protocol: t => string = "" [@@bs.send];
  external host: t => string = "" [@@bs.send];
  external hostname: t => string = "" [@@bs.send];
  external port: t => string = "" [@@bs.send];
  external pathname: t => string = "" [@@bs.send];
  external search: t => string = "" [@@bs.send];
  external hash: t => string = "" [@@bs.send];
};
let module WorkerNavigator = {
  type t;
};
let module XDomainRequest = {
  type t;
  external timeout: t => float = "" [@@bs.send];
  external onerror: t => Event => 'a = "" [@@bs.send];
  external onload: t => Event => 'a = "" [@@bs.send];
  external onprogress: t => Event => 'a = "" [@@bs.send];
  external ontimeout: t => Event => 'a = "" [@@bs.send];
  external responseText: t => string = "" [@@bs.send];
  external contentType: t => string = "" [@@bs.send];
  external open: t => string => string => unit = "" [@@bs.send];
  external abort: t => unit => unit = "" [@@bs.send];
  external send: t => data::(option 'a) => unit = "" [@@bs.send];
  external addEventListener: t => string => 'a => unit => useCapture::(option bool) => unit = "" [@@bs.send];
  external statics: t => TODO = "" [@@bs.send];
};
let module XMLHttpRequest = {
  type t;
  external responseBody: t => 'a = "" [@@bs.send];
  external status: t => float = "" [@@bs.send];
  external readyState: t => float = "" [@@bs.send];
  external responseText: t => string = "" [@@bs.send];
  external responseXML: t => 'a = "" [@@bs.send];
  external ontimeout: t => ProgressEvent => 'a = "" [@@bs.send];
  external statusText: t => string = "" [@@bs.send];
  external onreadystatechange: t => Event => 'a = "" [@@bs.send];
  external timeout: t => float = "" [@@bs.send];
  external onload: t => ProgressEvent => 'a = "" [@@bs.send];
  external response: t => 'a = "" [@@bs.send];
  external withCredentials: t => bool = "" [@@bs.send];
  external onprogress: t => ProgressEvent => 'a = "" [@@bs.send];
  external onabort: t => ProgressEvent => 'a = "" [@@bs.send];
  external responseType: t => string = "" [@@bs.send];
  external onloadend: t => ProgressEvent => 'a = "" [@@bs.send];
  external upload: t => XMLHttpRequestEventTarget = "" [@@bs.send];
  external onerror: t => ProgressEvent => 'a = "" [@@bs.send];
  external onloadstart: t => ProgressEvent => 'a = "" [@@bs.send];
  external msCaching: t => string = "" [@@bs.send];
  external open: t => string => string => async::(option bool) => user::(option string) => password::(option string) => unit = "" [@@bs.send];
  external send: t => data::(option 'a) => unit = "" [@@bs.send];
  external abort: t => unit => unit = "" [@@bs.send];
  external getAllResponseHeaders: t => unit => string = "" [@@bs.send];
  external setRequestHeader: t => string => string => unit = "" [@@bs.send];
  external getResponseHeader: t => string => string = "" [@@bs.send];
  external msCachingEnabled: t => unit => bool = "" [@@bs.send];
  external overrideMimeType: t => string => unit = "" [@@bs.send];
  external _LOADING: t => float = "" [@@bs.send];
  external _DONE: t => float = "" [@@bs.send];
  external _UNSENT: t => float = "" [@@bs.send];
  external _OPENED: t => float = "" [@@bs.send];
  external _HEADERS_RECEIVED: t => float = "" [@@bs.send];
  external statics: t => TODO = "" [@@bs.send];
};
let module XMLHttpRequestEventTarget = {
  type t;
  external onprogress: t => ProgressEvent => 'a = "" [@@bs.send];
  external onerror: t => Event => 'a = "" [@@bs.send];
  external onload: t => Event => 'a = "" [@@bs.send];
  external ontimeout: t => Event => 'a = "" [@@bs.send];
  external onabort: t => Event => 'a = "" [@@bs.send];
  external onloadstart: t => Event => 'a = "" [@@bs.send];
  external onloadend: t => Event => 'a = "" [@@bs.send];
};
let module XMLSerializer = {
  type t;
  external serializeToString: t => Node => string = "" [@@bs.send];
};
let module Geolocation = {
  type t;
  external getCurrentPosition: t => Position => 'a => error::(option PositionError => 'a) => options::(option PositionOptions) => 'a = "" [@@bs.send];
  external watchPosition: t => Position => 'a => error::(option PositionError => 'a) => options::(option PositionOptions) => 'a = "" [@@bs.send];
  external clearWatch: t => 'a = "" [@@bs.send];
};
let module Position = {
  type t;
  external coords: t => Coordinates = "" [@@bs.send];
  external timestamp: t => float = "" [@@bs.send];
};
let module Coordinates = {
  type t;
  external latitude: t => float = "" [@@bs.send];
  external longitude: t => float = "" [@@bs.send];
  external altitude: t => float = "" [@@bs.send];
  external accuracy: t => float = "" [@@bs.send];
  external altitudeAccuracy: t => float = "" [@@bs.send];
  external heading: t => float = "" [@@bs.send];
};
let module PositionError = {
  type t;
  external code: t => float = "" [@@bs.send];
  external message: t => string = "" [@@bs.send];
  external _PERMISSION_DENIED: t => float = "" [@@bs.send];
  external _POSITION_UNAVAILABLE: t => float = "" [@@bs.send];
  external _TIMEOUT: t => float = "" [@@bs.send];
};
type TODO;
let module AudioContext = {
  type t;
  external currentTime: t => float = "" [@@bs.send];
  external destination: t => AudioDestinationNode = "" [@@bs.send];
  external listener: t => AudioListener = "" [@@bs.send];
  external sampleRate: t => float = "" [@@bs.send];
  external state: t => 'a = "" [@@bs.send];
  external onstatechange: t => 'a => 'a = "" [@@bs.send];
  external close: t => unit => unit = "" [@@bs.send];
  external createBuffer: t => float => float => float => AudioBuffer = "" [@@bs.send];
  external createBufferSource: t => myMediaElement::(option HTMLMediaElement) => AudioBufferSourceNode = "" [@@bs.send];
  external createMediaElementSource: t => HTMLMediaElement => MediaElementAudioSourceNode = "" [@@bs.send];
  external createMediaStreamSource: t => unit => MediaStreamAudioSourceNode = "" [@@bs.send];
  external createMediaStreamDestination: t => unit => MediaStream = "" [@@bs.send];
  external createScriptProcessor: t => float => float => float => ScriptProcessorNode = "" [@@bs.send];
  external createAnalyser: t => unit => AnalyserNode = "" [@@bs.send];
  external createBiquadFilter: t => unit => BiquadFilterNode = "" [@@bs.send];
  external createChannelMerger: t => numberOfInputs::(option float) => ChannelMergerNode = "" [@@bs.send];
  external createChannelSplitter: t => numberOfInputs::(option float) => ChannelSplitterNode = "" [@@bs.send];
  external createConvolver: t => unit => ConvolverNode = "" [@@bs.send];
  external createDelay: t => maxDelayTime::(option float) => DelayNode = "" [@@bs.send];
  external createDynamicCompressor: t => unit => DynamicsCompressorNode = "" [@@bs.send];
  external createGain: t => unit => GainNode = "" [@@bs.send];
  external createOscillator: t => unit => OscillatorNode = "" [@@bs.send];
  external createPanner: t => unit => PannerNode = "" [@@bs.send];
  external createPeriodicWave: t => Float32Array => Float32Array => options::(option TODO) => PeriodicWave = "" [@@bs.send];
  external createWaveShaper: t => unit => WaveShaperNode = "" [@@bs.send];
  external decodeAudioData: t => ArrayBuffer => Function => Function => unit = "" [@@bs.send];
  external decodeAudioData: t => ArrayBuffer => Promise = "" [@@bs.send];
  external resume: t => unit => Promise = "" [@@bs.send];
  external suspend: t => unit => Promise = "" [@@bs.send];
};
let module AudioNode = {
  type t;
  external context: t => AudioContext = "" [@@bs.send];
  external numberOfInputs: t => float = "" [@@bs.send];
  external numberOfOutputs: t => float = "" [@@bs.send];
  external channelCount: t => float = "" [@@bs.send];
  external channelCoundMode: t => 'a = "" [@@bs.send];
  external channelInterpretation: t => TODO = "" [@@bs.send];
  external connect: t => AudioNode => output::(option float) => input::(option float) => AudioNode = "" [@@bs.send];
  external connect: t => AudioParam => output::(option float) => unit = "" [@@bs.send];
  external disconnect: t => destination::(option AudioNode) => output::(option float) => input::(option float) => unit = "" [@@bs.send];
};
let module AudioParam = {
  type t;
  external value: t => float = "" [@@bs.send];
  external defaultValue: t => float = "" [@@bs.send];
  external setValueAtTime: t => float => float => this = "" [@@bs.send];
  external linearRampToValueAtTime: t => float => float => this = "" [@@bs.send];
  external exponentialRampToValueAtTime: t => float => float => this = "" [@@bs.send];
  external setTargetAtTime: t => float => float => float => this = "" [@@bs.send];
  external setValueCurveAtTime: t => Float32Array => float => float => this = "" [@@bs.send];
  external cancelScheduledValues: t => float => this = "" [@@bs.send];
};
let module AudioDestinationNode = {
  type t;
  external maxChannelCount: t => float = "" [@@bs.send];
};
let module AudioListener = {
  type t;
  external setOrientation: t => float => float => float => float => float => float => unit = "" [@@bs.send];
};
let module AudioBuffer = {
  type t;
  external sampleRate: t => float = "" [@@bs.send];
  external length: t => float = "" [@@bs.send];
  external duration: t => float = "" [@@bs.send];
  external numberOfChannels: t => float = "" [@@bs.send];
  external getChannelData: t => float => Float32Array = "" [@@bs.send];
  external copyFromChannel: t => Float32Array => float => startInChannel::(option float) => unit = "" [@@bs.send];
  external copyToChannel: t => Float32Array => float => startInChannel::(option float) => unit = "" [@@bs.send];
};
let module AudioBufferSourceNode = {
  type t;
  external buffer: t => AudioBuffer = "" [@@bs.send];
  external detune: t => AudioParam = "" [@@bs.send];
  external loop: t => bool = "" [@@bs.send];
  external loopStart: t => float = "" [@@bs.send];
  external loopEnd: t => float = "" [@@bs.send];
  external playbackRate: t => AudioParam = "" [@@bs.send];
  external onended: t => 'a => 'a = "" [@@bs.send];
  external start: t => when::(option float) => offset::(option float) => duration::(option float) => unit = "" [@@bs.send];
  external stop: t => when::(option float) => unit = "" [@@bs.send];
};
let module MediaStream = {
  type t;
  external active: t => bool = "" [@@bs.send];
  external ended: t => bool = "" [@@bs.send];
  external id: t => string = "" [@@bs.send];
  external onactive: t => 'a => 'a = "" [@@bs.send];
  external onaddtrack: t => 'a => 'a = "" [@@bs.send];
  external onended: t => 'a => 'a = "" [@@bs.send];
  external oninactive: t => 'a => 'a = "" [@@bs.send];
  external onremovetrack: t => 'a => 'a = "" [@@bs.send];
  external addTrack: t => MediaStreamTrack => unit = "" [@@bs.send];
  external clone: t => unit => MediaStream = "" [@@bs.send];
  external getAudioTracks: t => unit => TODO = "" [@@bs.send];
  external getTrackById: t => trackid::(option string) => TODO = "" [@@bs.send];
  external getTracks: t => unit => TODO = "" [@@bs.send];
  external getVideoTracks: t => unit => TODO = "" [@@bs.send];
  external removeTrack: t => MediaStreamTrack => unit = "" [@@bs.send];
};
let module MediaStreamTrack = {
  type t;
  external enabled: t => bool = "" [@@bs.send];
  external id: t => string = "" [@@bs.send];
  external kind: t => string = "" [@@bs.send];
  external label: t => string = "" [@@bs.send];
  external muted: t => bool = "" [@@bs.send];
  external readonly: t => bool = "" [@@bs.send];
  external readyState: t => TODO = "" [@@bs.send];
  external remote: t => bool = "" [@@bs.send];
  external onstarted: t => 'a => 'a = "" [@@bs.send];
  external onmute: t => 'a => 'a = "" [@@bs.send];
  external onunmute: t => 'a => 'a = "" [@@bs.send];
  external onoverconstrained: t => 'a => 'a = "" [@@bs.send];
  external onended: t => 'a => 'a = "" [@@bs.send];
  external getConstraints: t => unit => 'a = "" [@@bs.send];
  external applyConstraints: t => unit => 'a = "" [@@bs.send];
  external getSettings: t => unit => 'a = "" [@@bs.send];
  external getCapabilities: t => unit => 'a = "" [@@bs.send];
  external clone: t => unit => MediaStreamTrack = "" [@@bs.send];
  external stop: t => unit => unit = "" [@@bs.send];
};
let module MediaElementAudioSourceNode = {
  type t;
};
let module MediaStreamAudioSourceNode = {
  type t;
};
let module ScriptProcessorNode = {
  type t;
  external bufferSize: t => float = "" [@@bs.send];
  external onaudioprocess: t => 'a => 'a = "" [@@bs.send];
};
let module AnalyserNode = {
  type t;
  external fftSize: t => float = "" [@@bs.send];
  external frequencyBinCount: t => float = "" [@@bs.send];
  external minDecibels: t => float = "" [@@bs.send];
  external maxDecibels: t => float = "" [@@bs.send];
  external smoothingTimeConstant: t => float = "" [@@bs.send];
  external getFloatFrequencyData: t => Float32Array => Float32Array = "" [@@bs.send];
  external getByteFrequencyData: t => Uint8Array => Uint8Array = "" [@@bs.send];
  external getFloatTimeDomainData: t => Float32Array => Float32Array = "" [@@bs.send];
  external getByteTimeDomainData: t => Uint8Array => Uint8Array = "" [@@bs.send];
};
let module BiquadFilterNode = {
  type t;
  external frequency: t => AudioParam = "" [@@bs.send];
  external detune: t => AudioParam = "" [@@bs.send];
  external _Q: t => AudioParam = "" [@@bs.send];
  external gain: t => AudioParam = "" [@@bs.send];
  external type: t => TODO = "" [@@bs.send];
  external getFrequencyResponse: t => Float32Array => Float32Array => Float32Array => BiquadFilterNode = "" [@@bs.send];
};
let module ChannelMergerNode = {
  type t;
};
let module ChannelSplitterNode = {
  type t;
};
let module ConvolverNode = {
  type t;
  external buffer: t => AudioBuffer = "" [@@bs.send];
  external normalize: t => bool = "" [@@bs.send];
};
let module DelayNode = {
  type t;
  external delayTime: t => float = "" [@@bs.send];
};
let module DynamicsCompressorNode = {
  type t;
  external threshold: t => AudioParam = "" [@@bs.send];
  external knee: t => AudioParam = "" [@@bs.send];
  external ratio: t => AudioParam = "" [@@bs.send];
  external reduction: t => AudioParam = "" [@@bs.send];
  external attack: t => AudioParam = "" [@@bs.send];
  external release: t => AudioParam = "" [@@bs.send];
};
let module GainNode = {
  type t;
  external gain: t => AudioParam = "" [@@bs.send];
};
let module OscillatorNode = {
  type t;
  external frequency: t => AudioParam = "" [@@bs.send];
  external detune: t => AudioParam = "" [@@bs.send];
  external type: t => TODO = "" [@@bs.send];
  external start: t => when::(option float) => unit = "" [@@bs.send];
  external stop: t => when::(option float) => unit = "" [@@bs.send];
  external setPeriodicWave: t => PeriodicWave => unit = "" [@@bs.send];
};
let module PannerNode = {
  type t;
  external panningModel: t => TODO = "" [@@bs.send];
  external distanceModel: t => TODO = "" [@@bs.send];
  external refDistance: t => float = "" [@@bs.send];
  external maxDistance: t => float = "" [@@bs.send];
  external rollofFactor: t => float = "" [@@bs.send];
  external coneInnerAngle: t => float = "" [@@bs.send];
  external coneOuterAngle: t => float = "" [@@bs.send];
  external coneOuterGain: t => float = "" [@@bs.send];
  external setPosition: t => float => float => float => unit = "" [@@bs.send];
  external setOrientation: t => float => float => float => unit = "" [@@bs.send];
};
let module PeriodicWave = {
  type t;
};
let module WaveShaperNode = {
  type t;
  external curve: t => Float32Array = "" [@@bs.send];
  external oversample: t => TODO = "" [@@bs.send];
};
external _AudioContext: AudioContext = "AudioContext" [@@bs.val];
type TODO;
let module Headers = {
  type t;
  external _@@iterator: t => unit => Iterator = "" [@@bs.send];
  external constructor: t => init::(option HeadersInit) => unit = "" [@@bs.send];
  external append: t => string => string => unit = "" [@@bs.send];
  external delete: t => string => unit = "" [@@bs.send];
  external entries: t => unit => Iterator = "" [@@bs.send];
  external get: t => string => string = "" [@@bs.send];
  external getAll: t => string => Array = "" [@@bs.send];
  external has: t => string => bool = "" [@@bs.send];
  external keys: t => unit => Iterator = "" [@@bs.send];
  external set: t => string => string => unit = "" [@@bs.send];
  external values: t => unit => Iterator = "" [@@bs.send];
};
let module URLSearchParams = {
  type t;
  external _@@iterator: t => unit => Iterator = "" [@@bs.send];
  external constructor: t => query::(option TODO) => unit = "" [@@bs.send];
  external append: t => string => string => unit = "" [@@bs.send];
  external delete: t => string => unit = "" [@@bs.send];
  external entries: t => unit => Iterator = "" [@@bs.send];
  external get: t => string => string = "" [@@bs.send];
  external getAll: t => string => Array = "" [@@bs.send];
  external has: t => string => bool = "" [@@bs.send];
  external keys: t => unit => Iterator = "" [@@bs.send];
  external set: t => string => string => unit = "" [@@bs.send];
  external values: t => unit => Iterator = "" [@@bs.send];
};
type TODO;
type TODO;
type TODO;
type TODO;
type TODO;
type TODO;
type TODO;
type TODO;
type TODO;
let module Response = {
  type t;
  external constructor: t => input::(option TODO) => init::(option ResponseOptions) => unit = "" [@@bs.send];
  external clone: t => unit => Response = "" [@@bs.send];
  external error: unit => Response = "" [@@bs.val];
  external redirect: string => float => Response = "" [@@bs.val];
  external type: t => ResponseType = "" [@@bs.send];
  external url: t => string = "" [@@bs.send];
  external useFinalURL: t => bool = "" [@@bs.send];
  external ok: t => bool = "" [@@bs.send];
  external status: t => float = "" [@@bs.send];
  external statusText: t => string = "" [@@bs.send];
  external headers: t => Headers = "" [@@bs.send];
  external bodyUsed: t => bool = "" [@@bs.send];
  external arrayBuffer: t => unit => Promise = "" [@@bs.send];
  external blob: t => unit => Promise = "" [@@bs.send];
  external formData: t => unit => Promise = "" [@@bs.send];
  external json: t => unit => Promise = "" [@@bs.send];
  external text: t => unit => Promise = "" [@@bs.send];
};
let module Request = {
  type t;
  external constructor: t => TODO => init::(option RequestOptions) => unit = "" [@@bs.send];
  external clone: t => unit => Request = "" [@@bs.send];
  external url: t => string = "" [@@bs.send];
  external cache: t => CacheType = "" [@@bs.send];
  external credentials: t => CredentialsType = "" [@@bs.send];
  external headers: t => Headers = "" [@@bs.send];
  external integrity: t => string = "" [@@bs.send];
  external method: t => MethodType = "" [@@bs.send];
  external mode: t => ModeType = "" [@@bs.send];
  external redirect: t => RedirectType = "" [@@bs.send];
  external referrer: t => string = "" [@@bs.send];
  external referrerPolicy: t => ReferrerPolicyType = "" [@@bs.send];
  external bodyUsed: t => bool = "" [@@bs.send];
  external arrayBuffer: t => unit => Promise = "" [@@bs.send];
  external blob: t => unit => Promise = "" [@@bs.send];
  external formData: t => unit => Promise = "" [@@bs.send];
  external json: t => unit => Promise = "" [@@bs.send];
  external text: t => unit => Promise = "" [@@bs.send];
};
external fetch: TODO => init::(option RequestOptions) => Promise = "fetch" [@@bs.val];
let module MessagePort = {
  type t;
  external postMessage: t => 'a => transfer::(option Iterable) => unit = "" [@@bs.send];
  external start: t => unit => unit = "" [@@bs.send];
  external close: t => unit => unit = "" [@@bs.send];
  external onmessage: t => Event => 'a = "" [@@bs.send];
};
let module MessageChannel = {
  type t;
  external port1: t => MessagePort = "" [@@bs.send];
  external port2: t => MessagePort = "" [@@bs.send];
};
